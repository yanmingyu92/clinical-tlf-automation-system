{
  "id": "fda-exposure-response-detailed-001",
  "title": "Table 14.2.5 Exposure-Response Analysis",
  "type": "table",
  "category": "pharmacokinetics",
  "fda_compliance": {
    "standard": "ICH E3 Section 14.2.5",
    "population": "Pharmacokinetic Population",
    "statistical_method": "Nonlinear Mixed Effects Modeling",
    "quality_checks": ["data_validation", "statistical_review", "clinical_review", "model_validation"],
    "regulatory_requirements": [
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "ICH E3 Guidelines Section 14.2",
      "CDISC ADaM Implementation Guide",
      "Exposure-Response Analysis Guidelines"
    ]
  },
  "template_structure": {
    "title": "Table 14.2.5 Exposure-Response Analysis",
    "subtitle": "Concentration-Efficacy and Concentration-Safety Relationships",
    "table_type": "exposure_response",
    "columns": [
      {
        "name": "Endpoint",
        "type": "text",
        "description": "Efficacy or safety endpoint"
      },
      {
        "name": "Exposure Metric",
        "type": "text",
        "description": "Pharmacokinetic exposure measure"
      },
      {
        "name": "Model Type",
        "type": "text",
        "description": "Statistical model used for analysis"
      },
      {
        "name": "Parameter",
        "type": "text",
        "description": "Model parameter name"
      },
      {
        "name": "Estimate",
        "type": "statistical",
        "description": "Parameter estimate",
        "statistics": ["estimate", "se"]
      },
      {
        "name": "95% CI",
        "type": "statistical",
        "description": "95% confidence interval",
        "statistics": ["ci_lower", "ci_upper"]
      },
      {
        "name": "p-value",
        "type": "statistical",
        "description": "Statistical significance",
        "statistics": ["p_value"]
      },
      {
        "name": "Clinical Significance",
        "type": "text",
        "description": "Clinical relevance assessment"
      },
      {
        "name": "Model Fit",
        "type": "text",
        "description": "Model goodness-of-fit assessment"
      }
    ],
    "rows": [
      {
        "category": "Concentration-Efficacy Relationships",
        "parameters": [
          {
            "name": "ADAS-Cog Change",
            "paramcd": "ADASCOG_CHG",
            "category": "Concentration-Efficacy Relationships",
            "exposure_var": "C_AVG",
            "endpoint_var": "CHG_ADASCOG",
            "model_type": "Linear Mixed Effects",
            "clinical_threshold": "≥4-point improvement"
          },
          {
            "name": "ADCS-ADL Change",
            "paramcd": "ADCSADL_CHG",
            "category": "Concentration-Efficacy Relationships",
            "exposure_var": "C_AVG",
            "endpoint_var": "CHG_ADCSADL",
            "model_type": "Linear Mixed Effects",
            "clinical_threshold": "≥2-point improvement"
          },
          {
            "name": "CIBIC-Plus Response",
            "paramcd": "CIBICPLUS_RESP",
            "category": "Concentration-Efficacy Relationships",
            "exposure_var": "C_AVG",
            "endpoint_var": "CIBICPLUS_RESP",
            "model_type": "Logistic Regression",
            "clinical_threshold": "Improved vs Not Improved"
          },
          {
            "name": "ADAS-Cog Responder Rate",
            "paramcd": "ADASCOG_RESP_RATE",
            "category": "Concentration-Efficacy Relationships",
            "exposure_var": "C_AVG",
            "endpoint_var": "ADASCOG_RESP",
            "model_type": "Logistic Regression",
            "clinical_threshold": "≥4-point improvement"
          }
        ]
      },
      {
        "category": "Concentration-Safety Relationships",
        "parameters": [
          {
            "name": "QTcF Prolongation",
            "paramcd": "QTCF_PROLONG",
            "category": "Concentration-Safety Relationships",
            "exposure_var": "C_AVG",
            "endpoint_var": "CHG_QTCF",
            "model_type": "Linear Mixed Effects",
            "clinical_threshold": "≥30 ms increase"
          },
          {
            "name": "ALT Elevation",
            "paramcd": "ALT_ELEV",
            "category": "Concentration-Safety Relationships",
            "exposure_var": "C_AVG",
            "endpoint_var": "CHG_ALT",
            "model_type": "Linear Mixed Effects",
            "clinical_threshold": "≥3x ULN"
          },
          {
            "name": "Adverse Event Rate",
            "paramcd": "AE_RATE",
            "category": "Concentration-Safety Relationships",
            "exposure_var": "C_AVG",
            "endpoint_var": "AE_COUNT",
            "model_type": "Poisson Regression",
            "clinical_threshold": "≥2-fold increase"
          },
          {
            "name": "Serious Adverse Event Rate",
            "paramcd": "SAE_RATE",
            "category": "Concentration-Safety Relationships",
            "exposure_var": "C_AVG",
            "endpoint_var": "SAE_COUNT",
            "model_type": "Poisson Regression",
            "clinical_threshold": "≥2-fold increase"
          }
        ]
      },
      {
        "category": "Dose-Response Relationships",
        "parameters": [
          {
            "name": "Dose-Efficacy Response",
            "paramcd": "DOSE_EFFICACY",
            "category": "Dose-Response Relationships",
            "exposure_var": "DOSE",
            "endpoint_var": "CHG_ADASCOG",
            "model_type": "Emax Model",
            "clinical_threshold": "EC50 estimation"
          },
          {
            "name": "Dose-Safety Response",
            "paramcd": "DOSE_SAFETY",
            "category": "Dose-Response Relationships",
            "exposure_var": "DOSE",
            "endpoint_var": "AE_RATE",
            "model_type": "Emax Model",
            "clinical_threshold": "EC50 estimation"
          },
          {
            "name": "Therapeutic Index",
            "paramcd": "THERAPEUTIC_INDEX",
            "category": "Dose-Response Relationships",
            "exposure_var": "DOSE",
            "endpoint_var": "TI_RATIO",
            "model_type": "Ratio Analysis",
            "clinical_threshold": "≥2.0"
          }
        ]
      }
    ],
    "footnotes": [
      "PK Population: All subjects with evaluable pharmacokinetic data",
      "Exposure metrics: C_AVG (average concentration), C_MAX (maximum concentration), AUC (area under curve)",
      "Model types: Linear mixed effects, logistic regression, Poisson regression, Emax model",
      "Clinical significance: Pre-specified thresholds for efficacy and safety endpoints",
      "Model fit: AIC, BIC, residual analysis, and goodness-of-fit tests",
      "95% CI: 95% confidence interval for parameter estimates",
      "p-values: Statistical significance testing for exposure-response relationships",
      "Therapeutic index: Ratio of safety EC50 to efficacy EC50"
    ],
    "statistical_methodology": {
      "primary_method": "Nonlinear Mixed Effects Modeling",
      "model_types": ["Linear Mixed Effects", "Logistic Regression", "Poisson Regression", "Emax Model"],
      "exposure_metrics": ["Average concentration", "Maximum concentration", "AUC", "Trough concentration"],
      "clinical_significance": "Pre-specified thresholds for efficacy and safety endpoints",
      "model_validation": "AIC, BIC, residual analysis, goodness-of-fit tests",
      "confidence_intervals": "95% confidence intervals for parameter estimates",
      "significance_level": 0.05,
      "confidence_level": 0.95
    }
  },
  "r_code": {
    "libraries": [
      "library(tidyverse)",
      "library(lme4)",
      "library(nlme)",
      "library(emmeans)",
      "library(gt)",
      "library(flextable)",
      "library(haven)",
      "library(lubridate)"
    ],
    "data_preparation": [
      "# Load datasets",
      "adsl <- read_sas('data/adsl.sas7bdat')",
      "adpc <- read_sas('data/adpc.sas7bdat')",
      "adqs <- read_sas('data/adqs.sas7bdat')",
      "adae <- read_sas('data/adae.sas7bdat')",
      "",
      "# Filter for PK population",
      "adsl_pk <- adsl %>% filter(PKFL == 'Y')",
      "",
      "# Merge datasets",
      "analysis_data <- adpc %>%",
      "  inner_join(adsl_pk, by = 'USUBJID') %>%",
      "  left_join(adqs, by = c('USUBJID', 'AVISIT')) %>%",
      "  left_join(adae, by = 'USUBJID') %>%",
      "  mutate(",
      "    TRT01P = factor(TRT01P, levels = c('Placebo', 'Treatment B', 'Treatment A')),",
      "    # Calculate exposure metrics",
      "    C_AVG = AVAL,  # Average concentration",
      "    C_MAX = AVAL,  # Maximum concentration (simplified)",
      "    AUC = AVAL * TIME,  # Area under curve (simplified)",
      "    # Calculate efficacy endpoints",
      "    CHG_ADASCOG = AVAL - BASE_ADASCOG,",
      "    CHG_ADCSADL = AVAL - BASE_ADCSADL,",
      "    CIBICPLUS_RESP = ifelse(AVAL <= 3, 1, 0),  # Improved vs Not Improved",
      "    ADASCOG_RESP = ifelse(CHG_ADASCOG >= 4, 1, 0),  # ≥4-point improvement",
      "    # Calculate safety endpoints",
      "    CHG_QTCF = AVAL - BASE_QTCF,",
      "    CHG_ALT = AVAL - BASE_ALT,",
      "    AE_COUNT = ifelse(!is.na(AETERM), 1, 0),",
      "    SAE_COUNT = ifelse(!is.na(AETERM) & AESER == 'Y', 1, 0),",
      "    # Calculate therapeutic index",
      "    TI_RATIO = ifelse(SAE_EC50 > 0, EFFICACY_EC50 / SAE_EC50, NA)",
      "  )",
      "",
      "# Define exposure-response parameters",
      "exposure_response_parameters <- list(",
      "  ADASCOG_CHG = list(",
      "    label = 'ADAS-Cog Change',",
      "    category = 'Concentration-Efficacy Relationships',",
      "    exposure_var = 'C_AVG',",
      "    endpoint_var = 'CHG_ADASCOG',",
      "    model_type = 'Linear Mixed Effects',",
      "    clinical_threshold = '≥4-point improvement'",
      "  ),",
      "  ADCSADL_CHG = list(",
      "    label = 'ADCS-ADL Change',",
      "    category = 'Concentration-Efficacy Relationships',",
      "    exposure_var = 'C_AVG',",
      "    endpoint_var = 'CHG_ADCSADL',",
      "    model_type = 'Linear Mixed Effects',",
      "    clinical_threshold = '≥2-point improvement'",
      "  ),",
      "  CIBICPLUS_RESP = list(",
      "    label = 'CIBIC-Plus Response',",
      "    category = 'Concentration-Efficacy Relationships',",
      "    exposure_var = 'C_AVG',",
      "    endpoint_var = 'CIBICPLUS_RESP',",
      "    model_type = 'Logistic Regression',",
      "    clinical_threshold = 'Improved vs Not Improved'",
      "  ),",
      "  ADASCOG_RESP_RATE = list(",
      "    label = 'ADAS-Cog Responder Rate',",
      "    category = 'Concentration-Efficacy Relationships',",
      "    exposure_var = 'C_AVG',",
      "    endpoint_var = 'ADASCOG_RESP',",
      "    model_type = 'Logistic Regression',",
      "    clinical_threshold = '≥4-point improvement'",
      "  ),",
      "  QTCF_PROLONG = list(",
      "    label = 'QTcF Prolongation',",
      "    category = 'Concentration-Safety Relationships',",
      "    exposure_var = 'C_AVG',",
      "    endpoint_var = 'CHG_QTCF',",
      "    model_type = 'Linear Mixed Effects',",
      "    clinical_threshold = '≥30 ms increase'",
      "  ),",
      "  ALT_ELEV = list(",
      "    label = 'ALT Elevation',",
      "    category = 'Concentration-Safety Relationships',",
      "    exposure_var = 'C_AVG',",
      "    endpoint_var = 'CHG_ALT',",
      "    model_type = 'Linear Mixed Effects',",
      "    clinical_threshold = '≥3x ULN'",
      "  ),",
      "  AE_RATE = list(",
      "    label = 'Adverse Event Rate',",
      "    category = 'Concentration-Safety Relationships',",
      "    exposure_var = 'C_AVG',",
      "    endpoint_var = 'AE_COUNT',",
      "    model_type = 'Poisson Regression',",
      "    clinical_threshold = '≥2-fold increase'",
      "  ),",
      "  SAE_RATE = list(",
      "    label = 'Serious Adverse Event Rate',",
      "    category = 'Concentration-Safety Relationships',",
      "    exposure_var = 'C_AVG',",
      "    endpoint_var = 'SAE_COUNT',",
      "    model_type = 'Poisson Regression',",
      "    clinical_threshold = '≥2-fold increase'",
      "  ),",
      "  DOSE_EFFICACY = list(",
      "    label = 'Dose-Efficacy Response',",
      "    category = 'Dose-Response Relationships',",
      "    exposure_var = 'DOSE',",
      "    endpoint_var = 'CHG_ADASCOG',",
      "    model_type = 'Emax Model',",
      "    clinical_threshold = 'EC50 estimation'",
      "  ),",
      "  DOSE_SAFETY = list(",
      "    label = 'Dose-Safety Response',",
      "    category = 'Dose-Response Relationships',",
      "    exposure_var = 'DOSE',",
      "    endpoint_var = 'AE_RATE',",
      "    model_type = 'Emax Model',",
      "    clinical_threshold = 'EC50 estimation'",
      "  ),",
      "  THERAPEUTIC_INDEX = list(",
      "    label = 'Therapeutic Index',",
      "    category = 'Dose-Response Relationships',",
      "    exposure_var = 'DOSE',",
      "    endpoint_var = 'TI_RATIO',",
      "    model_type = 'Ratio Analysis',",
      "    clinical_threshold = '≥2.0'",
      "  )",
      ")"
    ],
    "statistical_analysis": [
      "# Function to fit linear mixed effects model",
      "fit_linear_mixed_model <- function(data, param_code) {",
      "  param_info <- exposure_response_parameters[[param_code]]",
      "  exposure_var <- param_info$exposure_var",
      "  endpoint_var <- param_info$endpoint_var",
      "  ",
      "  # Filter data for parameter",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code) %>%",
      "    filter(!is.na(!!sym(exposure_var)) & !is.na(!!sym(endpoint_var)))",
      "  ",
      "  # Fit linear mixed effects model",
      "  formula_str <- paste(endpoint_var, '~', exposure_var, '+ (1|USUBJID)')",
      "  model <- lmer(as.formula(formula_str), data = param_data)",
      "  ",
      "  # Extract parameter estimates",
      "  fixed_effects <- fixef(model)",
      "  vcov_matrix <- vcov(model)",
      "  ",
      "  # Calculate confidence intervals",
      "  exposure_coef <- fixed_effects[exposure_var]",
      "  exposure_se <- sqrt(vcov_matrix[exposure_var, exposure_var])",
      "  ",
      "  ci_lower <- exposure_coef - 1.96 * exposure_se",
      "  ci_upper <- exposure_coef + 1.96 * exposure_se",
      "  ",
      "  # Calculate p-value",
      "  t_stat <- exposure_coef / exposure_se",
      "  p_value <- 2 * pt(-abs(t_stat), df = nrow(param_data) - length(fixed_effects))",
      "  ",
      "  # Model fit assessment",
      "  aic <- AIC(model)",
      "  bic <- BIC(model)",
      "  ",
      "  return(list(",
      "    model = model,",
      "    estimate = exposure_coef,",
      "    se = exposure_se,",
      "    ci_lower = ci_lower,",
      "    ci_upper = ci_upper,",
      "    p_value = p_value,",
      "    aic = aic,",
      "    bic = bic",
      "  ))",
      "}",
      "",
      "# Function to fit logistic regression model",
      "fit_logistic_model <- function(data, param_code) {",
      "  param_info <- exposure_response_parameters[[param_code]]",
      "  exposure_var <- param_info$exposure_var",
      "  endpoint_var <- param_info$endpoint_var",
      "  ",
      "  # Filter data for parameter",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code) %>%",
      "    filter(!is.na(!!sym(exposure_var)) & !is.na(!!sym(endpoint_var)))",
      "  ",
      "  # Fit logistic regression model",
      "  formula_str <- paste(endpoint_var, '~', exposure_var)",
      "  model <- glm(as.formula(formula_str), data = param_data, family = binomial)",
      "  ",
      "  # Extract parameter estimates",
      "  model_summary <- summary(model)",
      "  exposure_coef <- model_summary$coefficients[exposure_var, 'Estimate']",
      "  exposure_se <- model_summary$coefficients[exposure_var, 'Std. Error']",
      "  ",
      "  # Calculate confidence intervals",
      "  ci_lower <- exposure_coef - 1.96 * exposure_se",
      "  ci_upper <- exposure_coef + 1.96 * exposure_se",
      "  ",
      "  # Extract p-value",
      "  p_value <- model_summary$coefficients[exposure_var, 'Pr(>|z|)']",
      "  ",
      "  # Model fit assessment",
      "  aic <- AIC(model)",
      "  bic <- BIC(model)",
      "  ",
      "  return(list(",
      "    model = model,",
      "    estimate = exposure_coef,",
      "    se = exposure_se,",
      "    ci_lower = ci_lower,",
      "    ci_upper = ci_upper,",
      "    p_value = p_value,",
      "    aic = aic,",
      "    bic = bic",
      "  ))",
      "}",
      "",
      "# Function to fit Poisson regression model",
      "fit_poisson_model <- function(data, param_code) {",
      "  param_info <- exposure_response_parameters[[param_code]]",
      "  exposure_var <- param_info$exposure_var",
      "  endpoint_var <- param_info$endpoint_var",
      "  ",
      "  # Filter data for parameter",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code) %>%",
      "    filter(!is.na(!!sym(exposure_var)) & !is.na(!!sym(endpoint_var)))",
      "  ",
      "  # Fit Poisson regression model",
      "  formula_str <- paste(endpoint_var, '~', exposure_var)",
      "  model <- glm(as.formula(formula_str), data = param_data, family = poisson)",
      "  ",
      "  # Extract parameter estimates",
      "  model_summary <- summary(model)",
      "  exposure_coef <- model_summary$coefficients[exposure_var, 'Estimate']",
      "  exposure_se <- model_summary$coefficients[exposure_var, 'Std. Error']",
      "  ",
      "  # Calculate confidence intervals",
      "  ci_lower <- exposure_coef - 1.96 * exposure_se",
      "  ci_upper <- exposure_coef + 1.96 * exposure_se",
      "  ",
      "  # Extract p-value",
      "  p_value <- model_summary$coefficients[exposure_var, 'Pr(>|z|)']",
      "  ",
      "  # Model fit assessment",
      "  aic <- AIC(model)",
      "  bic <- BIC(model)",
      "  ",
      "  return(list(",
      "    model = model,",
      "    estimate = exposure_coef,",
      "    se = exposure_se,",
      "    ci_lower = ci_lower,",
      "    ci_upper = ci_upper,",
      "    p_value = p_value,",
      "    aic = aic,",
      "    bic = bic",
      "  ))",
      "}",
      "",
      "# Function to fit Emax model",
      "fit_emax_model <- function(data, param_code) {",
      "  param_info <- exposure_response_parameters[[param_code]]",
      "  exposure_var <- param_info$exposure_var",
      "  endpoint_var <- param_info$endpoint_var",
      "  ",
      "  # Filter data for parameter",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code) %>%",
      "    filter(!is.na(!!sym(exposure_var)) & !is.na(!!sym(endpoint_var)))",
      "  ",
      "  # Fit Emax model using nls",
      "  tryCatch({",
      "    # Emax model: Response = E0 + (Emax * Dose) / (EC50 + Dose)",
      "    emax_formula <- as.formula(paste(endpoint_var, '~ E0 + (Emax *', exposure_var, ') / (EC50 +', exposure_var, ')'))",
      "    ",
      "    # Initial parameter estimates",
      "    start_values <- list(",
      "      E0 = mean(param_data[[endpoint_var]], na.rm = TRUE),",
      "      Emax = max(param_data[[endpoint_var]], na.rm = TRUE) - min(param_data[[endpoint_var]], na.rm = TRUE),",
      "      EC50 = median(param_data[[exposure_var]], na.rm = TRUE)",
      "    )",
      "    ",
      "    model <- nls(emax_formula, data = param_data, start = start_values)",
      "    ",
      "    # Extract parameter estimates",
      "    model_summary <- summary(model)",
      "    ",
      "    # Get EC50 estimate",
      "    ec50_estimate <- coef(model)['EC50']",
      "    ec50_se <- model_summary$coefficients['EC50', 'Std. Error']",
      "    ",
      "    # Calculate confidence intervals",
      "    ci_lower <- ec50_estimate - 1.96 * ec50_se",
      "    ci_upper <- ec50_estimate + 1.96 * ec50_se",
      "    ",
      "    # Extract p-value",
      "    p_value <- model_summary$coefficients['EC50', 'Pr(>|t|)']",
      "    ",
      "    # Model fit assessment",
      "    aic <- AIC(model)",
      "    bic <- BIC(model)",
      "    ",
      "    return(list(",
      "      model = model,",
      "      estimate = ec50_estimate,",
      "      se = ec50_se,",
      "      ci_lower = ci_lower,",
      "      ci_upper = ci_upper,",
      "      p_value = p_value,",
      "      aic = aic,",
      "      bic = bic",
      "    ))",
      "  }, error = function(e) {",
      "    # Return NA if model fails to converge",
      "    return(list(",
      "      model = NULL,",
      "      estimate = NA,",
      "      se = NA,",
      "      ci_lower = NA,",
      "      ci_upper = NA,",
      "      p_value = NA,",
      "      aic = NA,",
      "      bic = NA",
      "    ))",
      "  })",
      "}",
      "",
      "# Fit models for all exposure-response parameters",
      "exposure_response_results <- list()",
      "for (param in names(exposure_response_parameters)) {",
      "  param_info <- exposure_response_parameters[[param]]",
      "  ",
      "  if (param_info$model_type == 'Linear Mixed Effects') {",
      "    exposure_response_results[[param]] <- fit_linear_mixed_model(analysis_data, param)",
      "  } else if (param_info$model_type == 'Logistic Regression') {",
      "    exposure_response_results[[param]] <- fit_logistic_model(analysis_data, param)",
      "  } else if (param_info$model_type == 'Poisson Regression') {",
      "    exposure_response_results[[param]] <- fit_poisson_model(analysis_data, param)",
      "  } else if (param_info$model_type == 'Emax Model') {",
      "    exposure_response_results[[param]] <- fit_emax_model(analysis_data, param)",
      "  }",
      "}"
    ],
    "table_generation": [
      "# Function to create exposure-response summary table",
      "create_exposure_response_table <- function(results, param_info) {",
      "  table_data <- data.frame()",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    info <- param_info[[param]]",
      "    ",
      "    # Format parameter estimates",
      "    estimate_str <- sprintf('%.4f', result$estimate)",
      "    se_str <- sprintf('%.4f', result$se)",
      "    estimate_se <- paste(estimate_str, '(', se_str, ')')",
      "    ",
      "    # Format confidence intervals",
      "    ci_str <- sprintf('%.4f, %.4f', result$ci_lower, result$ci_upper)",
      "    ",
      "    # Format p-value",
      "    p_str <- sprintf('%.4f', result$p_value)",
      "    ",
      "    # Clinical significance assessment",
      "    clinical_significance <- case_when(",
      "      result$p_value < 0.001 ~ 'Highly Significant',",
      "      result$p_value < 0.01 ~ 'Significant',",
      "      result$p_value < 0.05 ~ 'Marginally Significant',",
      "      TRUE ~ 'Not Significant'",
      "    )",
      "    ",
      "    # Model fit assessment",
      "    model_fit <- case_when(",
      "      result$aic < 100 ~ 'Excellent',",
      "      result$aic < 200 ~ 'Good',",
      "      result$aic < 300 ~ 'Fair',",
      "      TRUE ~ 'Poor'",
      "    )",
      "    ",
      "    # Add to table data",
      "    row_data <- data.frame(",
      "      Endpoint = info$label,",
      "      Exposure_Metric = info$exposure_var,",
      "      Model_Type = info$model_type,",
      "      Parameter = paste('Effect of', info$exposure_var),",
      "      Estimate = estimate_se,",
      "      CI_95 = ci_str,",
      "      P_value = p_str,",
      "      Clinical_Significance = clinical_significance,",
      "      Model_Fit = model_fit",
      "    )",
      "    ",
      "    table_data <- rbind(table_data, row_data)",
      "  }",
      "  ",
      "  return(table_data)",
      "}",
      "",
      "# Generate table",
      "exposure_response_table_data <- create_exposure_response_table(exposure_response_results, exposure_response_parameters)",
      "",
      "# Create formatted table",
      "exposure_response_table <- exposure_response_table_data %>%",
      "  gt() %>%",
      "  tab_header(",
      "    title = 'Table 14.2.5 Exposure-Response Analysis',",
      "    subtitle = 'Concentration-Efficacy and Concentration-Safety Relationships'",
      "  ) %>%",
      "  cols_label(",
      "    Endpoint = 'Endpoint',",
      "    Exposure_Metric = 'Exposure Metric',",
      "    Model_Type = 'Model Type',",
      "    Parameter = 'Parameter',",
      "    Estimate = 'Estimate (SE)',",
      "    CI_95 = '95% CI',",
      "    P_value = 'p-value',",
      "    Clinical_Significance = 'Clinical Significance',",
      "    Model_Fit = 'Model Fit'",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_column_labels()",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_borders(",
      "      sides = 'bottom',",
      "      weight = px(2)",
      "    ),",
      "    locations = cells_body(",
      "      rows = c(4, 8, 11)",
      "    )",
      "  ) %>%",
      "  fmt_markdown(columns = everything()) %>%",
      "  tab_footnote(",
      "    footnote = 'PK Population: All subjects with evaluable pharmacokinetic data',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Exposure metrics: C_AVG (average concentration), C_MAX (maximum concentration), AUC (area under curve)',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Model types: Linear mixed effects, logistic regression, Poisson regression, Emax model',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Clinical significance: Pre-specified thresholds for efficacy and safety endpoints',",
      "    locations = cells_title()",
      "  )",
      "",
      "# Display table",
      "exposure_response_table"
    ],
    "quality_checks": [
      "# Data validation checks",
      "data_validation <- analysis_data %>%",
      "  group_by(PARAMCD, TRT01P) %>%",
      "  summarise(",
      "    n_subjects = n_distinct(USUBJID),",
      "    n_observations = n(),",
      "    missing_exposure = sum(is.na(C_AVG)),",
      "    missing_endpoint = sum(is.na(CHG_ADASCOG)),",
      "    exposure_completeness = (n_observations - missing_exposure) / n_observations * 100,",
      "    endpoint_completeness = (n_observations - missing_endpoint) / n_observations * 100,",
      "    .groups = 'drop'",
      "  ) %>%",
      "  filter(exposure_completeness < 80 | endpoint_completeness < 80)",
      "",
      "# Statistical validation",
      "statistical_validation <- list()",
      "for (param in names(exposure_response_results)) {",
      "  result <- exposure_response_results[[param]]",
      "  param_info <- exposure_response_parameters[[param]]",
      "  ",
      "  # Check model convergence",
      "  convergence <- !is.null(result$model) && !is.na(result$estimate)",
      "  ",
      "  # Check parameter estimates",
      "  valid_estimate <- !is.na(result$estimate) && is.finite(result$estimate)",
      "  valid_se <- !is.na(result$se) && result$se > 0",
      "  ",
      "  # Check confidence intervals",
      "  valid_ci <- !is.na(result$ci_lower) && !is.na(result$ci_upper) && result$ci_lower < result$ci_upper",
      "  ",
      "  # Check model fit",
      "  good_fit <- result$aic < 200 && result$bic < 200",
      "  ",
      "  statistical_validation[[param]] <- list(",
      "    convergence = convergence,",
      "    valid_estimate = valid_estimate,",
      "    valid_se = valid_se,",
      "    valid_ci = valid_ci,",
      "    good_fit = good_fit,",
      "    aic = result$aic,",
      "    bic = result$bic",
      "  )",
      "}",
      "",
      "# Clinical validation",
      "clinical_validation <- list()",
      "for (param in names(exposure_response_results)) {",
      "  result <- exposure_response_results[[param]]",
      "  param_info <- exposure_response_parameters[[param]]",
      "  ",
      "  # Check clinical significance",
      "  clinically_significant <- result$p_value < 0.05",
      "  ",
      "  # Check effect size",
      "  effect_size <- abs(result$estimate)",
      "  large_effect <- effect_size > 0.5,  # Threshold for large effect",
      "  ",
      "  # Check clinical threshold",
      "  meets_threshold <- case_when(",
      "    str_detect(param_info$clinical_threshold, '≥4-point') ~ effect_size >= 4,",
      "    str_detect(param_info$clinical_threshold, '≥2-point') ~ effect_size >= 2,",
      "    str_detect(param_info$clinical_threshold, '≥30 ms') ~ effect_size >= 30,",
      "    str_detect(param_info$clinical_threshold, '≥3x ULN') ~ effect_size >= 3,",
      "    str_detect(param_info$clinical_threshold, '≥2-fold') ~ effect_size >= 0.693,  # log(2)",
      "    TRUE ~ TRUE",
      "  )",
      "  ",
      "  clinical_validation[[param]] <- list(",
      "    clinically_significant = clinically_significant,",
      "    large_effect = large_effect,",
      "    meets_threshold = meets_threshold,",
      "    effect_size = effect_size,",
      "    clinical_threshold = param_info$clinical_threshold",
      "  )",
      "}",
      "",
      "# Model validation",
      "model_validation <- list()",
      "for (param in names(exposure_response_results)) {",
      "  result <- exposure_response_results[[param]]",
      "  param_info <- exposure_response_parameters[[param]]",
      "  ",
      "  if (!is.null(result$model)) {",
      "    # Residual analysis",
      "    residuals <- residuals(result$model)",
      "    residual_sd <- sd(residuals, na.rm = TRUE)",
      "    ",
      "    # Normality test",
      "    normality_test <- shapiro.test(residuals)",
      "    ",
      "    # Model diagnostics",
      "    model_diagnostics <- list(",
      "      residual_sd = residual_sd,",
      "      normality_p_value = normality_test$p.value,",
      "      is_normal = normality_test$p.value > 0.05,",
      "      aic = result$aic,",
      "      bic = result$bic",
      "    )",
      "  } else {",
      "    model_diagnostics <- list(",
      "      residual_sd = NA,",
      "      normality_p_value = NA,",
      "      is_normal = NA,",
      "      aic = NA,",
      "      bic = NA",
      "    )",
      "  }",
      "  ",
      "  model_validation[[param]] <- model_diagnostics",
      "}",
      "",
      "# Print validation results",
      "cat('Data Validation:\\n')",
      "print(data_validation)",
      "cat('\\nStatistical Validation:\\n')",
      "print(statistical_validation)",
      "cat('\\nClinical Validation:\\n')",
      "print(clinical_validation)",
      "cat('\\nModel Validation:\\n')",
      "print(model_validation)"
    ],
    "export_functions": [
      "# Export exposure-response analysis results",
      "export_exposure_response_results <- function(table_data, results, param_info, output_dir = 'output') {",
      "  # Create output directory",
      "  if (!dir.exists(output_dir)) {",
      "    dir.create(output_dir, recursive = TRUE)",
      "  }",
      "  ",
      "  # Export HTML table",
      "  html_file <- file.path(output_dir, 'exposure_response_table.html')",
      "  exposure_response_table %>%",
      "    gtsave(html_file)",
      "  ",
      "  # Export RTF table",
      "  rtf_file <- file.path(output_dir, 'exposure_response_table.rtf')",
      "  exposure_response_table_data %>%",
      "    flextable() %>%",
      "    set_header_labels(",
      "      Endpoint = 'Endpoint',",
      "      Exposure_Metric = 'Exposure Metric',",
      "      Model_Type = 'Model Type',",
      "      Parameter = 'Parameter',",
      "      Estimate = 'Estimate (SE)',",
      "      CI_95 = '95% CI',",
      "      P_value = 'p-value',",
      "      Clinical_Significance = 'Clinical Significance',",
      "      Model_Fit = 'Model Fit'",
      "    ) %>%",
      "    autofit() %>%",
      "    save_as_rtf(rtf_file)",
      "  ",
      "  # Export results summary",
      "  summary_file <- file.path(output_dir, 'exposure_response_summary.txt')",
      "  sink(summary_file)",
      "  cat('Exposure-Response Analysis Summary\\n')",
      "  cat('==================================\\n\\n')",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    info <- param_info[[param]]",
      "    ",
      "    cat(sprintf('Endpoint: %s\\n', info$label))",
      "    cat(sprintf('Model Type: %s\\n', info$model_type))",
      "    cat(sprintf('Exposure Metric: %s\\n', info$exposure_var))",
      "    ",
      "    if (!is.null(result$model)) {",
      "      cat(sprintf('Estimate: %.4f (%.4f)\\n', result$estimate, result$se))",
      "      cat(sprintf('95%% CI: (%.4f, %.4f)\\n', result$ci_lower, result$ci_upper))",
      "      cat(sprintf('p-value: %.4f\\n', result$p_value))",
      "      cat(sprintf('AIC: %.2f\\n', result$aic))",
      "      cat(sprintf('BIC: %.2f\\n', result$bic))",
      "    } else {",
      "      cat('Model failed to converge\\n')",
      "    }",
      "    ",
      "    cat('\\n')",
      "  }",
      "  ",
      "  cat('Statistical Method: Nonlinear Mixed Effects Modeling\\n')",
      "  cat('Population: Pharmacokinetic Population\\n')",
      "  cat('Significance Level: 0.05\\n')",
      "  cat('Model Types: Linear mixed effects, logistic regression, Poisson regression, Emax model\\n')",
      "  sink()",
      "  ",
      "  cat('Exported files to:', output_dir, '\\n')",
      "}",
      "",
      "# Export results",
      "export_exposure_response_results(exposure_response_table_data, exposure_response_results, exposure_response_parameters)"
    ]
  },
  "keywords": [
    "exposure-response analysis",
    "concentration-efficacy relationships",
    "concentration-safety relationships",
    "dose-response relationships",
    "pharmacokinetics",
    "nonlinear mixed effects modeling",
    "Emax model",
    "therapeutic index",
    "PK population",
    "FDA compliance",
    "ICH E3",
    "clinical trial",
    "statistical analysis"
  ],
  "metadata": {
    "created_date": "2024-08-06",
    "version": "1.0",
    "author": "Jaime Yan",
    "description": "FDA-compliant exposure-response analysis template with detailed structure and complete R code",
    "references": [
      "ICH E3 Guidelines Section 14.2.5",
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "CDISC ADaM Implementation Guide",
      "Exposure-Response Analysis Guidelines",
      "Statistical Analysis Plan Template"
    ],
    "data_requirements": [
      "ADSL dataset with PKFL flag",
      "ADPC dataset with pharmacokinetic variables",
      "ADQS dataset with efficacy endpoints",
      "ADAE dataset with safety endpoints",
      "PK variables: C_AVG, C_MAX, AUC, TROUGH",
      "Efficacy endpoints: CHG_ADASCOG, CHG_ADCSADL, CIBICPLUS_RESP, ADASCOG_RESP",
      "Safety endpoints: CHG_QTCF, CHG_ALT, AE_COUNT, SAE_COUNT",
      "Treatment assignment: TRT01P"
    ],
    "statistical_methods": [
      "Nonlinear mixed effects modeling for exposure-response relationships",
      "Linear mixed effects models for continuous endpoints",
      "Logistic regression for binary endpoints",
      "Poisson regression for count endpoints",
      "Emax model for dose-response relationships",
      "Model validation using AIC, BIC, and residual analysis"
    ]
  }
} 