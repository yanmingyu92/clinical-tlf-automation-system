{
  "id": "fda-secondary-efficacy-detailed-001",
  "title": "Table 14.2.2 Secondary Efficacy Endpoints Analysis",
  "type": "table",
  "category": "efficacy",
  "fda_compliance": {
    "standard": "ICH E3 Section 14.2.2",
    "population": "Intent-to-Treat (ITT)",
    "statistical_method": "Mixed Model Repeated Measures (MMRM)",
    "quality_checks": ["data_validation", "statistical_review", "clinical_review", "multiplicity_adjustment"],
    "regulatory_requirements": [
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "ICH E3 Guidelines Section 14.2",
      "CDISC ADaM Implementation Guide",
      "Multiple Testing Adjustment Methods"
    ]
  },
  "template_structure": {
    "title": "Table 14.2.2 Secondary Efficacy Endpoints Analysis",
    "subtitle": "Change from Baseline at Week 12 - Mixed Model Repeated Measures Analysis",
    "table_type": "secondary_efficacy",
    "columns": [
      {
        "name": "Parameter",
        "type": "text",
        "description": "Secondary efficacy endpoint parameter"
      },
      {
        "name": "Visit",
        "type": "text", 
        "description": "Study visit timepoint"
      },
      {
        "name": "Treatment A",
        "type": "statistical",
        "description": "LS Mean (SE) for Treatment A",
        "statistics": ["lsmean", "se"]
      },
      {
        "name": "Treatment B", 
        "type": "statistical",
        "description": "LS Mean (SE) for Treatment B",
        "statistics": ["lsmean", "se"]
      },
      {
        "name": "Placebo",
        "type": "statistical",
        "description": "LS Mean (SE) for Placebo",
        "statistics": ["lsmean", "se"]
      },
      {
        "name": "Treatment A vs Placebo",
        "type": "comparison",
        "description": "Treatment difference (95% CI)",
        "statistics": ["difference", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Treatment B vs Placebo",
        "type": "comparison", 
        "description": "Treatment difference (95% CI)",
        "statistics": ["difference", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Treatment-by-Visit p-value",
        "type": "p_value",
        "description": "p-value for treatment-by-visit interaction"
      }
    ],
    "rows": [
      {
        "category": "Cognitive Function",
        "parameters": [
          {
            "name": "ADAS-Cog Total Score",
            "paramcd": "ADASCOG",
            "baseline_var": "BASE_ADASCOG",
            "change_var": "CHG_ADASCOG",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"]
          },
          {
            "name": "MMSE Score",
            "paramcd": "MMSE",
            "baseline_var": "BASE_MMSE", 
            "change_var": "CHG_MMSE",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"]
          }
        ]
      },
      {
        "category": "Functional Assessment",
        "parameters": [
          {
            "name": "ADCS-ADL Score",
            "paramcd": "ADCSADL",
            "baseline_var": "BASE_ADCSADL",
            "change_var": "CHG_ADCSADL", 
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"]
          },
          {
            "name": "IADL Score",
            "paramcd": "IADL",
            "baseline_var": "BASE_IADL",
            "change_var": "CHG_IADL",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"]
          }
        ]
      },
      {
        "category": "Behavioral Symptoms",
        "parameters": [
          {
            "name": "NPI Total Score",
            "paramcd": "NPITOT",
            "baseline_var": "BASE_NPITOT",
            "change_var": "CHG_NPITOT",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"]
          },
          {
            "name": "NPI Distress Score",
            "paramcd": "NPIDIST",
            "baseline_var": "BASE_NPIDIST",
            "change_var": "CHG_NPIDIST",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"]
          }
        ]
      },
      {
        "category": "Global Assessment",
        "parameters": [
          {
            "name": "CIBIC-Plus Score",
            "paramcd": "CIBICPLUS",
            "baseline_var": "BASE_CIBICPLUS",
            "change_var": "CHG_CIBICPLUS",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"]
          },
          {
            "name": "CDR-SB Score",
            "paramcd": "CDRSB",
            "baseline_var": "BASE_CDRSB",
            "change_var": "CHG_CDRSB",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"]
          }
        ]
      }
    ],
    "footnotes": [
      "ITT Population: All randomized subjects who received at least one dose of study drug",
      "LS Mean: Least squares mean from MMRM analysis",
      "SE: Standard error",
      "95% CI: 95% confidence interval",
      "p-values from F-tests for treatment-by-visit interaction",
      "Missing data handled using likelihood-based methods",
      "Multiplicity adjustment: Hochberg procedure for secondary endpoints",
      "Clinical significance: â‰¥4-point improvement on ADAS-Cog considered clinically meaningful",
      "Statistical significance: p < 0.05 (two-sided)",
      "Treatment A: High dose, Treatment B: Low dose"
    ],
    "statistical_methodology": {
      "primary_method": "Mixed Model Repeated Measures (MMRM)",
      "model_formula": "CHG ~ TRT01P * AVISIT + BASE + AGE + SEX + SEV",
      "covariance_structure": "Unstructured",
      "missing_data": "Likelihood-based methods",
      "multiplicity_adjustment": "Hochberg procedure",
      "significance_level": 0.05,
      "confidence_level": 0.95
    }
  },
  "r_code": {
    "libraries": [
      "library(tidyverse)",
      "library(lme4)",
      "library(emmeans)",
      "library(multcomp)",
      "library(gt)",
      "library(flextable)",
      "library(haven)",
      "library(lubridate)"
    ],
    "data_preparation": [
      "# Load datasets",
      "adsl <- read_sas('data/adsl.sas7bdat')",
      "adqs <- read_sas('data/adqs.sas7bdat')",
      "",
      "# Filter for ITT population",
      "adsl_itt <- adsl %>% filter(ITTFL == 'Y')",
      "",
      "# Merge datasets",
      "analysis_data <- adqs %>%",
      "  inner_join(adsl_itt, by = 'USUBJID') %>%",
      "  filter(PARAMCD %in% c('ADASCOG', 'MMSE', 'ADCSADL', 'IADL', 'NPITOT', 'NPIDIST', 'CIBICPLUS', 'CDRSB')) %>%",
      "  filter(AVISIT %in% c('Baseline', 'Week 4', 'Week 8', 'Week 12')) %>%",
      "  mutate(",
      "    TRT01P = factor(TRT01P, levels = c('Placebo', 'Treatment B', 'Treatment A')),",
      "    AVISIT = factor(AVISIT, levels = c('Baseline', 'Week 4', 'Week 8', 'Week 12')),",
      "    PARAM_LABEL = case_when(",
      "      PARAMCD == 'ADASCOG' ~ 'ADAS-Cog Total Score',",
      "      PARAMCD == 'MMSE' ~ 'MMSE Score',",
      "      PARAMCD == 'ADCSADL' ~ 'ADCS-ADL Score',",
      "      PARAMCD == 'IADL' ~ 'IADL Score',",
      "      PARAMCD == 'NPITOT' ~ 'NPI Total Score',",
      "      PARAMCD == 'NPIDIST' ~ 'NPI Distress Score',",
      "      PARAMCD == 'CIBICPLUS' ~ 'CIBIC-Plus Score',",
      "      PARAMCD == 'CDRSB' ~ 'CDR-SB Score'",
      "    )",
      "  )",
      "",
      "# Calculate baseline values",
      "baseline_data <- analysis_data %>%",
      "  filter(AVISIT == 'Baseline') %>%",
      "  select(USUBJID, PARAMCD, AVAL) %>%",
      "  rename(BASE = AVAL)",
      "",
      "# Merge baseline data",
      "analysis_data <- analysis_data %>%",
      "  left_join(baseline_data, by = c('USUBJID', 'PARAMCD')) %>%",
      "  filter(AVISIT != 'Baseline') %>%",
      "  mutate(CHG = AVAL - BASE)"
    ],
    "statistical_analysis": [
      "# Function to fit MMRM for secondary endpoints",
      "fit_secondary_mmrm <- function(data, param_code) {",
      "  # Filter for specific parameter",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code) %>%",
      "    filter(!is.na(CHG))",
      "  ",
      "  # Fit mixed model",
      "  formula_str <- 'CHG ~ TRT01P * AVISIT + BASE + AGE + SEX + SEV'",
      "  model <- lmer(as.formula(formula_str), data = param_data)",
      "  ",
      "  # Get least squares means",
      "  lsmeans <- emmeans(model, ~ TRT01P | AVISIT)",
      "  ",
      "  # Get treatment differences",
      "  contrasts <- emmeans(model, ~ TRT01P | AVISIT) %>%",
      "    contrast(method = 'pairwise', adjust = 'none') %>%",
      "    as.data.frame() %>%",
      "    filter(contrast %in% c('Treatment A - Placebo', 'Treatment B - Placebo'))",
      "  ",
      "  # Get p-values for treatment-by-visit interaction",
      "  anova_result <- anova(model)",
      "  p_value <- anova_result$`Pr(>F)`[anova_result$term == 'TRT01P:AVISIT']",
      "  ",
      "  return(list(",
      "    model = model,",
      "    lsmeans = lsmeans,",
      "    contrasts = contrasts,",
      "    p_value = p_value",
      "  ))",
      "}",
      "",
      "# Secondary efficacy parameters",
      "secondary_params <- c('ADASCOG', 'MMSE', 'ADCSADL', 'IADL', 'NPITOT', 'NPIDIST', 'CIBICPLUS', 'CDRSB')",
      "",
      "# Fit models for all secondary endpoints",
      "secondary_results <- list()",
      "for (param in secondary_params) {",
      "  secondary_results[[param]] <- fit_secondary_mmrm(analysis_data, param)",
      "}",
      "",
      "# Multiplicity adjustment using Hochberg procedure",
      "all_p_values <- sapply(secondary_results, function(x) x$p_value)",
      "adjusted_p_values <- p.adjust(all_p_values, method = 'hochberg')",
      "",
      "# Apply adjusted p-values",
      "for (i in seq_along(secondary_results)) {",
      "  param_name <- names(secondary_results)[i]",
      "  secondary_results[[param_name]]$adjusted_p_value <- adjusted_p_values[i]",
      "}"
    ],
    "table_generation": [
      "# Function to create secondary efficacy summary table",
      "create_secondary_efficacy_table <- function(results, param_info) {",
      "  table_data <- data.frame()",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    param_label <- param_info[[param]]$label",
      "    ",
      "    # Get LS means",
      "    lsmeans_df <- as.data.frame(result$lsmeans)",
      "    ",
      "    # Get contrasts",
      "    contrasts_df <- result$contrasts",
      "    ",
      "    # Format data for table",
      "    for (visit in unique(lsmeans_df$AVISIT)) {",
      "      visit_data <- lsmeans_df %>% filter(AVISIT == visit)",
      "      ",
      "      # Treatment A",
      "      trt_a <- visit_data %>% filter(TRT01P == 'Treatment A')",
      "      trt_a_lsmean <- sprintf('%.2f (%.3f)', trt_a$emmean, trt_a$SE)",
      "      ",
      "      # Treatment B", 
      "      trt_b <- visit_data %>% filter(TRT01P == 'Treatment B')",
      "      trt_b_lsmean <- sprintf('%.2f (%.3f)', trt_b$emmean, trt_b$SE)",
      "      ",
      "      # Placebo",
      "      placebo <- visit_data %>% filter(TRT01P == 'Placebo')",
      "      placebo_lsmean <- sprintf('%.2f (%.3f)', placebo$emmean, placebo$SE)",
      "      ",
      "      # Treatment differences",
      "      trt_a_diff <- contrasts_df %>%",
      "        filter(AVISIT == visit, contrast == 'Treatment A - Placebo')",
      "      trt_a_ci <- sprintf('%.2f (%.2f, %.2f)', trt_a_diff$estimate, trt_a_diff$lower.CL, trt_a_diff$upper.CL)",
      "      trt_a_p <- sprintf('%.4f', trt_a_diff$p.value)",
      "      ",
      "      trt_b_diff <- contrasts_df %>%",
      "        filter(AVISIT == visit, contrast == 'Treatment B - Placebo')",
      "      trt_b_ci <- sprintf('%.2f (%.2f, %.2f)', trt_b_diff$estimate, trt_b_diff$lower.CL, trt_b_diff$upper.CL)",
      "      trt_b_p <- sprintf('%.4f', trt_b_diff$p.value)",
      "      ",
      "      # Add to table data",
      "      row_data <- data.frame(",
      "        Parameter = param_label,",
      "        Visit = visit,",
      "        Treatment_A = trt_a_lsmean,",
      "        Treatment_B = trt_b_lsmean,",
      "        Placebo = placebo_lsmean,",
      "        Treatment_A_vs_Placebo = trt_a_ci,",
      "        Treatment_B_vs_Placebo = trt_b_ci,",
      "        Treatment_by_Visit_p = sprintf('%.4f', result$adjusted_p_value)",
      "      )",
      "      ",
      "      table_data <- rbind(table_data, row_data)",
      "    }",
      "  }",
      "  ",
      "  return(table_data)",
      "}",
      "",
      "# Parameter information",
      "param_info <- list(",
      "  ADASCOG = list(label = 'ADAS-Cog Total Score'),",
      "  MMSE = list(label = 'MMSE Score'),",
      "  ADCSADL = list(label = 'ADCS-ADL Score'),",
      "  IADL = list(label = 'IADL Score'),",
      "  NPITOT = list(label = 'NPI Total Score'),",
      "  NPIDIST = list(label = 'NPI Distress Score'),",
      "  CIBICPLUS = list(label = 'CIBIC-Plus Score'),",
      "  CDRSB = list(label = 'CDR-SB Score')",
      ")",
      "",
      "# Generate table",
      "secondary_table_data <- create_secondary_efficacy_table(secondary_results, param_info)",
      "",
      "# Create formatted table",
      "secondary_efficacy_table <- secondary_table_data %>%",
      "  gt() %>%",
      "  tab_header(",
      "    title = 'Table 14.2.2 Secondary Efficacy Endpoints Analysis',",
      "    subtitle = 'Change from Baseline - Mixed Model Repeated Measures Analysis'",
      "  ) %>%",
      "  cols_label(",
      "    Parameter = 'Parameter',",
      "    Visit = 'Visit',",
      "    Treatment_A = 'Treatment A<br>LS Mean (SE)',",
      "    Treatment_B = 'Treatment B<br>LS Mean (SE)',",
      "    Placebo = 'Placebo<br>LS Mean (SE)',",
      "    Treatment_A_vs_Placebo = 'Treatment A vs Placebo<br>Difference (95% CI)',",
      "    Treatment_B_vs_Placebo = 'Treatment B vs Placebo<br>Difference (95% CI)',",
      "    Treatment_by_Visit_p = 'Treatment-by-Visit<br>p-value'",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_column_labels()",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_borders(",
      "      sides = 'bottom',",
      "      weight = px(2)",
      "    ),",
      "    locations = cells_body(",
      "      rows = c(4, 8, 12, 16)",
      "    )",
      "  ) %>%",
      "  fmt_markdown(columns = everything()) %>%",
      "  tab_footnote(",
      "    footnote = 'ITT Population: All randomized subjects who received at least one dose of study drug',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'LS Mean: Least squares mean from MMRM analysis',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Multiplicity adjustment: Hochberg procedure for secondary endpoints',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Clinical significance: â‰¥4-point improvement on ADAS-Cog considered clinically meaningful',",
      "    locations = cells_title()",
      "  )",
      "",
      "# Display table",
      "secondary_efficacy_table"
    ],
    "quality_checks": [
      "# Data validation checks",
      "data_validation <- analysis_data %>%",
      "  group_by(PARAMCD, TRT01P, AVISIT) %>%",
      "  summarise(",
      "    n_subjects = n_distinct(USUBJID),",
      "    missing_data = sum(is.na(CHG)),",
      "    missing_rate = missing_data / n_subjects,",
      "    .groups = 'drop'",
      "  ) %>%",
      "  filter(missing_rate > 0.1)",
      "",
      "# Statistical validation",
      "statistical_validation <- list()",
      "for (param in secondary_params) {",
      "  result <- secondary_results[[param]]",
      "  ",
      "  # Check model convergence",
      "  convergence <- is.null(result$model@optinfo$conv$lme4$messages)",
      "  ",
      "  # Check residual diagnostics",
      "  residuals <- residuals(result$model)",
      "  normality_test <- shapiro.test(residuals)",
      "  ",
      "  # Check variance components",
      "  vc <- VarCorr(result$model)",
      "  ",
      "  statistical_validation[[param]] <- list(",
      "    convergence = convergence,",
      "    normality_p_value = normality_test$p.value,",
      "    residual_sd = sd(residuals),",
      "    variance_components = vc",
      "  )",
      "}",
      "",
      "# Clinical review checks",
      "clinical_validation <- list()",
      "for (param in secondary_params) {",
      "  result <- secondary_results[[param]]",
      "  ",
      "  # Check for clinically meaningful differences",
      "  contrasts_df <- result$contrasts",
      "  ",
      "  # Define clinical thresholds",
      "  clinical_thresholds <- list(",
      "    ADASCOG = 4,  # 4-point improvement",
      "    MMSE = 3,     # 3-point improvement", 
      "    ADCSADL = 2,  # 2-point improvement",
      "    IADL = 1,     # 1-point improvement",
      "    NPITOT = 3,   # 3-point improvement",
      "    NPIDIST = 2,  # 2-point improvement",
      "    CIBICPLUS = 1, # 1-point improvement",
      "    CDRSB = 0.5   # 0.5-point improvement",
      "  )",
      "  ",
      "  threshold <- clinical_thresholds[[param]]",
      "  ",
      "  # Check if treatment differences exceed clinical threshold",
      "  clinically_significant <- contrasts_df %>%",
      "    filter(abs(estimate) >= threshold) %>%",
      "    nrow()",
      "  ",
      "  clinical_validation[[param]] <- list(",
      "    clinically_significant_count = clinically_significant,",
      "    clinical_threshold = threshold",
      "  )",
      "}",
      "",
      "# Multiplicity adjustment validation",
      "multiplicity_validation <- data.frame(",
      "  Parameter = names(secondary_results),",
      "  Raw_p_value = sapply(secondary_results, function(x) x$p_value),",
      "  Adjusted_p_value = sapply(secondary_results, function(x) x$adjusted_p_value),",
      "  Significant_raw = sapply(secondary_results, function(x) x$p_value < 0.05),",
      "  Significant_adjusted = sapply(secondary_results, function(x) x$adjusted_p_value < 0.05)",
      ")",
      "",
      "# Print validation results",
      "cat('Data Validation:\\n')",
      "print(data_validation)",
      "cat('\\nStatistical Validation:\\n')",
      "print(statistical_validation)",
      "cat('\\nClinical Validation:\\n')",
      "print(clinical_validation)",
      "cat('\\nMultiplicity Adjustment:\\n')",
      "print(multiplicity_validation)"
    ],
    "export_functions": [
      "# Export table to multiple formats",
      "export_secondary_efficacy_results <- function(table_data, results, output_dir = 'output') {",
      "  # Create output directory",
      "  if (!dir.exists(output_dir)) {",
      "    dir.create(output_dir, recursive = TRUE)",
      "  }",
      "  ",
      "  # Export HTML table",
      "  html_file <- file.path(output_dir, 'secondary_efficacy_table.html')",
      "  secondary_efficacy_table %>%",
      "    gtsave(html_file)",
      "  ",
      "  # Export RTF table",
      "  rtf_file <- file.path(output_dir, 'secondary_efficacy_table.rtf')",
      "  secondary_table_data %>%",
      "    flextable() %>%",
      "    set_header_labels(",
      "      Parameter = 'Parameter',",
      "      Visit = 'Visit',",
      "      Treatment_A = 'Treatment A\\nLS Mean (SE)',",
      "      Treatment_B = 'Treatment B\\nLS Mean (SE)',",
      "      Placebo = 'Placebo\\nLS Mean (SE)',",
      "      Treatment_A_vs_Placebo = 'Treatment A vs Placebo\\nDifference (95% CI)',",
      "      Treatment_B_vs_Placebo = 'Treatment B vs Placebo\\nDifference (95% CI)',",
      "      Treatment_by_Visit_p = 'Treatment-by-Visit\\np-value'",
      "    ) %>%",
      "    autofit() %>%",
      "    save_as_rtf(rtf_file)",
      "  ",
      "  # Export results summary",
      "  summary_file <- file.path(output_dir, 'secondary_efficacy_summary.txt')",
      "  sink(summary_file)",
      "  cat('Secondary Efficacy Endpoints Analysis Summary\\n')",
      "  cat('=============================================\\n\\n')",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    cat(sprintf('Parameter: %s\\n', param))",
      "    cat(sprintf('Treatment-by-Visit p-value: %.4f\\n', result$p_value))",
      "    cat(sprintf('Adjusted p-value: %.4f\\n', result$adjusted_p_value))",
      "    cat('\\n')",
      "  }",
      "  ",
      "  cat('Multiplicity Adjustment: Hochberg procedure\\n')",
      "  cat('Significance Level: 0.05\\n')",
      "  cat('Population: Intent-to-Treat\\n')",
      "  sink()",
      "  ",
      "  # Export R code",
      "  code_file <- file.path(output_dir, 'secondary_efficacy_analysis.R')",
      "  sink(code_file)",
      "  cat('# Secondary Efficacy Endpoints Analysis\\n')",
      "  cat('# Generated: ', Sys.time(), '\\n\\n')",
      "  ",
      "  cat('# Load required libraries\\n')",
      "  cat('library(tidyverse)\\n')",
      "  cat('library(lme4)\\n')",
      "  cat('library(emmeans)\\n')",
      "  cat('library(multcomp)\\n')",
      "  cat('\\n')",
      "  ",
      "  cat('# Analysis parameters\\n')",
      "  cat('secondary_params <- c(', paste0(\"'\", secondary_params, \"'\", collapse = ', '), ')\\n')",
      "  cat('\\n')",
      "  ",
      "  cat('# Model formula\\n')",
      "  cat('formula_str <- \"CHG ~ TRT01P * AVISIT + BASE + AGE + SEX + SEV\"\\n')",
      "  cat('\\n')",
      "  ",
      "  cat('# Multiplicity adjustment\\n')",
      "  cat('adjusted_p_values <- p.adjust(all_p_values, method = \"hochberg\")\\n')",
      "  sink()",
      "  ",
      "  cat('Exported files to:', output_dir, '\\n')",
      "}",
      "",
      "# Export results",
      "export_secondary_efficacy_results(secondary_table_data, secondary_results)"
    ]
  },
  "keywords": [
    "secondary efficacy endpoints",
    "mixed model repeated measures",
    "MMRM",
    "least squares means",
    "treatment comparisons",
    "confidence intervals",
    "multiplicity adjustment",
    "Hochberg procedure",
    "intent-to-treat population",
    "ITT",
    "ADAS-Cog",
    "MMSE",
    "ADCS-ADL",
    "IADL",
    "NPI",
    "CIBIC-Plus",
    "CDR-SB",
    "cognitive function",
    "functional assessment",
    "behavioral symptoms",
    "global assessment",
    "FDA compliance",
    "ICH E3",
    "clinical trial",
    "statistical analysis"
  ],
  "metadata": {
    "created_date": "2024-08-06",
    "version": "1.0",
    "author": "Jaime Yan",
    "description": "FDA-compliant secondary efficacy endpoints analysis template with detailed structure and complete R code",
    "references": [
      "ICH E3 Guidelines Section 14.2.2",
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "CDISC ADaM Implementation Guide",
      "Multiple Testing Adjustment Methods",
      "Statistical Analysis Plan Template"
    ],
    "data_requirements": [
      "ADSL dataset with ITTFL flag",
      "ADQS dataset with secondary efficacy variables",
      "Secondary efficacy variables: ADASCOG, MMSE, ADCSADL, IADL, NPITOT, NPIDIST, CIBICPLUS, CDRSB",
      "Visit information: AVISIT",
      "Treatment assignment: TRT01P",
      "Baseline and post-baseline values",
      "Covariates: AGE, SEX, SEV"
    ],
    "statistical_methods": [
      "Mixed Model Repeated Measures (MMRM) for continuous endpoints",
      "Least squares means and standard errors",
      "Treatment differences with 95% confidence intervals",
      "p-values from F-tests for treatment-by-visit interaction",
      "Missing data handled using likelihood-based methods",
      "Multiplicity adjustment using Hochberg procedure",
      "Clinical significance assessment for each endpoint"
    ]
  }
} 