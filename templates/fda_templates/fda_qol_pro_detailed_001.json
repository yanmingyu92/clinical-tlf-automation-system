{
  "id": "fda-qol-pro-detailed-001",
  "title": "Table 14.2.4 Quality of Life and Patient Reported Outcomes",
  "type": "table",
  "category": "efficacy",
  "fda_compliance": {
    "standard": "ICH E3 Section 14.2.4",
    "population": "Intent-to-Treat (ITT)",
    "statistical_method": "Mixed Model Repeated Measures (MMRM)",
    "quality_checks": ["data_validation", "statistical_review", "clinical_review", "pro_validation"],
    "regulatory_requirements": [
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "ICH E3 Guidelines Section 14.2",
      "CDISC ADaM Implementation Guide",
      "PRO Guidance for Industry",
      "Patient-Reported Outcome Measures"
    ]
  },
  "template_structure": {
    "title": "Table 14.2.4 Quality of Life and Patient Reported Outcomes",
    "subtitle": "Change from Baseline - Mixed Model Repeated Measures Analysis",
    "table_type": "qol_pro",
    "columns": [
      {
        "name": "PRO Measure",
        "type": "text",
        "description": "Patient Reported Outcome measure"
      },
      {
        "name": "Domain",
        "type": "text",
        "description": "PRO domain or subscale"
      },
      {
        "name": "Visit",
        "type": "text",
        "description": "Study visit timepoint"
      },
      {
        "name": "Treatment A",
        "type": "statistical",
        "description": "LS Mean (SE) for Treatment A",
        "statistics": ["lsmean", "se"]
      },
      {
        "name": "Treatment B",
        "type": "statistical",
        "description": "LS Mean (SE) for Treatment B",
        "statistics": ["lsmean", "se"]
      },
      {
        "name": "Placebo",
        "type": "statistical",
        "description": "LS Mean (SE) for Placebo",
        "statistics": ["lsmean", "se"]
      },
      {
        "name": "Treatment A vs Placebo",
        "type": "comparison",
        "description": "Treatment difference (95% CI)",
        "statistics": ["difference", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Treatment B vs Placebo",
        "type": "comparison",
        "description": "Treatment difference (95% CI)",
        "statistics": ["difference", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Clinically Meaningful",
        "type": "text",
        "description": "Clinical significance assessment"
      }
    ],
    "rows": [
      {
        "category": "Quality of Life Measures",
        "parameters": [
          {
            "name": "SF-36 Physical Component Summary",
            "paramcd": "SF36PCS",
            "domain": "Physical Health",
            "baseline_var": "BASE_SF36PCS",
            "change_var": "CHG_SF36PCS",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 5
          },
          {
            "name": "SF-36 Mental Component Summary",
            "paramcd": "SF36MCS",
            "domain": "Mental Health",
            "baseline_var": "BASE_SF36MCS",
            "change_var": "CHG_SF36MCS",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 5
          },
          {
            "name": "EQ-5D Index Score",
            "paramcd": "EQ5DINDEX",
            "domain": "Health Utility",
            "baseline_var": "BASE_EQ5DINDEX",
            "change_var": "CHG_EQ5DINDEX",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 0.05
          },
          {
            "name": "EQ-5D VAS Score",
            "paramcd": "EQ5DVAS",
            "domain": "Health Status",
            "baseline_var": "BASE_EQ5DVAS",
            "change_var": "CHG_EQ5DVAS",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 10
          }
        ]
      },
      {
        "category": "Disease-Specific PROs",
        "parameters": [
          {
            "name": "ADL-QoL Score",
            "paramcd": "ADLQOL",
            "domain": "Activities of Daily Living",
            "baseline_var": "BASE_ADLQOL",
            "change_var": "CHG_ADLQOL",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 3
          },
          {
            "name": "Caregiver Burden Scale",
            "paramcd": "CAREGIVER",
            "domain": "Caregiver Impact",
            "baseline_var": "BASE_CAREGIVER",
            "change_var": "CHG_CAREGIVER",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 5
          },
          {
            "name": "Patient Global Impression",
            "paramcd": "PGI",
            "domain": "Global Assessment",
            "baseline_var": "BASE_PGI",
            "change_var": "CHG_PGI",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 1
          },
          {
            "name": "Caregiver Global Impression",
            "paramcd": "CGI",
            "domain": "Caregiver Assessment",
            "baseline_var": "BASE_CGI",
            "change_var": "CHG_CGI",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 1
          }
        ]
      },
      {
        "category": "Symptom-Specific PROs",
        "parameters": [
          {
            "name": "Sleep Quality Scale",
            "paramcd": "SLEEP",
            "domain": "Sleep",
            "baseline_var": "BASE_SLEEP",
            "change_var": "CHG_SLEEP",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 2
          },
          {
            "name": "Fatigue Assessment Scale",
            "paramcd": "FATIGUE",
            "domain": "Fatigue",
            "baseline_var": "BASE_FATIGUE",
            "change_var": "CHG_FATIGUE",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 3
          },
          {
            "name": "Pain Visual Analog Scale",
            "paramcd": "PAINVAS",
            "domain": "Pain",
            "baseline_var": "BASE_PAINVAS",
            "change_var": "CHG_PAINVAS",
            "visits": ["Baseline", "Week 4", "Week 8", "Week 12"],
            "clinical_threshold": 20
          }
        ]
      }
    ],
    "footnotes": [
      "ITT Population: All randomized subjects who received at least one dose of study drug",
      "LS Mean: Least squares mean from MMRM analysis",
      "SE: Standard error",
      "95% CI: 95% confidence interval",
      "p-values from F-tests for treatment-by-visit interaction",
      "Missing data handled using likelihood-based methods",
      "Clinical significance: Changes meeting or exceeding established thresholds",
      "Statistical significance: p < 0.05 (two-sided)",
      "PRO: Patient Reported Outcome",
      "QoL: Quality of Life",
      "Treatment A: High dose, Treatment B: Low dose"
    ],
    "statistical_methodology": {
      "primary_method": "Mixed Model Repeated Measures (MMRM)",
      "model_formula": "CHG ~ TRT01P * AVISIT + BASE + AGE + SEX + SEV",
      "covariance_structure": "Unstructured",
      "missing_data": "Likelihood-based methods",
      "clinical_significance": "Pre-specified thresholds for each PRO measure",
      "significance_level": 0.05,
      "confidence_level": 0.95
    }
  },
  "r_code": {
    "libraries": [
      "library(tidyverse)",
      "library(lme4)",
      "library(emmeans)",
      "library(gt)",
      "library(flextable)",
      "library(haven)",
      "library(lubridate)"
    ],
    "data_preparation": [
      "# Load datasets",
      "adsl <- read_sas('data/adsl.sas7bdat')",
      "adqs <- read_sas('data/adqs.sas7bdat')",
      "",
      "# Filter for ITT population",
      "adsl_itt <- adsl %>% filter(ITTFL == 'Y')",
      "",
      "# Merge datasets",
      "analysis_data <- adqs %>%",
      "  inner_join(adsl_itt, by = 'USUBJID') %>%",
      "  filter(PARAMCD %in% c('SF36PCS', 'SF36MCS', 'EQ5DINDEX', 'EQ5DVAS', 'ADLQOL', 'CAREGIVER', 'PGI', 'CGI', 'SLEEP', 'FATIGUE', 'PAINVAS')) %>%",
      "  filter(AVISIT %in% c('Baseline', 'Week 4', 'Week 8', 'Week 12')) %>%",
      "  mutate(",
      "    TRT01P = factor(TRT01P, levels = c('Placebo', 'Treatment B', 'Treatment A')),",
      "    AVISIT = factor(AVISIT, levels = c('Baseline', 'Week 4', 'Week 8', 'Week 12')),",
      "    PARAM_LABEL = case_when(",
      "      PARAMCD == 'SF36PCS' ~ 'SF-36 Physical Component Summary',",
      "      PARAMCD == 'SF36MCS' ~ 'SF-36 Mental Component Summary',",
      "      PARAMCD == 'EQ5DINDEX' ~ 'EQ-5D Index Score',",
      "      PARAMCD == 'EQ5DVAS' ~ 'EQ-5D VAS Score',",
      "      PARAMCD == 'ADLQOL' ~ 'ADL-QoL Score',",
      "      PARAMCD == 'CAREGIVER' ~ 'Caregiver Burden Scale',",
      "      PARAMCD == 'PGI' ~ 'Patient Global Impression',",
      "      PARAMCD == 'CGI' ~ 'Caregiver Global Impression',",
      "      PARAMCD == 'SLEEP' ~ 'Sleep Quality Scale',",
      "      PARAMCD == 'FATIGUE' ~ 'Fatigue Assessment Scale',",
      "      PARAMCD == 'PAINVAS' ~ 'Pain Visual Analog Scale'",
      "    ),",
      "    DOMAIN = case_when(",
      "      PARAMCD %in% c('SF36PCS') ~ 'Physical Health',",
      "      PARAMCD %in% c('SF36MCS') ~ 'Mental Health',",
      "      PARAMCD %in% c('EQ5DINDEX') ~ 'Health Utility',",
      "      PARAMCD %in% c('EQ5DVAS') ~ 'Health Status',",
      "      PARAMCD %in% c('ADLQOL') ~ 'Activities of Daily Living',",
      "      PARAMCD %in% c('CAREGIVER') ~ 'Caregiver Impact',",
      "      PARAMCD %in% c('PGI', 'CGI') ~ 'Global Assessment',",
      "      PARAMCD %in% c('SLEEP', 'FATIGUE', 'PAINVAS') ~ 'Symptom Assessment'",
      "    )",
      "  )",
      "",
      "# Calculate baseline values",
      "baseline_data <- analysis_data %>%",
      "  filter(AVISIT == 'Baseline') %>%",
      "  select(USUBJID, PARAMCD, AVAL) %>%",
      "  rename(BASE = AVAL)",
      "",
      "# Merge baseline data",
      "analysis_data <- analysis_data %>%",
      "  left_join(baseline_data, by = c('USUBJID', 'PARAMCD')) %>%",
      "  filter(AVISIT != 'Baseline') %>%",
      "  mutate(CHG = AVAL - BASE)"
    ],
    "statistical_analysis": [
      "# Function to fit MMRM for PRO measures",
      "fit_pro_mmrm <- function(data, param_code) {",
      "  # Filter for specific parameter",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code) %>%",
      "    filter(!is.na(CHG))",
      "  ",
      "  # Fit mixed model",
      "  formula_str <- 'CHG ~ TRT01P * AVISIT + BASE + AGE + SEX + SEV'",
      "  model <- lmer(as.formula(formula_str), data = param_data)",
      "  ",
      "  # Get least squares means",
      "  lsmeans <- emmeans(model, ~ TRT01P | AVISIT)",
      "  ",
      "  # Get treatment differences",
      "  contrasts <- emmeans(model, ~ TRT01P | AVISIT) %>%",
      "    contrast(method = 'pairwise', adjust = 'none') %>%",
      "    as.data.frame() %>%",
      "    filter(contrast %in% c('Treatment A - Placebo', 'Treatment B - Placebo'))",
      "  ",
      "  # Get p-values for treatment-by-visit interaction",
      "  anova_result <- anova(model)",
      "  p_value <- anova_result$`Pr(>F)`[anova_result$term == 'TRT01P:AVISIT']",
      "  ",
      "  return(list(",
      "    model = model,",
      "    lsmeans = lsmeans,",
      "    contrasts = contrasts,",
      "    p_value = p_value",
      "  ))",
      "}",
      "",
      "# PRO parameters",
      "pro_params <- c('SF36PCS', 'SF36MCS', 'EQ5DINDEX', 'EQ5DVAS', 'ADLQOL', 'CAREGIVER', 'PGI', 'CGI', 'SLEEP', 'FATIGUE', 'PAINVAS')",
      "",
      "# Clinical significance thresholds",
      "clinical_thresholds <- list(",
      "  SF36PCS = 5,    # 5-point improvement",
      "  SF36MCS = 5,    # 5-point improvement",
      "  EQ5DINDEX = 0.05, # 0.05 improvement",
      "  EQ5DVAS = 10,   # 10-point improvement",
      "  ADLQOL = 3,     # 3-point improvement",
      "  CAREGIVER = 5,  # 5-point improvement",
      "  PGI = 1,        # 1-point improvement",
      "  CGI = 1,        # 1-point improvement",
      "  SLEEP = 2,      # 2-point improvement",
      "  FATIGUE = 3,    # 3-point improvement",
      "  PAINVAS = 20    # 20-point improvement",
      ")",
      "",
      "# Fit models for all PRO measures",
      "pro_results <- list()",
      "for (param in pro_params) {",
      "  pro_results[[param]] <- fit_pro_mmrm(analysis_data, param)",
      "}"
    ],
    "table_generation": [
      "# Function to create PRO summary table",
      "create_pro_table <- function(results, param_info, clinical_thresholds) {",
      "  table_data <- data.frame()",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    param_label <- param_info[[param]]$label",
      "    domain <- param_info[[param]]$domain",
      "    threshold <- clinical_thresholds[[param]]",
      "    ",
      "    # Get LS means",
      "    lsmeans_df <- as.data.frame(result$lsmeans)",
      "    ",
      "    # Get contrasts",
      "    contrasts_df <- result$contrasts",
      "    ",
      "    # Format data for table",
      "    for (visit in unique(lsmeans_df$AVISIT)) {",
      "      visit_data <- lsmeans_df %>% filter(AVISIT == visit)",
      "      ",
      "      # Treatment A",
      "      trt_a <- visit_data %>% filter(TRT01P == 'Treatment A')",
      "      trt_a_lsmean <- sprintf('%.2f (%.3f)', trt_a$emmean, trt_a$SE)",
      "      ",
      "      # Treatment B", 
      "      trt_b <- visit_data %>% filter(TRT01P == 'Treatment B')",
      "      trt_b_lsmean <- sprintf('%.2f (%.3f)', trt_b$emmean, trt_b$SE)",
      "      ",
      "      # Placebo",
      "      placebo <- visit_data %>% filter(TRT01P == 'Placebo')",
      "      placebo_lsmean <- sprintf('%.2f (%.3f)', placebo$emmean, placebo$SE)",
      "      ",
      "      # Treatment differences",
      "      trt_a_diff <- contrasts_df %>%",
      "        filter(AVISIT == visit, contrast == 'Treatment A - Placebo')",
      "      trt_a_ci <- sprintf('%.2f (%.2f, %.2f)', trt_a_diff$estimate, trt_a_diff$lower.CL, trt_a_diff$upper.CL)",
      "      trt_a_p <- sprintf('%.4f', trt_a_diff$p.value)",
      "      ",
      "      trt_b_diff <- contrasts_df %>%",
      "        filter(AVISIT == visit, contrast == 'Treatment B - Placebo')",
      "      trt_b_ci <- sprintf('%.2f (%.2f, %.2f)', trt_b_diff$estimate, trt_b_diff$lower.CL, trt_b_diff$upper.CL)",
      "      trt_b_p <- sprintf('%.4f', trt_b_diff$p.value)",
      "      ",
      "      # Clinical significance assessment",
      "      trt_a_clinical <- ifelse(abs(trt_a_diff$estimate) >= threshold, 'Yes', 'No')",
      "      trt_b_clinical <- ifelse(abs(trt_b_diff$estimate) >= threshold, 'Yes', 'No')",
      "      clinical_assessment <- paste(trt_a_clinical, '/', trt_b_clinical)",
      "      ",
      "      # Add to table data",
      "      row_data <- data.frame(",
      "        PRO_Measure = param_label,",
      "        Domain = domain,",
      "        Visit = visit,",
      "        Treatment_A = trt_a_lsmean,",
      "        Treatment_B = trt_b_lsmean,",
      "        Placebo = placebo_lsmean,",
      "        Treatment_A_vs_Placebo = trt_a_ci,",
      "        Treatment_B_vs_Placebo = trt_b_ci,",
      "        Clinically_Meaningful = clinical_assessment",
      "      )",
      "      ",
      "      table_data <- rbind(table_data, row_data)",
      "    }",
      "  }",
      "  ",
      "  return(table_data)",
      "}",
      "",
      "# Parameter information",
      "param_info <- list(",
      "  SF36PCS = list(label = 'SF-36 Physical Component Summary', domain = 'Physical Health'),",
      "  SF36MCS = list(label = 'SF-36 Mental Component Summary', domain = 'Mental Health'),",
      "  EQ5DINDEX = list(label = 'EQ-5D Index Score', domain = 'Health Utility'),",
      "  EQ5DVAS = list(label = 'EQ-5D VAS Score', domain = 'Health Status'),",
      "  ADLQOL = list(label = 'ADL-QoL Score', domain = 'Activities of Daily Living'),",
      "  CAREGIVER = list(label = 'Caregiver Burden Scale', domain = 'Caregiver Impact'),",
      "  PGI = list(label = 'Patient Global Impression', domain = 'Global Assessment'),",
      "  CGI = list(label = 'Caregiver Global Impression', domain = 'Global Assessment'),",
      "  SLEEP = list(label = 'Sleep Quality Scale', domain = 'Symptom Assessment'),",
      "  FATIGUE = list(label = 'Fatigue Assessment Scale', domain = 'Symptom Assessment'),",
      "  PAINVAS = list(label = 'Pain Visual Analog Scale', domain = 'Symptom Assessment')",
      ")",
      "",
      "# Generate table",
      "pro_table_data <- create_pro_table(pro_results, param_info, clinical_thresholds)",
      "",
      "# Create formatted table",
      "qol_pro_table <- pro_table_data %>%",
      "  gt() %>%",
      "  tab_header(",
      "    title = 'Table 14.2.4 Quality of Life and Patient Reported Outcomes',",
      "    subtitle = 'Change from Baseline - Mixed Model Repeated Measures Analysis'",
      "  ) %>%",
      "  cols_label(",
      "    PRO_Measure = 'PRO Measure',",
      "    Domain = 'Domain',",
      "    Visit = 'Visit',",
      "    Treatment_A = 'Treatment A<br>LS Mean (SE)',",
      "    Treatment_B = 'Treatment B<br>LS Mean (SE)',",
      "    Placebo = 'Placebo<br>LS Mean (SE)',",
      "    Treatment_A_vs_Placebo = 'Treatment A vs Placebo<br>Difference (95% CI)',",
      "    Treatment_B_vs_Placebo = 'Treatment B vs Placebo<br>Difference (95% CI)',",
      "    Clinically_Meaningful = 'Clinically Meaningful<br>(A/B)'",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_column_labels()",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_borders(",
      "      sides = 'bottom',",
      "      weight = px(2)",
      "    ),",
      "    locations = cells_body(",
      "      rows = c(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44)",
      "    )",
      "  ) %>%",
      "  fmt_markdown(columns = everything()) %>%",
      "  tab_footnote(",
      "    footnote = 'ITT Population: All randomized subjects who received at least one dose of study drug',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'LS Mean: Least squares mean from MMRM analysis',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Clinical significance: Changes meeting or exceeding established thresholds',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'PRO: Patient Reported Outcome, QoL: Quality of Life',",
      "    locations = cells_title()",
      "  )",
      "",
      "# Display table",
      "qol_pro_table"
    ],
    "quality_checks": [
      "# Data validation checks",
      "data_validation <- analysis_data %>%",
      "  group_by(PARAMCD, TRT01P, AVISIT) %>%",
      "  summarise(",
      "    n_subjects = n_distinct(USUBJID),",
      "    missing_data = sum(is.na(CHG)),",
      "    missing_rate = missing_data / n_subjects,",
      "    .groups = 'drop'",
      "  ) %>%",
      "  filter(missing_rate > 0.1)",
      "",
      "# Statistical validation",
      "statistical_validation <- list()",
      "for (param in pro_params) {",
      "  result <- pro_results[[param]]",
      "  ",
      "  # Check model convergence",
      "  convergence <- is.null(result$model@optinfo$conv$lme4$messages)",
      "  ",
      "  # Check residual diagnostics",
      "  residuals <- residuals(result$model)",
      "  normality_test <- shapiro.test(residuals)",
      "  ",
      "  # Check variance components",
      "  vc <- VarCorr(result$model)",
      "  ",
      "  statistical_validation[[param]] <- list(",
      "    convergence = convergence,",
      "    normality_p_value = normality_test$p.value,",
      "    residual_sd = sd(residuals),",
      "    variance_components = vc",
      "  )",
      "}",
      "",
      "# Clinical validation",
      "clinical_validation <- list()",
      "for (param in pro_params) {",
      "  result <- pro_results[[param]]",
      "  threshold <- clinical_thresholds[[param]]",
      "  ",
      "  # Check for clinically meaningful differences",
      "  contrasts_df <- result$contrasts",
      "  ",
      "  # Check if treatment differences exceed clinical threshold",
      "  clinically_significant <- contrasts_df %>%",
      "    filter(abs(estimate) >= threshold) %>%",
      "    nrow()",
      "  ",
      "  clinical_validation[[param]] <- list(",
      "    clinically_significant_count = clinically_significant,",
      "    clinical_threshold = threshold",
      "  )",
      "}",
      "",
      "# PRO-specific validation",
      "pro_validation <- list()",
      "for (param in pro_params) {",
      "  # Check for floor/ceiling effects",
      "  param_data <- analysis_data %>% filter(PARAMCD == param)",
      "  ",
      "  # Calculate floor and ceiling percentages",
      "  floor_ceiling <- param_data %>%",
      "    group_by(TRT01P, AVISIT) %>%",
      "    summarise(",
      "      floor_pct = mean(AVAL == min(AVAL, na.rm = TRUE), na.rm = TRUE) * 100,",
      "      ceiling_pct = mean(AVAL == max(AVAL, na.rm = TRUE), na.rm = TRUE) * 100,",
      "      .groups = 'drop'",
      "    )",
      "  ",
      "  # Check for missing data patterns",
      "  missing_patterns <- param_data %>%",
      "    group_by(TRT01P) %>%",
      "    summarise(",
      "      total_obs = n(),",
      "      missing_obs = sum(is.na(AVAL)),",
      "      missing_rate = missing_obs / total_obs * 100,",
      "      .groups = 'drop'",
      "    )",
      "  ",
      "  pro_validation[[param]] <- list(",
      "    floor_ceiling_effects = floor_ceiling,",
      "    missing_patterns = missing_patterns",
      "  )",
      "}",
      "",
      "# Print validation results",
      "cat('Data Validation:\\n')",
      "print(data_validation)",
      "cat('\\nStatistical Validation:\\n')",
      "print(statistical_validation)",
      "cat('\\nClinical Validation:\\n')",
      "print(clinical_validation)",
      "cat('\\nPRO Validation:\\n')",
      "print(pro_validation)"
    ],
    "export_functions": [
      "# Export PRO analysis results",
      "export_pro_analysis_results <- function(table_data, results, output_dir = 'output') {",
      "  # Create output directory",
      "  if (!dir.exists(output_dir)) {",
      "    dir.create(output_dir, recursive = TRUE)",
      "  }",
      "  ",
      "  # Export HTML table",
      "  html_file <- file.path(output_dir, 'qol_pro_table.html')",
      "  qol_pro_table %>%",
      "    gtsave(html_file)",
      "  ",
      "  # Export RTF table",
      "  rtf_file <- file.path(output_dir, 'qol_pro_table.rtf')",
      "  pro_table_data %>%",
      "    flextable() %>%",
      "    set_header_labels(",
      "      PRO_Measure = 'PRO Measure',",
      "      Domain = 'Domain',",
      "      Visit = 'Visit',",
      "      Treatment_A = 'Treatment A\\nLS Mean (SE)',",
      "      Treatment_B = 'Treatment B\\nLS Mean (SE)',",
      "      Placebo = 'Placebo\\nLS Mean (SE)',",
      "      Treatment_A_vs_Placebo = 'Treatment A vs Placebo\\nDifference (95% CI)',",
      "      Treatment_B_vs_Placebo = 'Treatment B vs Placebo\\nDifference (95% CI)',",
      "      Clinically_Meaningful = 'Clinically Meaningful\\n(A/B)'",
      "    ) %>%",
      "    autofit() %>%",
      "    save_as_rtf(rtf_file)",
      "  ",
      "  # Export results summary",
      "  summary_file <- file.path(output_dir, 'qol_pro_summary.txt')",
      "  sink(summary_file)",
      "  cat('Quality of Life and PRO Analysis Summary\\n')",
      "  cat('========================================\\n\\n')",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    cat(sprintf('Parameter: %s\\n', param))",
      "    cat(sprintf('Treatment-by-Visit p-value: %.4f\\n', result$p_value))",
      "    cat('\\n')",
      "  }",
      "  ",
      "  cat('Statistical Method: Mixed Model Repeated Measures (MMRM)\\n')",
      "  cat('Population: Intent-to-Treat\\n')",
      "  cat('Significance Level: 0.05\\n')",
      "  cat('Clinical Significance: Pre-specified thresholds for each PRO measure\\n')",
      "  sink()",
      "  ",
      "  cat('Exported files to:', output_dir, '\\n')",
      "}",
      "",
      "# Export results",
      "export_pro_analysis_results(pro_table_data, pro_results)"
    ]
  },
  "keywords": [
    "quality of life",
    "patient reported outcomes",
    "PRO",
    "QoL",
    "SF-36",
    "EQ-5D",
    "mixed model repeated measures",
    "MMRM",
    "clinical significance",
    "caregiver burden",
    "activities of daily living",
    "global assessment",
    "symptom assessment",
    "ITT population",
    "FDA compliance",
    "ICH E3",
    "clinical trial",
    "statistical analysis"
  ],
  "metadata": {
    "created_date": "2024-08-06",
    "version": "1.0",
    "author": "Jaime Yan",
    "description": "FDA-compliant Quality of Life and Patient Reported Outcomes template with detailed structure and complete R code",
    "references": [
      "ICH E3 Guidelines Section 14.2.4",
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "CDISC ADaM Implementation Guide",
      "PRO Guidance for Industry",
      "Patient-Reported Outcome Measures",
      "Statistical Analysis Plan Template"
    ],
    "data_requirements": [
      "ADSL dataset with ITTFL flag",
      "ADQS dataset with PRO variables",
      "PRO variables: SF36PCS, SF36MCS, EQ5DINDEX, EQ5DVAS, ADLQOL, CAREGIVER, PGI, CGI, SLEEP, FATIGUE, PAINVAS",
      "Visit information: AVISIT",
      "Treatment assignment: TRT01P",
      "Baseline and post-baseline values",
      "Covariates: AGE, SEX, SEV"
    ],
    "statistical_methods": [
      "Mixed Model Repeated Measures (MMRM) for continuous PRO endpoints",
      "Least squares means and standard errors",
      "Treatment differences with 95% confidence intervals",
      "p-values from F-tests for treatment-by-visit interaction",
      "Missing data handled using likelihood-based methods",
      "Clinical significance assessment using pre-specified thresholds",
      "PRO-specific validation including floor/ceiling effects"
    ]
  }
} 