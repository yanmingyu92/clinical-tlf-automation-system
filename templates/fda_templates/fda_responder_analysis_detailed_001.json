{
  "id": "fda-responder-analysis-detailed-001",
  "title": "Table 14.2.3 Responder Analysis",
  "type": "table",
  "category": "efficacy",
  "fda_compliance": {
    "standard": "ICH E3 Section 14.2.3",
    "population": "Intent-to-Treat (ITT)",
    "statistical_method": "Logistic Regression",
    "quality_checks": ["data_validation", "statistical_review", "clinical_review", "responder_definition"],
    "regulatory_requirements": [
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "ICH E3 Guidelines Section 14.2",
      "CDISC ADaM Implementation Guide",
      "Responder Analysis Guidelines"
    ]
  },
  "template_structure": {
    "title": "Table 14.2.3 Responder Analysis",
    "subtitle": "Proportion of Responders by Treatment Group",
    "table_type": "responder_analysis",
    "columns": [
      {
        "name": "Parameter",
        "type": "text",
        "description": "Efficacy parameter for responder analysis"
      },
      {
        "name": "Responder Definition",
        "type": "text",
        "description": "Definition of responder criteria"
      },
      {
        "name": "Treatment A",
        "type": "statistical",
        "description": "n/N (%) for Treatment A",
        "statistics": ["responder_count", "total_count", "percentage"]
      },
      {
        "name": "Treatment B",
        "type": "statistical",
        "description": "n/N (%) for Treatment B",
        "statistics": ["responder_count", "total_count", "percentage"]
      },
      {
        "name": "Placebo",
        "type": "statistical",
        "description": "n/N (%) for Placebo",
        "statistics": ["responder_count", "total_count", "percentage"]
      },
      {
        "name": "Treatment A vs Placebo",
        "type": "comparison",
        "description": "Odds Ratio (95% CI)",
        "statistics": ["odds_ratio", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Treatment B vs Placebo",
        "type": "comparison",
        "description": "Odds Ratio (95% CI)",
        "statistics": ["odds_ratio", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Risk Difference",
        "type": "comparison",
        "description": "Risk Difference (95% CI)",
        "statistics": ["risk_difference", "ci_lower", "ci_upper", "p_value"]
      }
    ],
    "rows": [
      {
        "category": "Primary Efficacy Responders",
        "parameters": [
          {
            "name": "ADAS-Cog Responders",
            "paramcd": "ADASCOG_RESP",
            "definition": "≥4-point improvement from baseline",
            "baseline_var": "BASE_ADASCOG",
            "change_var": "CHG_ADASCOG",
            "threshold": 4
          },
          {
            "name": "ADAS-Cog Super Responders",
            "paramcd": "ADASCOG_SUPER",
            "definition": "≥7-point improvement from baseline",
            "baseline_var": "BASE_ADASCOG",
            "change_var": "CHG_ADASCOG",
            "threshold": 7
          }
        ]
      },
      {
        "category": "Functional Responders",
        "parameters": [
          {
            "name": "ADCS-ADL Responders",
            "paramcd": "ADCSADL_RESP",
            "definition": "≥2-point improvement from baseline",
            "baseline_var": "BASE_ADCSADL",
            "change_var": "CHG_ADCSADL",
            "threshold": 2
          },
          {
            "name": "IADL Responders",
            "paramcd": "IADL_RESP",
            "definition": "≥1-point improvement from baseline",
            "baseline_var": "BASE_IADL",
            "change_var": "CHG_IADL",
            "threshold": 1
          }
        ]
      },
      {
        "category": "Behavioral Responders",
        "parameters": [
          {
            "name": "NPI Responders",
            "paramcd": "NPI_RESP",
            "definition": "≥3-point improvement from baseline",
            "baseline_var": "BASE_NPITOT",
            "change_var": "CHG_NPITOT",
            "threshold": 3
          },
          {
            "name": "NPI Distress Responders",
            "paramcd": "NPIDIST_RESP",
            "definition": "≥2-point improvement from baseline",
            "baseline_var": "BASE_NPIDIST",
            "change_var": "CHG_NPIDIST",
            "threshold": 2
          }
        ]
      },
      {
        "category": "Global Assessment Responders",
        "parameters": [
          {
            "name": "CIBIC-Plus Responders",
            "paramcd": "CIBICPLUS_RESP",
            "definition": "Score of 1, 2, or 3 (improved)",
            "baseline_var": "BASE_CIBICPLUS",
            "change_var": "CHG_CIBICPLUS",
            "threshold": "improved"
          },
          {
            "name": "CDR-SB Responders",
            "paramcd": "CDRSB_RESP",
            "definition": "≥0.5-point improvement from baseline",
            "baseline_var": "BASE_CDRSB",
            "change_var": "CHG_CDRSB",
            "threshold": 0.5
          }
        ]
      }
    ],
    "footnotes": [
      "ITT Population: All randomized subjects who received at least one dose of study drug",
      "Responder: Subject meeting the specified improvement criteria",
      "Odds Ratio: Treatment group odds of response relative to placebo",
      "Risk Difference: Difference in response rates between treatment groups",
      "95% CI: 95% confidence interval",
      "p-values from logistic regression with treatment group as predictor",
      "Missing data: Subjects with missing endpoint data excluded from responder analysis",
      "Clinical significance: Response criteria based on clinically meaningful improvements",
      "Statistical significance: p < 0.05 (two-sided)",
      "Treatment A: High dose, Treatment B: Low dose"
    ],
    "statistical_methodology": {
      "primary_method": "Logistic Regression",
      "model_formula": "response ~ TRT01P + AGE + SEX + SEV + BASE",
      "odds_ratio_calculation": "Exponentiated coefficient from logistic regression",
      "confidence_intervals": "Wald confidence intervals",
      "risk_difference": "Difference in response proportions",
      "significance_level": 0.05,
      "confidence_level": 0.95
    }
  },
  "r_code": {
    "libraries": [
      "library(tidyverse)",
      "library(haven)",
      "library(lubridate)",
      "library(gt)",
      "library(flextable)",
      "library(broom)",
      "library(emmeans)"
    ],
    "data_preparation": [
      "# Load datasets",
      "adsl <- read_sas('data/adsl.sas7bdat')",
      "adqs <- read_sas('data/adqs.sas7bdat')",
      "",
      "# Filter for ITT population",
      "adsl_itt <- adsl %>% filter(ITTFL == 'Y')",
      "",
      "# Merge datasets",
      "analysis_data <- adqs %>%",
      "  inner_join(adsl_itt, by = 'USUBJID') %>%",
      "  filter(PARAMCD %in% c('ADASCOG', 'ADCSADL', 'IADL', 'NPITOT', 'NPIDIST', 'CIBICPLUS', 'CDRSB')) %>%",
      "  filter(AVISIT == 'Week 12') %>%",
      "  mutate(",
      "    TRT01P = factor(TRT01P, levels = c('Placebo', 'Treatment B', 'Treatment A'))",
      "  )",
      "",
      "# Calculate baseline values",
      "baseline_data <- adqs %>%",
      "  filter(AVISIT == 'Baseline') %>%",
      "  select(USUBJID, PARAMCD, AVAL) %>%",
      "  rename(BASE = AVAL)",
      "",
      "# Merge baseline data",
      "analysis_data <- analysis_data %>%",
      "  left_join(baseline_data, by = c('USUBJID', 'PARAMCD')) %>%",
      "  mutate(CHG = AVAL - BASE)"
    ],
    "statistical_analysis": [
      "# Function to create responder variable",
      "create_responder_variable <- function(data, param_code, threshold, definition_type = 'improvement') {",
      "  param_data <- data %>% filter(PARAMCD == param_code)",
      "  ",
      "  if (definition_type == 'improvement') {",
      "    param_data <- param_data %>%",
      "      mutate(",
      "        responder = ifelse(CHG >= threshold, 1, 0),",
      "        responder_label = ifelse(CHG >= threshold, 'Yes', 'No')",
      "      )",
      "  } else if (definition_type == 'categorical') {",
      "    param_data <- param_data %>%",
      "      mutate(",
      "        responder = ifelse(AVAL %in% c(1, 2, 3), 1, 0),",
      "        responder_label = ifelse(AVAL %in% c(1, 2, 3), 'Yes', 'No')",
      "      )",
      "  }",
      "  ",
      "  return(param_data)",
      "}",
      "",
      "# Define responder criteria",
      "responder_criteria <- list(",
      "  ADASCOG_RESP = list(param = 'ADASCOG', threshold = 4, type = 'improvement'),",
      "  ADASCOG_SUPER = list(param = 'ADASCOG', threshold = 7, type = 'improvement'),",
      "  ADCSADL_RESP = list(param = 'ADCSADL', threshold = 2, type = 'improvement'),",
      "  IADL_RESP = list(param = 'IADL', threshold = 1, type = 'improvement'),",
      "  NPI_RESP = list(param = 'NPITOT', threshold = 3, type = 'improvement'),",
      "  NPIDIST_RESP = list(param = 'NPIDIST', threshold = 2, type = 'improvement'),",
      "  CIBICPLUS_RESP = list(param = 'CIBICPLUS', threshold = NULL, type = 'categorical'),",
      "  CDRSB_RESP = list(param = 'CDRSB', threshold = 0.5, type = 'improvement')",
      ")",
      "",
      "# Create responder datasets",
      "responder_data <- list()",
      "for (resp_name in names(responder_criteria)) {",
      "  criteria <- responder_criteria[[resp_name]]",
      "  responder_data[[resp_name]] <- create_responder_variable(",
      "    analysis_data,",
      "    criteria$param,",
      "    criteria$threshold,",
      "    criteria$type",
      "  )",
      "}",
      "",
      "# Function to fit logistic regression",
      "fit_responder_logistic <- function(data, param_name) {",
      "  # Fit logistic regression",
      "  model <- glm(responder ~ TRT01P + AGE + SEX + SEV + BASE, data = data, family = binomial)",
      "  ",
      "  # Get odds ratios",
      "  odds_ratios <- tidy(model, conf.int = TRUE, exponentiate = TRUE) %>%",
      "    filter(str_detect(term, 'TRT01P'))",
      "  ",
      "  # Calculate response rates",
      "  response_rates <- data %>%",
      "    group_by(TRT01P) %>%",
      "    summarise(",
      "      n_responders = sum(responder),",
      "      n_total = n(),",
      "      response_rate = n_responders / n_total,",
      "      .groups = 'drop'",
      "    )",
      "  ",
      "  # Calculate risk differences",
      "  placebo_rate <- response_rates %>% filter(TRT01P == 'Placebo') %>% pull(response_rate)",
      "  ",
      "  risk_differences <- response_rates %>%",
      "    filter(TRT01P != 'Placebo') %>%",
      "    mutate(",
      "      risk_diff = response_rate - placebo_rate,",
      "      # Simple CI calculation (can be improved)",
      "      ci_lower = risk_diff - 1.96 * sqrt(response_rate * (1 - response_rate) / n_total + placebo_rate * (1 - placebo_rate) / n_total),",
      "      ci_upper = risk_diff + 1.96 * sqrt(response_rate * (1 - response_rate) / n_total + placebo_rate * (1 - placebo_rate) / n_total)",
      "    )",
      "  ",
      "  return(list(",
      "    model = model,",
      "    odds_ratios = odds_ratios,",
      "    response_rates = response_rates,",
      "    risk_differences = risk_differences",
      "  ))",
      "}",
      "",
      "# Fit models for all responder analyses",
      "responder_results <- list()",
      "for (resp_name in names(responder_data)) {",
      "  responder_results[[resp_name]] <- fit_responder_logistic(responder_data[[resp_name]], resp_name)",
      "}"
    ],
    "table_generation": [
      "# Function to create responder analysis table",
      "create_responder_table <- function(results, param_info) {",
      "  table_data <- data.frame()",
      "  ",
      "  for (resp_name in names(results)) {",
      "    result <- results[[resp_name]]",
      "    param_label <- param_info[[resp_name]]$label",
      "    responder_def <- param_info[[resp_name]]$definition",
      "    ",
      "    # Get response rates",
      "    response_rates <- result$response_rates",
      "    ",
      "    # Treatment A",
      "    trt_a <- response_rates %>% filter(TRT01P == 'Treatment A')",
      "    trt_a_rate <- sprintf('%d/%d (%.1f%%)', trt_a$n_responders, trt_a$n_total, trt_a$response_rate * 100)",
      "    ",
      "    # Treatment B",
      "    trt_b <- response_rates %>% filter(TRT01P == 'Treatment B')",
      "    trt_b_rate <- sprintf('%d/%d (%.1f%%)', trt_b$n_responders, trt_b$n_total, trt_b$response_rate * 100)",
      "    ",
      "    # Placebo",
      "    placebo <- response_rates %>% filter(TRT01P == 'Placebo')",
      "    placebo_rate <- sprintf('%d/%d (%.1f%%)', placebo$n_responders, placebo$n_total, placebo$response_rate * 100)",
      "    ",
      "    # Odds ratios",
      "    odds_ratios <- result$odds_ratios",
      "    ",
      "    trt_a_or <- odds_ratios %>% filter(str_detect(term, 'Treatment A'))",
      "    trt_a_or_ci <- sprintf('%.2f (%.2f, %.2f)', trt_a_or$estimate, trt_a_or$conf.low, trt_a_or$conf.high)",
      "    trt_a_or_p <- sprintf('%.4f', trt_a_or$p.value)",
      "    ",
      "    trt_b_or <- odds_ratios %>% filter(str_detect(term, 'Treatment B'))",
      "    trt_b_or_ci <- sprintf('%.2f (%.2f, %.2f)', trt_b_or$estimate, trt_b_or$conf.low, trt_b_or$conf.high)",
      "    trt_b_or_p <- sprintf('%.4f', trt_b_or$p.value)",
      "    ",
      "    # Risk differences",
      "    risk_diffs <- result$risk_differences",
      "    ",
      "    trt_a_rd <- risk_diffs %>% filter(TRT01P == 'Treatment A')",
      "    trt_a_rd_ci <- sprintf('%.3f (%.3f, %.3f)', trt_a_rd$risk_diff, trt_a_rd$ci_lower, trt_a_rd$ci_upper)",
      "    ",
      "    trt_b_rd <- risk_diffs %>% filter(TRT01P == 'Treatment B')",
      "    trt_b_rd_ci <- sprintf('%.3f (%.3f, %.3f)', trt_b_rd$risk_diff, trt_b_rd$ci_lower, trt_b_rd$ci_upper)",
      "    ",
      "    # Add to table data",
      "    row_data <- data.frame(",
      "      Parameter = param_label,",
      "      Responder_Definition = responder_def,",
      "      Treatment_A = trt_a_rate,",
      "      Treatment_B = trt_b_rate,",
      "      Placebo = placebo_rate,",
      "      Treatment_A_vs_Placebo_OR = trt_a_or_ci,",
      "      Treatment_B_vs_Placebo_OR = trt_b_or_ci,",
      "      Risk_Difference = trt_a_rd_ci",
      "    )",
      "    ",
      "    table_data <- rbind(table_data, row_data)",
      "  }",
      "  ",
      "  return(table_data)",
      "}",
      "",
      "# Parameter information",
      "param_info <- list(",
      "  ADASCOG_RESP = list(",
      "    label = 'ADAS-Cog Responders',",
      "    definition = '≥4-point improvement from baseline'",
      "  ),",
      "  ADASCOG_SUPER = list(",
      "    label = 'ADAS-Cog Super Responders',",
      "    definition = '≥7-point improvement from baseline'",
      "  ),",
      "  ADCSADL_RESP = list(",
      "    label = 'ADCS-ADL Responders',",
      "    definition = '≥2-point improvement from baseline'",
      "  ),",
      "  IADL_RESP = list(",
      "    label = 'IADL Responders',",
      "    definition = '≥1-point improvement from baseline'",
      "  ),",
      "  NPI_RESP = list(",
      "    label = 'NPI Responders',",
      "    definition = '≥3-point improvement from baseline'",
      "  ),",
      "  NPIDIST_RESP = list(",
      "    label = 'NPI Distress Responders',",
      "    definition = '≥2-point improvement from baseline'",
      "  ),",
      "  CIBICPLUS_RESP = list(",
      "    label = 'CIBIC-Plus Responders',",
      "    definition = 'Score of 1, 2, or 3 (improved)'",
      "  ),",
      "  CDRSB_RESP = list(",
      "    label = 'CDR-SB Responders',",
      "    definition = '≥0.5-point improvement from baseline'",
      "  )",
      ")",
      "",
      "# Generate table",
      "responder_table_data <- create_responder_table(responder_results, param_info)",
      "",
      "# Create formatted table",
      "responder_analysis_table <- responder_table_data %>%",
      "  gt() %>%",
      "  tab_header(",
      "    title = 'Table 14.2.3 Responder Analysis',",
      "    subtitle = 'Proportion of Responders by Treatment Group'",
      "  ) %>%",
      "  cols_label(",
      "    Parameter = 'Parameter',",
      "    Responder_Definition = 'Responder Definition',",
      "    Treatment_A = 'Treatment A<br>n/N (%)',",
      "    Treatment_B = 'Treatment B<br>n/N (%)',",
      "    Placebo = 'Placebo<br>n/N (%)',",
      "    Treatment_A_vs_Placebo_OR = 'Treatment A vs Placebo<br>Odds Ratio (95% CI)',",
      "    Treatment_B_vs_Placebo_OR = 'Treatment B vs Placebo<br>Odds Ratio (95% CI)',",
      "    Risk_Difference = 'Risk Difference<br>(95% CI)'",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_column_labels()",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_borders(",
      "      sides = 'bottom',",
      "      weight = px(2)",
      "    ),",
      "    locations = cells_body(",
      "      rows = c(2, 4, 6, 8)",
      "    )",
      "  ) %>%",
      "  fmt_markdown(columns = everything()) %>%",
      "  tab_footnote(",
      "    footnote = 'ITT Population: All randomized subjects who received at least one dose of study drug',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Responder: Subject meeting the specified improvement criteria',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Odds Ratio: Treatment group odds of response relative to placebo',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Risk Difference: Difference in response rates between treatment groups',",
      "    locations = cells_title()",
      "  )",
      "",
      "# Display table",
      "responder_analysis_table"
    ],
    "quality_checks": [
      "# Data validation checks",
      "data_validation <- list()",
      "for (resp_name in names(responder_data)) {",
      "  data <- responder_data[[resp_name]]",
      "  ",
      "  validation <- data %>%",
      "    group_by(TRT01P) %>%",
      "    summarise(",
      "      n_subjects = n(),",
      "      n_responders = sum(responder),",
      "      response_rate = n_responders / n_subjects,",
      "      missing_data = sum(is.na(responder)),",
      "      .groups = 'drop'",
      "    )",
      "  ",
      "  data_validation[[resp_name]] <- validation",
      "}",
      "",
      "# Statistical validation",
      "statistical_validation <- list()",
      "for (resp_name in names(responder_results)) {",
      "  result <- responder_results[[resp_name]]",
      "  ",
      "  # Check model convergence",
      "  convergence <- is.null(result$model$converged) || result$model$converged",
      "  ",
      "  # Check model fit",
      "  model_summary <- summary(result$model)",
      "  ",
      "  # Check odds ratios",
      "  odds_ratios <- result$odds_ratios",
      "  ",
      "  statistical_validation[[resp_name]] <- list(",
      "    convergence = convergence,",
      "    aic = AIC(result$model),",
      "    deviance = deviance(result$model),",
      "    odds_ratios = odds_ratios",
      "  )",
      "}",
      "",
      "# Clinical validation",
      "clinical_validation <- list()",
      "for (resp_name in names(responder_results)) {",
      "  result <- responder_results[[resp_name]]",
      "  ",
      "  # Check response rates",
      "  response_rates <- result$response_rates",
      "  ",
      "  # Calculate clinically meaningful differences",
      "  placebo_rate <- response_rates %>% filter(TRT01P == 'Placebo') %>% pull(response_rate)",
      "  ",
      "  treatment_rates <- response_rates %>%",
      "    filter(TRT01P != 'Placebo') %>%",
      "    mutate(",
      "      absolute_difference = response_rate - placebo_rate,",
      "      relative_difference = (response_rate - placebo_rate) / placebo_rate",
      "    )",
      "  ",
      "  clinical_validation[[resp_name]] <- list(",
      "    placebo_rate = placebo_rate,",
      "    treatment_rates = treatment_rates,",
      "    clinically_significant = any(treatment_rates$absolute_difference >= 0.1)",
      "  )",
      "}",
      "",
      "# Print validation results",
      "cat('Data Validation:\\n')",
      "print(data_validation)",
      "cat('\\nStatistical Validation:\\n')",
      "print(statistical_validation)",
      "cat('\\nClinical Validation:\\n')",
      "print(clinical_validation)"
    ],
    "export_functions": [
      "# Export responder analysis results",
      "export_responder_analysis_results <- function(table_data, results, output_dir = 'output') {",
      "  # Create output directory",
      "  if (!dir.exists(output_dir)) {",
      "    dir.create(output_dir, recursive = TRUE)",
      "  }",
      "  ",
      "  # Export HTML table",
      "  html_file <- file.path(output_dir, 'responder_analysis_table.html')",
      "  responder_analysis_table %>%",
      "    gtsave(html_file)",
      "  ",
      "  # Export RTF table",
      "  rtf_file <- file.path(output_dir, 'responder_analysis_table.rtf')",
      "  responder_table_data %>%",
      "    flextable() %>%",
      "    set_header_labels(",
      "      Parameter = 'Parameter',",
      "      Responder_Definition = 'Responder Definition',",
      "      Treatment_A = 'Treatment A\\nn/N (%)',",
      "      Treatment_B = 'Treatment B\\nn/N (%)',",
      "      Placebo = 'Placebo\\nn/N (%)',",
      "      Treatment_A_vs_Placebo_OR = 'Treatment A vs Placebo\\nOdds Ratio (95% CI)',",
      "      Treatment_B_vs_Placebo_OR = 'Treatment B vs Placebo\\nOdds Ratio (95% CI)',",
      "      Risk_Difference = 'Risk Difference\\n(95% CI)'",
      "    ) %>%",
      "    autofit() %>%",
      "    save_as_rtf(rtf_file)",
      "  ",
      "  # Export results summary",
      "  summary_file <- file.path(output_dir, 'responder_analysis_summary.txt')",
      "  sink(summary_file)",
      "  cat('Responder Analysis Summary\\n')",
      "  cat('========================\\n\\n')",
      "  ",
      "  for (resp_name in names(results)) {",
      "    result <- results[[resp_name]]",
      "    cat(sprintf('Parameter: %s\\n', resp_name))",
      "    ",
      "    # Print response rates",
      "    cat('Response Rates:\\n')",
      "    print(result$response_rates)",
      "    ",
      "    # Print odds ratios",
      "    cat('Odds Ratios:\\n')",
      "    print(result$odds_ratios)",
      "    ",
      "    cat('\\n')",
      "  }",
      "  ",
      "  cat('Statistical Method: Logistic Regression\\n')",
      "  cat('Population: Intent-to-Treat\\n')",
      "  cat('Significance Level: 0.05\\n')",
      "  sink()",
      "  ",
      "  cat('Exported files to:', output_dir, '\\n')",
      "}",
      "",
      "# Export results",
      "export_responder_analysis_results(responder_table_data, responder_results)"
    ]
  },
  "keywords": [
    "responder analysis",
    "logistic regression",
    "odds ratio",
    "risk difference",
    "response rate",
    "clinical significance",
    "ADAS-Cog responders",
    "functional responders",
    "behavioral responders",
    "global assessment responders",
    "ITT population",
    "FDA compliance",
    "ICH E3",
    "clinical trial",
    "statistical analysis"
  ],
  "metadata": {
    "created_date": "2024-08-06",
    "version": "1.0",
    "author": "Jaime Yan",
    "description": "FDA-compliant responder analysis template with detailed structure and complete R code",
    "references": [
      "ICH E3 Guidelines Section 14.2.3",
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "CDISC ADaM Implementation Guide",
      "Responder Analysis Guidelines",
      "Statistical Analysis Plan Template"
    ],
    "data_requirements": [
      "ADSL dataset with ITTFL flag",
      "ADQS dataset with efficacy variables",
      "Efficacy variables: ADASCOG, ADCSADL, IADL, NPITOT, NPIDIST, CIBICPLUS, CDRSB",
      "Visit information: AVISIT (Week 12)",
      "Treatment assignment: TRT01P",
      "Baseline and post-baseline values",
      "Covariates: AGE, SEX, SEV"
    ],
    "statistical_methods": [
      "Logistic regression for binary responder outcomes",
      "Odds ratios with 95% confidence intervals",
      "Risk differences with 95% confidence intervals",
      "Response rate calculations by treatment group",
      "Clinical significance assessment",
      "Missing data: Subjects with missing endpoint data excluded"
    ]
  }
} 