{
  "id": "fda-vital-signs-detailed-001",
  "title": "Table 14.3.2 Vital Signs Summary",
  "type": "table",
  "category": "safety",
  "fda_compliance": {
    "standard": "ICH E3 Section 14.3",
    "population": "Safety Population",
    "statistical_method": "Descriptive statistics and change from baseline",
    "quality_checks": ["data_validation", "statistical_review", "clinical_review"],
    "regulatory_requirements": [
      "ICH E3 Guidelines Section 14.3.2",
      "FDA Guidance for Industry: E3 Structure and Content of Clinical Study Reports",
      "CDISC ADaM Implementation Guide"
    ]
  },
  "template_structure": {
    "title": "Table 14.3.2 Vital Signs Summary",
    "subtitle": "Safety Population",
    "columns": [
      "Parameter",
      "Visit",
      "Placebo\n(N=XXX)\nMean ± SD",
      "Treatment A\n(N=XXX)\nMean ± SD",
      "Treatment B\n(N=XXX)\nMean ± SD",
      "Treatment A vs Placebo\nLS Mean Difference\n(95% CI)",
      "Treatment B vs Placebo\nLS Mean Difference\n(95% CI)",
      "p-value"
    ],
    "rows": [
      "Systolic Blood Pressure (mmHg)",
      "  Baseline",
      "  Week 4",
      "  Week 8",
      "  Week 12",
      "  Week 16",
      "  Week 24",
      "  Change from Baseline at Week 12",
      "  Change from Baseline at Week 24",
      "Diastolic Blood Pressure (mmHg)",
      "  Baseline",
      "  Week 4",
      "  Week 8",
      "  Week 12",
      "  Week 16",
      "  Week 24",
      "  Change from Baseline at Week 12",
      "  Change from Baseline at Week 24",
      "Heart Rate (bpm)",
      "  Baseline",
      "  Week 4",
      "  Week 8",
      "  Week 12",
      "  Week 16",
      "  Week 24",
      "  Change from Baseline at Week 12",
      "  Change from Baseline at Week 24",
      "Temperature (°C)",
      "  Baseline",
      "  Week 4",
      "  Week 8",
      "  Week 12",
      "  Week 16",
      "  Week 24",
      "  Change from Baseline at Week 12",
      "  Change from Baseline at Week 24",
      "Respiratory Rate (breaths/min)",
      "  Baseline",
      "  Week 4",
      "  Week 8",
      "  Week 12",
      "  Week 16",
      "  Week 24",
      "  Change from Baseline at Week 12",
      "  Change from Baseline at Week 24",
      "Weight (kg)",
      "  Baseline",
      "  Week 4",
      "  Week 8",
      "  Week 12",
      "  Week 16",
      "  Week 24",
      "  Change from Baseline at Week 12",
      "  Change from Baseline at Week 24"
    ],
    "footnotes": [
      "Safety population = All randomized subjects who received at least one dose of study drug",
      "N = Number of subjects in the analysis population",
      "SD = Standard Deviation",
      "LS Mean = Least Squares Mean",
      "CI = Confidence Interval",
      "bpm = beats per minute",
      "mmHg = millimeters of mercury",
      "°C = degrees Celsius",
      "Change from baseline = Post-baseline value - Baseline value",
      "p-values are from treatment-by-visit interaction tests",
      "Missing data handled using last observation carried forward (LOCF)",
      "Clinically significant changes defined as: SBP ≥20 mmHg, DBP ≥10 mmHg, HR ≥20 bpm"
    ],
    "statistical_notes": [
      "Vital signs are summarized using descriptive statistics (n, mean, SD)",
      "Change from baseline analyses use Mixed Model Repeated Measures (MMRM)",
      "Model includes fixed effects for treatment, visit, treatment-by-visit interaction, and baseline value",
      "Random effects include subject-specific intercepts",
      "Missing data handled using likelihood-based methods",
      "Treatment differences and confidence intervals calculated using contrast statements",
      "p-values from F-tests for treatment-by-visit interaction",
      "Clinically significant changes are flagged for review"
    ]
  },
  "r_code": {
    "libraries": [
      "library(dplyr)",
      "library(tidyr)",
      "library(haven)",
      "library(gt)",
      "library(flextable)",
      "library(officer)",
      "library(lme4)",
      "library(emmeans)",
      "library(broom)",
      "library(stringr)",
      "library(scales)"
    ],
    "data_preparation": [
      "# Load ADSL and ADVS datasets",
      "adsl <- read_sas('data/adam/adsl.sas7bdat')",
      "advs <- read_sas('data/adam/advs.sas7bdat')",
      "",
      "# Define treatment groups",
      "adsl$TRT01P <- factor(adsl$TRT01P, levels = c('Placebo', 'Treatment A', 'Treatment B'))",
      "",
      "# Create safety population",
      "safety_pop <- adsl %>% filter(SAFFL == 'Y')",
      "",
      "# Merge with vital signs data",
      "vital_data <- safety_pop %>%",
      "  left_join(advs, by = 'USUBJID') %>%",
      "  filter(PARAMCD %in% c('SYSBP', 'DIABP', 'PULSE', 'TEMP', 'RESP', 'WEIGHT')) %>%",
      "  mutate(",
      "    # Create parameter labels",
      "    PARAM_LABEL = case_when(",
      "      PARAMCD == 'SYSBP' ~ 'Systolic Blood Pressure (mmHg)',",
      "      PARAMCD == 'DIABP' ~ 'Diastolic Blood Pressure (mmHg)',",
      "      PARAMCD == 'PULSE' ~ 'Heart Rate (bpm)',",
      "      PARAMCD == 'TEMP' ~ 'Temperature (°C)',",
      "      PARAMCD == 'RESP' ~ 'Respiratory Rate (breaths/min)',",
      "      PARAMCD == 'WEIGHT' ~ 'Weight (kg)',",
      "      TRUE ~ PARAM",
      "    ),",
      "    # Ensure visit is factor",
      "    AVISIT = factor(AVISIT, levels = c('Baseline', 'Week 4', 'Week 8', 'Week 12', 'Week 16', 'Week 24')),",
      "    # Create change from baseline",
      "    CHG = AVAL - BASE,",
      "    # Ensure numeric values",
      "    AVAL = as.numeric(AVAL),",
      "    BASE = as.numeric(BASE),",
      "    CHG = as.numeric(CHG)",
      "  )"
    ],
    "statistical_analysis": [
      "# Function to create vital signs summary",
      "create_vital_summary <- function(data, param_codes) {",
      "  data %>%",
      "    filter(PARAMCD %in% param_codes) %>%",
      "    group_by(TRT01P, PARAM_LABEL, AVISIT) %>%",
      "    summarise(",
      "      n_subjects = n_distinct(USUBJID),",
      "      mean_val = mean(AVAL, na.rm = TRUE),",
      "      sd_val = sd(AVAL, na.rm = TRUE),",
      "      .groups = 'drop'",
      "    ) %>%",
      "    mutate(",
      "      mean_sd = sprintf('%.1f ± %.2f', mean_val, sd_val)",
      "    )",
      "}",
      "",
      "# Function to fit MMRM for change from baseline",
      "fit_vital_mmrm <- function(data, param_code) {",
      "  # Filter for specific parameter and post-baseline visits",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code, AVISIT != 'Baseline') %>%",
      "    filter(!is.na(CHG))",
      "  ",
      "  # Fit mixed model",
      "  formula_str <- 'CHG ~ TRT01P * AVISIT + BASE'",
      "  model <- lmer(as.formula(formula_str), data = param_data)",
      "  ",
      "  # Get least squares means",
      "  lsmeans <- emmeans(model, ~ TRT01P | AVISIT)",
      "  ",
      "  # Get treatment differences",
      "  contrasts <- emmeans(model, ~ TRT01P | AVISIT) %>%",
      "    contrast(method = 'pairwise', adjust = 'none') %>%",
      "    as.data.frame() %>%",
      "    filter(contrast %in% c('Treatment A - Placebo', 'Treatment B - Placebo'))",
      "  ",
      "  # Get p-values for treatment-by-visit interaction",
      "  anova_result <- anova(model)",
      "  p_value <- anova_result$`Pr(>F)`[anova_result$term == 'TRT01P:AVISIT']",
      "  ",
      "  return(list(",
      "    model = model,",
      "    lsmeans = lsmeans,",
      "    contrasts = contrasts,",
      "    p_value = p_value",
      "  ))",
      "}",
      "",
      "# Vital signs parameters",
      "vital_params <- c('SYSBP', 'DIABP', 'PULSE', 'TEMP', 'RESP', 'WEIGHT')",
      "vital_summary <- create_vital_summary(vital_data, vital_params)",
      "",
      "# Fit MMRM for each parameter",
      "vital_models <- list()",
      "for (param in vital_params) {",
      "  vital_models[[param]] <- fit_vital_mmrm(vital_data, param)",
      "}"
    ],
    "table_generation": [
      "# Create table data with proper formatting",
      "table_data <- vital_summary %>%",
      "  pivot_wider(",
      "    names_from = TRT01P,",
      "    values_from = mean_sd,",
      "    names_prefix = 'trt_'",
      "  ) %>%",
      "  mutate(",
      "    Placebo = trt_Placebo,",
      "    `Treatment A` = `trt_Treatment A`,",
      "    `Treatment B` = `trt_Treatment B`,",
      "    `Treatment A vs Placebo` = 'TBD',",
      "    `Treatment B vs Placebo` = 'TBD',",
      "    `p-value` = 'TBD'",
      "  ) %>%",
      "  select(PARAM_LABEL, AVISIT, Placebo, `Treatment A`, `Treatment B`, ",
      "         `Treatment A vs Placebo`, `Treatment B vs Placebo`, `p-value`)",
      "",
      "# Add change from baseline results",
      "change_results <- list()",
      "for (param in names(vital_models)) {",
      "  param_label <- case_when(",
      "    param == 'SYSBP' ~ 'Systolic Blood Pressure (mmHg)',",
      "    param == 'DIABP' ~ 'Diastolic Blood Pressure (mmHg)',",
      "    param == 'PULSE' ~ 'Heart Rate (bpm)',",
      "    param == 'TEMP' ~ 'Temperature (°C)',",
      "    param == 'RESP' ~ 'Respiratory Rate (breaths/min)',",
      "    param == 'WEIGHT' ~ 'Weight (kg)',",
      "    TRUE ~ param",
      "  )",
      "  ",
      "  # Get change from baseline results",
      "  change_data <- vital_models[[param]]$contrasts %>%",
      "    filter(AVISIT %in% c('Week 12', 'Week 24')) %>%",
      "    mutate(",
      "      PARAM_LABEL = param_label,",
      "      difference_ci = sprintf('%.2f (%.2f, %.2f)', estimate, lower.CL, upper.CL),",
      "      p_value = sprintf('%.4f', p.value)",
      "    )",
      "  ",
      "  change_results[[param]] <- change_data",
      "}",
      "",
      "# Combine all data",
      "final_table_data <- bind_rows(",
      "  table_data,",
      "  bind_rows(change_results) %>%",
      "    mutate(",
      "      Placebo = 'Change from Baseline',",
      "      `Treatment A` = 'Change from Baseline',",
      "      `Treatment B` = 'Change from Baseline',",
      "      `Treatment A vs Placebo` = difference_ci,",
      "      `Treatment B vs Placebo` = difference_ci,",
      "      `p-value` = p_value",
      "    ) %>%",
      "    select(PARAM_LABEL, AVISIT, Placebo, `Treatment A`, `Treatment B`, ",
      "           `Treatment A vs Placebo`, `Treatment B vs Placebo`, `p-value`)",
      ")",
      "",
      "# Create the final table with FDA-compliant formatting",
      "vital_table <- gt(final_table_data) %>%",
      "  tab_header(",
      "    title = 'Table 14.3.2 Vital Signs Summary',",
      "    subtitle = 'Safety Population'",
      "  ) %>%",
      "  cols_label(",
      "    PARAM_LABEL = 'Parameter',",
      "    AVISIT = 'Visit',",
      "    Placebo = 'Placebo\\n(N=XXX)\\nMean ± SD',",
      "    `Treatment A` = 'Treatment A\\n(N=XXX)\\nMean ± SD',",
      "    `Treatment B` = 'Treatment B\\n(N=XXX)\\nMean ± SD',",
      "    `Treatment A vs Placebo` = 'Treatment A vs Placebo\\nLS Mean Difference\\n(95% CI)',",
      "    `Treatment B vs Placebo` = 'Treatment B vs Placebo\\nLS Mean Difference\\n(95% CI)',",
      "    `p-value` = 'p-value'",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_column_labels()",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_body(columns = 'PARAM_LABEL')",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_borders(",
      "      sides = 'bottom',",
      "      weight = px(1)",
      "    ),",
      "    locations = cells_body(",
      "      rows = c(6, 13, 20, 27, 34, 41)",
      "    )",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Safety population = All randomized subjects who received at least one dose of study drug',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'N = Number of subjects in the analysis population',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'SD = Standard Deviation',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'LS Mean = Least Squares Mean',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'CI = Confidence Interval',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'bpm = beats per minute',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'mmHg = millimeters of mercury',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = '°C = degrees Celsius',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Change from baseline = Post-baseline value - Baseline value',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'p-values are from treatment-by-visit interaction tests',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Missing data handled using last observation carried forward (LOCF)',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Clinically significant changes defined as: SBP ≥20 mmHg, DBP ≥10 mmHg, HR ≥20 bpm',",
      "    locations = cells_title()",
      "  )",
      "",
      "# Display the table",
      "vital_table"
    ],
    "quality_checks": [
      "# Data validation checks",
      "validation_checks <- list(",
      "  # Missing data check",
      "  missing_data = vital_data %>% summarise(",
      "    missing_sysbp = sum(is.na(AVAL) & PARAMCD == 'SYSBP'),",
      "    missing_diabp = sum(is.na(AVAL) & PARAMCD == 'DIABP'),",
      "    missing_pulse = sum(is.na(AVAL) & PARAMCD == 'PULSE'),",
      "    missing_temp = sum(is.na(AVAL) & PARAMCD == 'TEMP'),",
      "    missing_resp = sum(is.na(AVAL) & PARAMCD == 'RESP'),",
      "    missing_weight = sum(is.na(AVAL) & PARAMCD == 'WEIGHT')",
      "  ),",
      "  ",
      "  # Sample size validation",
      "  sample_sizes = vital_data %>%",
      "    group_by(TRT01P, PARAMCD, AVISIT) %>%",
      "    summarise(n = n_distinct(USUBJID), .groups = 'drop'),",
      "  ",
      "  # Outlier detection",
      "  outliers = vital_data %>%",
      "    group_by(PARAMCD) %>%",
      "    mutate(",
      "      q1 = quantile(AVAL, 0.25, na.rm = TRUE),",
      "      q3 = quantile(AVAL, 0.75, na.rm = TRUE),",
      "      iqr = q3 - q1,",
      "      outlier = AVAL < (q1 - 1.5 * iqr) | AVAL > (q3 + 1.5 * iqr)",
      "    ) %>%",
      "    filter(outlier)",
      "  ",
      "  # Clinically significant changes",
      "  clinical_significance = vital_data %>%",
      "    filter(!is.na(CHG)) %>%",
      "    mutate(",
      "      clinically_significant = case_when(",
      "        PARAMCD == 'SYSBP' & abs(CHG) >= 20 ~ TRUE,",
      "        PARAMCD == 'DIABP' & abs(CHG) >= 10 ~ TRUE,",
      "        PARAMCD == 'PULSE' & abs(CHG) >= 20 ~ TRUE,",
      "        TRUE ~ FALSE",
      "      )",
      "    ) %>%",
      "    filter(clinically_significant)",
      "  ",
      "  # Model diagnostics",
      "  model_diagnostics = list(",
      "    residuals = lapply(vital_models, function(x) residuals(x$model)),",
      "    fitted_values = lapply(vital_models, function(x) fitted(x$model)),",
      "    model_summaries = lapply(vital_models, function(x) summary(x$model))",
      "  )",
      ")"
    ],
    "export_functions": [
      "# Function to export table to Word document",
      "export_to_word <- function(table, filename) {",
      "  # Convert gt table to flextable",
      "  ft <- as_flextable(table)",
      "  ",
      "  # Create Word document",
      "  doc <- read_docx() %>%",
      "    body_add_flextable(ft) %>%",
      "    body_add_par('', style = 'Normal') %>%",
      "    body_add_par('Source: Clinical Study Report', style = 'Normal') %>%",
      "    body_add_par(paste('Generated on:', Sys.Date()), style = 'Normal')",
      "  ",
      "  # Save document",
      "  print(doc, target = filename)",
      "}",
      "",
      "# Function to export table to PDF",
      "export_to_pdf <- function(table, filename) {",
      "  # Convert gt table to flextable",
      "  ft <- as_flextable(table)",
      "  ",
      "  # Save as PDF",
      "  save_as_docx(ft, path = filename)",
      "}",
      "",
      "# Export the vital signs table",
      "export_to_word(vital_table, 'output/Table_14_3_2_Vital_Signs.docx')",
      "export_to_pdf(vital_table, 'output/Table_14_3_2_Vital_Signs.pdf')"
    ]
  },
  "keywords": [
    "vital", "signs", "safety", "fda", "ich", "clinical", "trial", 
    "statistics", "population", "blood", "pressure", "heart", "rate",
    "temperature", "respiratory", "weight", "mmrm", "change", "baseline"
  ],
  "metadata": {
    "created_date": "2024-08-06",
    "version": "1.0",
    "author": "Jaime Yan",
    "description": "FDA-compliant vital signs summary template with detailed structure and complete R code",
    "references": [
      "ICH E3 Guidelines Section 14.3.2",
      "FDA Guidance for Industry: E3 Structure and Content of Clinical Study Reports",
      "CDISC ADaM Implementation Guide",
      "Statistical Analysis Plan Template"
    ],
    "data_requirements": [
      "ADSL dataset with SAFFL flag",
      "ADVS dataset with vital signs variables",
      "Vital signs variables: SYSBP, DIABP, PULSE, TEMP, RESP, WEIGHT",
      "Visit information: AVISIT",
      "Treatment assignment: TRT01P",
      "Baseline and post-baseline values"
    ],
    "statistical_methods": [
      "Descriptive statistics for vital signs",
      "Mixed Model Repeated Measures (MMRM) for change from baseline",
      "Least squares means and standard errors",
      "Treatment differences with 95% confidence intervals",
      "p-values from F-tests for treatment-by-visit interaction",
      "Missing data handled using likelihood-based methods"
    ]
  }
} 