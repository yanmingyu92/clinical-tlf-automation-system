{
  "id": "fda-demographic-detailed-001",
  "title": "Table 14.1.1 Demographic and Baseline Characteristics Summary",
  "type": "table",
  "category": "demographics",
  "fda_compliance": {
    "standard": "ICH E3 Section 14.1",
    "population": "Intent-to-Treat (ITT)",
    "statistical_method": "Descriptive statistics",
    "quality_checks": ["data_validation", "statistical_review", "clinical_review"],
    "regulatory_requirements": [
      "ICH E3 Guidelines Section 14.1.1",
      "FDA Guidance for Industry: E3 Structure and Content of Clinical Study Reports",
      "CDISC ADaM Implementation Guide"
    ]
  },
  "template_structure": {
    "title": "Table 14.1.1 Demographic and Baseline Characteristics Summary",
    "subtitle": "Intent-to-Treat Population",
    "columns": [
      "Parameter",
      "Category",
      "Placebo\n(N=XXX)\nn (%)",
      "Treatment A\n(N=XXX)\nn (%)",
      "Treatment B\n(N=XXX)\nn (%)",
      "Total\n(N=XXX)\nn (%)"
    ],
    "rows": [
      "Age (years)",
      "  Mean ± SD",
      "  Median (Min, Max)",
      "  <65",
      "  ≥65",
      "  ≥75",
      "Sex",
      "  Male",
      "  Female",
      "Race",
      "  White",
      "  Black or African American",
      "  Asian",
      "  Other",
      "Ethnicity",
      "  Hispanic or Latino",
      "  Not Hispanic or Latino",
      "Weight (kg)",
      "  Mean ± SD",
      "  Median (Min, Max)",
      "Height (cm)",
      "  Mean ± SD",
      "  Median (Min, Max)",
      "BMI (kg/m²)",
      "  Mean ± SD",
      "  <18.5",
      "  18.5-<25",
      "  25-<30",
      "  ≥30",
      "Disease Duration (years)",
      "  Mean ± SD",
      "  Median (Min, Max)",
      "Prior Treatment",
      "  Yes",
      "  No",
      "Disease Severity",
      "  Mild",
      "  Moderate",
      "  Severe"
    ],
    "footnotes": [
      "ITT = Intent-to-Treat population",
      "N = Number of subjects in the analysis population",
      "n = Number of subjects in the specified category",
      "SD = Standard Deviation",
      "BMI = Body Mass Index",
      "Percentages are based on the number of subjects in each treatment group",
      "Missing data are not included in the percentage calculations"
    ],
    "statistical_notes": [
      "Continuous variables are summarized using descriptive statistics (n, mean, SD, median, min, max)",
      "Categorical variables are summarized using frequency counts and percentages",
      "No formal statistical testing was performed for baseline characteristics",
      "Percentages are calculated as (n/N) × 100 for each treatment group"
    ]
  },
  "r_code": {
    "libraries": [
      "library(dplyr)",
      "library(tidyr)",
      "library(haven)",
      "library(gt)",
      "library(flextable)",
      "library(officer)",
      "library(stringr)",
      "library(scales)"
    ],
    "data_preparation": [
      "# Load ADSL dataset",
      "adsl <- read_sas('data/adam/adsl.sas7bdat')",
      "",
      "# Define treatment groups",
      "adsl$TRT01P <- factor(adsl$TRT01P, levels = c('Placebo', 'Treatment A', 'Treatment B'))",
      "",
      "# Create ITT population",
      "itt_pop <- adsl %>% filter(ITTFL == 'Y')",
      "",
      "# Create demographic variables with proper categorization",
      "demographic_data <- itt_pop %>%",
      "  mutate(",
      "    # Age categories",
      "    AGE_CAT = case_when(",
      "      AGE < 65 ~ '<65',",
      "      AGE >= 65 & AGE < 75 ~ '≥65',",
      "      AGE >= 75 ~ '≥75',",
      "      TRUE ~ NA_character_",
      "    ),",
      "    # BMI categories",
      "    BMI_CAT = case_when(",
      "      BMI < 18.5 ~ '<18.5',",
      "      BMI >= 18.5 & BMI < 25 ~ '18.5-<25',",
      "      BMI >= 25 & BMI < 30 ~ '25-<30',",
      "      BMI >= 30 ~ '≥30',",
      "      TRUE ~ NA_character_",
      "    ),",
      "    # Disease severity (assuming SEV variable exists)",
      "    SEVERITY_CAT = case_when(",
      "      SEV == 1 ~ 'Mild',",
      "      SEV == 2 ~ 'Moderate',",
      "      SEV == 3 ~ 'Severe',",
      "      TRUE ~ NA_character_",
      "    ),",
      "    # Prior treatment",
      "    PRIOR_TX = case_when(",
      "      PRIORFL == 'Y' ~ 'Yes',",
      "      PRIORFL == 'N' ~ 'No',",
      "      TRUE ~ NA_character_",
      "    )",
      "  )"
    ],
    "statistical_analysis": [
      "# Function to create demographic summary for categorical variables",
      "create_categorical_summary <- function(data, var_name, var_label) {",
      "  data %>%",
      "    filter(!is.na(!!sym(var_name))) %>%",
      "    group_by(TRT01P, !!sym(var_name)) %>%",
      "    summarise(",
      "      n_subjects = n_distinct(USUBJID),",
      "      .groups = 'drop'",
      "    ) %>%",
      "    group_by(TRT01P) %>%",
      "    mutate(",
      "      total_subjects = sum(n_subjects),",
      "      pct = sprintf('%.0f (%.1f%%)', n_subjects, 100 * n_subjects / total_subjects)",
      "    ) %>%",
      "    mutate(",
      "      Parameter = var_label,",
      "      Category = !!sym(var_name)",
      "    )",
      "}",
      "",
      "# Function to create demographic summary for continuous variables",
      "create_continuous_summary <- function(data, var_name, var_label) {",
      "  data %>%",
      "    group_by(TRT01P) %>%",
      "    summarise(",
      "      n = n_distinct(USUBJID),",
      "      mean_val = mean(!!sym(var_name), na.rm = TRUE),",
      "      sd_val = sd(!!sym(var_name), na.rm = TRUE),",
      "      median_val = median(!!sym(var_name), na.rm = TRUE),",
      "      min_val = min(!!sym(var_name), na.rm = TRUE),",
      "      max_val = max(!!sym(var_name), na.rm = TRUE),",
      "      .groups = 'drop'",
      "    ) %>%",
      "    mutate(",
      "      Parameter = var_label,",
      "      Category = 'Mean ± SD',",
      "      pct = sprintf('%.1f ± %.2f', mean_val, sd_val)",
      "    ) %>%",
      "    bind_rows(",
      "      data %>%",
      "        group_by(TRT01P) %>%",
      "        summarise(",
      "          n = n_distinct(USUBJID),",
      "          median_val = median(!!sym(var_name), na.rm = TRUE),",
      "          min_val = min(!!sym(var_name), na.rm = TRUE),",
      "          max_val = max(!!sym(var_name), na.rm = TRUE),",
      "          .groups = 'drop'",
      "        ) %>%",
      "        mutate(",
      "          Parameter = var_label,",
      "          Category = 'Median (Min, Max)',",
      "          pct = sprintf('%.1f (%.1f, %.1f)', median_val, min_val, max_val)",
      "        )",
      "    )",
      "}",
      "",
      "# Create summaries for each parameter",
      "age_summary <- create_continuous_summary(demographic_data, 'AGE', 'Age (years)')",
      "age_cat_summary <- create_categorical_summary(demographic_data, 'AGE_CAT', 'Age (years)')",
      "sex_summary <- create_categorical_summary(demographic_data, 'SEX', 'Sex')",
      "race_summary <- create_categorical_summary(demographic_data, 'RACE', 'Race')",
      "ethnicity_summary <- create_categorical_summary(demographic_data, 'ETHNIC', 'Ethnicity')",
      "weight_summary <- create_continuous_summary(demographic_data, 'WEIGHTBL', 'Weight (kg)')",
      "height_summary <- create_continuous_summary(demographic_data, 'HEIGHTBL', 'Height (cm)')",
      "bmi_summary <- create_continuous_summary(demographic_data, 'BMIBL', 'BMI (kg/m²)')",
      "bmi_cat_summary <- create_categorical_summary(demographic_data, 'BMI_CAT', 'BMI (kg/m²)')",
      "disease_duration_summary <- create_continuous_summary(demographic_data, 'DURATION', 'Disease Duration (years)')",
      "prior_tx_summary <- create_categorical_summary(demographic_data, 'PRIOR_TX', 'Prior Treatment')",
      "severity_summary <- create_categorical_summary(demographic_data, 'SEVERITY_CAT', 'Disease Severity')",
      "",
      "# Combine all summaries",
      "demographic_summary <- bind_rows(",
      "  age_summary,",
      "  age_cat_summary %>% filter(!is.na(Category)),",
      "  sex_summary %>% filter(!is.na(Category)),",
      "  race_summary %>% filter(!is.na(Category)),",
      "  ethnicity_summary %>% filter(!is.na(Category)),",
      "  weight_summary,",
      "  height_summary,",
      "  bmi_summary,",
      "  bmi_cat_summary %>% filter(!is.na(Category)),",
      "  disease_duration_summary,",
      "  prior_tx_summary %>% filter(!is.na(Category)),",
      "  severity_summary %>% filter(!is.na(Category))",
      ")"
    ],
    "table_generation": [
      "# Create table data with proper formatting",
      "table_data <- demographic_summary %>%",
      "  pivot_wider(",
      "    names_from = TRT01P,",
      "    values_from = pct,",
      "    names_prefix = 'trt_'",
      "  ) %>%",
      "  mutate(",
      "    Placebo = trt_Placebo,",
      "    `Treatment A` = `trt_Treatment A`,",
      "    `Treatment B` = `trt_Treatment B`,",
      "    Total = pct  # This would need to be calculated separately for total column",
      "  ) %>%",
      "  select(Parameter, Category, Placebo, `Treatment A`, `Treatment B`, Total)",
      "",
      "# Calculate total column separately",
      "total_summary <- demographic_data %>%",
      "  group_by(Parameter, Category) %>%",
      "  summarise(",
      "    n_total = n_distinct(USUBJID),",
      "    .groups = 'drop'",
      "  ) %>%",
      "  group_by(Parameter) %>%",
      "  mutate(",
      "    total_subjects = sum(n_total),",
      "    total_pct = sprintf('%.0f (%.1f%%)', n_total, 100 * n_total / total_subjects)",
      "  )",
      "",
      "# Merge total column",
      "table_data <- table_data %>%",
      "  left_join(total_summary %>% select(Parameter, Category, total_pct),",
      "            by = c('Parameter', 'Category')) %>%",
      "  mutate(Total = total_pct) %>%",
      "  select(-total_pct)",
      "",
      "# Create the final table with FDA-compliant formatting",
      "demographic_table <- gt(table_data) %>%",
      "  tab_header(",
      "    title = 'Table 14.1.1 Demographic and Baseline Characteristics Summary',",
      "    subtitle = 'Intent-to-Treat Population'",
      "  ) %>%",
      "  cols_label(",
      "    Parameter = 'Parameter',",
      "    Category = 'Category',",
      "    Placebo = 'Placebo\\n(N=XXX)\\nn (%)',",
      "    `Treatment A` = 'Treatment A\\n(N=XXX)\\nn (%)',",
      "    `Treatment B` = 'Treatment B\\n(N=XXX)\\nn (%)',",
      "    Total = 'Total\\n(N=XXX)\\nn (%)'",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_column_labels()",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_body(columns = 'Parameter')",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(style = 'italic'),",
      "    locations = cells_body(columns = 'Category')",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_borders(",
      "      sides = 'bottom',",
      "      weight = px(1)",
      "    ),",
      "    locations = cells_body(",
      "      rows = c(6, 8, 12, 16, 18, 20, 26, 28, 30)",
      "    )",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'ITT = Intent-to-Treat population',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'N = Number of subjects in the analysis population',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'n = Number of subjects in the specified category',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'SD = Standard Deviation',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'BMI = Body Mass Index',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Percentages are based on the number of subjects in each treatment group',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Missing data are not included in the percentage calculations',",
      "    locations = cells_title()",
      "  )",
      "",
      "# Display the table",
      "demographic_table"
    ],
    "quality_checks": [
      "# Data validation checks",
      "validation_checks <- list(",
      "  # Missing data check",
      "  missing_data = demographic_data %>% summarise(",
      "    missing_age = sum(is.na(AGE)),",
      "    missing_sex = sum(is.na(SEX)),",
      "    missing_race = sum(is.na(RACE)),",
      "    missing_weight = sum(is.na(WEIGHTBL)),",
      "    missing_height = sum(is.na(HEIGHTBL)),",
      "    missing_bmi = sum(is.na(BMIBL)),",
      "    missing_duration = sum(is.na(DURATION))",
      "  ),",
      "  ",
      "  # Sample size validation",
      "  sample_sizes = demographic_data %>%",
      "    group_by(TRT01P) %>%",
      "    summarise(n = n_distinct(USUBJID), .groups = 'drop'),",
      "  ",
      "  # Outlier detection for continuous variables",
      "  outliers = demographic_data %>%",
      "    filter(AGE < 18 | AGE > 100 | WEIGHTBL < 30 | WEIGHTBL > 200 |",
      "           HEIGHTBL < 100 | HEIGHTBL > 250 | BMIBL < 10 | BMIBL > 60) %>%",
      "    select(USUBJID, AGE, WEIGHTBL, HEIGHTBL, BMIBL)",
      "  ",
      "  # Data consistency checks",
      "  consistency_checks = demographic_data %>%",
      "    mutate(",
      "      bmi_calculated = WEIGHTBL / ((HEIGHTBL/100)^2),",
      "      bmi_diff = abs(BMIBL - bmi_calculated)",
      "    ) %>%",
      "    filter(bmi_diff > 0.1) %>%",
      "    select(USUBJID, BMIBL, bmi_calculated, bmi_diff)",
      "  ",
      "  # Treatment group balance",
      "  treatment_balance = demographic_data %>%",
      "    group_by(TRT01P) %>%",
      "    summarise(",
      "      n = n(),",
      "      mean_age = mean(AGE, na.rm = TRUE),",
      "      sd_age = sd(AGE, na.rm = TRUE),",
      "      pct_male = 100 * sum(SEX == 'M', na.rm = TRUE) / n,",
      "      mean_bmi = mean(BMIBL, na.rm = TRUE),",
      "      sd_bmi = sd(BMIBL, na.rm = TRUE),",
      "      .groups = 'drop'",
      "    )",
      ")"
    ],
    "export_functions": [
      "# Function to export table to Word document",
      "export_to_word <- function(table, filename) {",
      "  # Convert gt table to flextable",
      "  ft <- as_flextable(table)",
      "  ",
      "  # Create Word document",
      "  doc <- read_docx() %>%",
      "    body_add_flextable(ft) %>%",
      "    body_add_par('', style = 'Normal') %>%",
      "    body_add_par('Source: Clinical Study Report', style = 'Normal') %>%",
      "    body_add_par(paste('Generated on:', Sys.Date()), style = 'Normal')",
      "  ",
      "  # Save document",
      "  print(doc, target = filename)",
      "}",
      "",
      "# Function to export table to PDF",
      "export_to_pdf <- function(table, filename) {",
      "  # Convert gt table to flextable",
      "  ft <- as_flextable(table)",
      "  ",
      "  # Save as PDF",
      "  save_as_docx(ft, path = filename)",
      "}",
      "",
      "# Export the demographic table",
      "export_to_word(demographic_table, 'output/Table_14_1_1_Demographics.docx')",
      "export_to_pdf(demographic_table, 'output/Table_14_1_1_Demographics.pdf')"
    ]
  },
  "keywords": [
    "demographics", "baseline", "characteristics", "fda", "ich", "clinical", 
    "trial", "statistics", "population", "age", "sex", "race", "ethnicity",
    "weight", "height", "bmi", "disease", "severity", "prior", "treatment"
  ],
  "metadata": {
    "created_date": "2024-08-06",
    "version": "1.0",
    "author": "Jaime Yan",
    "description": "FDA-compliant demographic characteristics table template with detailed structure and complete R code",
    "references": [
      "ICH E3 Guidelines Section 14.1.1",
      "FDA Guidance for Industry: E3 Structure and Content of Clinical Study Reports",
      "CDISC ADaM Implementation Guide",
      "Statistical Analysis Plan Template"
    ],
    "data_requirements": [
      "ADSL dataset with ITTFL flag",
      "Demographic variables: AGE, SEX, RACE, ETHNIC, WEIGHTBL, HEIGHTBL, BMIBL",
      "Disease variables: DURATION, SEV, PRIORFL",
      "Treatment assignment: TRT01P"
    ],
    "statistical_methods": [
      "Descriptive statistics for continuous variables",
      "Frequency counts and percentages for categorical variables",
      "No formal statistical testing for baseline characteristics",
      "Missing data handling: excluded from percentage calculations"
    ]
  }
} 