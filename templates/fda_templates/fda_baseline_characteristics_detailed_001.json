{
  "id": "fda-baseline-characteristics-detailed-001",
  "title": "Table 14.1.3 Baseline Characteristics",
  "type": "table",
  "category": "demographics",
  "fda_compliance": {
    "standard": "ICH E3 Section 14.1.3",
    "population": "Intent-to-Treat (ITT)",
    "statistical_method": "Descriptive Statistics",
    "quality_checks": ["data_validation", "statistical_review", "clinical_review", "baseline_balance"],
    "regulatory_requirements": [
      "FDA Guidance for Industry: E3 Structure and Content of Clinical Study Reports",
      "ICH E3 Guidelines Section 14.1",
      "CDISC ADaM Implementation Guide",
      "Baseline Characteristics Guidelines"
    ]
  },
  "template_structure": {
    "title": "Table 14.1.3 Baseline Characteristics",
    "subtitle": "Disease-Specific Baseline Measures by Treatment Group",
    "table_type": "baseline_characteristics",
    "columns": [
      {
        "name": "Parameter",
        "type": "text",
        "description": "Baseline characteristic parameter"
      },
      {
        "name": "Category",
        "type": "text",
        "description": "Category of baseline measure"
      },
      {
        "name": "Treatment A",
        "type": "statistical",
        "description": "n/N (%) or Mean (SD) for Treatment A",
        "statistics": ["count", "total", "percentage", "mean", "sd"]
      },
      {
        "name": "Treatment B",
        "type": "statistical",
        "description": "n/N (%) or Mean (SD) for Treatment B",
        "statistics": ["count", "total", "percentage", "mean", "sd"]
      },
      {
        "name": "Placebo",
        "type": "statistical",
        "description": "n/N (%) or Mean (SD) for Placebo",
        "statistics": ["count", "total", "percentage", "mean", "sd"]
      },
      {
        "name": "Treatment A vs Placebo",
        "type": "comparison",
        "description": "Difference (95% CI) or p-value",
        "statistics": ["difference", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Treatment B vs Placebo",
        "type": "comparison",
        "description": "Difference (95% CI) or p-value",
        "statistics": ["difference", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Baseline Balance",
        "type": "text",
        "description": "Assessment of baseline balance"
      }
    ],
    "rows": [
      {
        "category": "Disease Severity",
        "parameters": [
          {
            "name": "MMSE Score",
            "paramcd": "MMSE",
            "category": "Disease Severity",
            "baseline_var": "BASE_MMSE",
            "data_type": "continuous",
            "clinical_threshold": "≤24 indicates cognitive impairment"
          },
          {
            "name": "CDR Global Score",
            "paramcd": "CDRGLOB",
            "category": "Disease Severity",
            "baseline_var": "BASE_CDRGLOB",
            "data_type": "categorical",
            "clinical_threshold": "0.5, 1.0, 2.0, 3.0 severity levels"
          },
          {
            "name": "ADAS-Cog Total Score",
            "paramcd": "ADASCOG",
            "category": "Disease Severity",
            "baseline_var": "BASE_ADASCOG",
            "data_type": "continuous",
            "clinical_threshold": "≥10 indicates moderate impairment"
          },
          {
            "name": "ADCS-ADL Total Score",
            "paramcd": "ADCSADL",
            "category": "Disease Severity",
            "baseline_var": "BASE_ADCSADL",
            "data_type": "continuous",
            "clinical_threshold": "≤50 indicates functional impairment"
          }
        ]
      },
      {
        "category": "Risk Factors",
        "parameters": [
          {
            "name": "APOE4 Carrier Status",
            "paramcd": "APOE4",
            "category": "Risk Factors",
            "baseline_var": "BASE_APOE4",
            "data_type": "categorical",
            "clinical_threshold": "Carrier vs Non-carrier"
          },
          {
            "name": "Family History of Dementia",
            "paramcd": "FAMHIST",
            "category": "Risk Factors",
            "baseline_var": "BASE_FAMHIST",
            "data_type": "categorical",
            "clinical_threshold": "Yes vs No"
          },
          {
            "name": "Previous Stroke",
            "paramcd": "STROKE",
            "category": "Risk Factors",
            "baseline_var": "BASE_STROKE",
            "data_type": "categorical",
            "clinical_threshold": "Yes vs No"
          },
          {
            "name": "Diabetes Mellitus",
            "paramcd": "DIABETES",
            "category": "Risk Factors",
            "baseline_var": "BASE_DIABETES",
            "data_type": "categorical",
            "clinical_threshold": "Yes vs No"
          },
          {
            "name": "Hypertension",
            "paramcd": "HYPERTENSION",
            "category": "Risk Factors",
            "baseline_var": "BASE_HYPERTENSION",
            "data_type": "categorical",
            "clinical_threshold": "Yes vs No"
          }
        ]
      },
      {
        "category": "Disease Duration",
        "parameters": [
          {
            "name": "Time Since Diagnosis",
            "paramcd": "DIAGNOSIS_TIME",
            "category": "Disease Duration",
            "baseline_var": "BASE_DIAGNOSIS_TIME",
            "data_type": "continuous",
            "clinical_threshold": "≤2 years vs >2 years"
          },
          {
            "name": "Symptom Duration",
            "paramcd": "SYMPTOM_DURATION",
            "category": "Disease Duration",
            "baseline_var": "BASE_SYMPTOM_DURATION",
            "data_type": "continuous",
            "clinical_threshold": "≤3 years vs >3 years"
          }
        ]
      },
      {
        "category": "Comorbidities",
        "parameters": [
          {
            "name": "Depression",
            "paramcd": "DEPRESSION",
            "category": "Comorbidities",
            "baseline_var": "BASE_DEPRESSION",
            "data_type": "categorical",
            "clinical_threshold": "Yes vs No"
          },
          {
            "name": "Anxiety",
            "paramcd": "ANXIETY",
            "category": "Comorbidities",
            "baseline_var": "BASE_ANXIETY",
            "data_type": "categorical",
            "clinical_threshold": "Yes vs No"
          },
          {
            "name": "Sleep Disorders",
            "paramcd": "SLEEP_DISORDER",
            "category": "Comorbidities",
            "baseline_var": "BASE_SLEEP_DISORDER",
            "data_type": "categorical",
            "clinical_threshold": "Yes vs No"
          },
          {
            "name": "Cardiovascular Disease",
            "paramcd": "CVD",
            "category": "Comorbidities",
            "baseline_var": "BASE_CVD",
            "data_type": "categorical",
            "clinical_threshold": "Yes vs No"
          }
        ]
      },
      {
        "category": "Functional Status",
        "parameters": [
          {
            "name": "IADL Score",
            "paramcd": "IADL",
            "category": "Functional Status",
            "baseline_var": "BASE_IADL",
            "data_type": "continuous",
            "clinical_threshold": "≤6 indicates functional impairment"
          },
          {
            "name": "Barthel Index",
            "paramcd": "BARTHEL",
            "category": "Functional Status",
            "baseline_var": "BASE_BARTHEL",
            "data_type": "continuous",
            "clinical_threshold": "≤60 indicates severe disability"
          },
          {
            "name": "Gait Speed",
            "paramcd": "GAIT_SPEED",
            "category": "Functional Status",
            "baseline_var": "BASE_GAIT_SPEED",
            "data_type": "continuous",
            "clinical_threshold": "≤0.8 m/s indicates slow gait"
          }
        ]
      }
    ],
    "footnotes": [
      "ITT Population: All randomized subjects who received at least one dose of study drug",
      "Continuous variables: Mean (SD) presented",
      "Categorical variables: n/N (%) presented",
      "Difference: Treatment group value minus placebo value",
      "95% CI: 95% confidence interval",
      "p-values from t-test for continuous variables, chi-square test for categorical variables",
      "Baseline Balance: Assessment of randomization success and group comparability",
      "Clinical thresholds: Pre-specified values for clinical significance",
      "Treatment A: High dose, Treatment B: Low dose"
    ],
    "statistical_methodology": {
      "primary_method": "Descriptive Statistics",
      "continuous_variables": "Mean, standard deviation, t-test for group comparisons",
      "categorical_variables": "Counts, percentages, chi-square test for group comparisons",
      "baseline_balance": "Assessment of randomization success using p-values and effect sizes",
      "confidence_intervals": "95% confidence intervals for group differences",
      "significance_level": 0.05,
      "confidence_level": 0.95
    }
  },
  "r_code": {
    "libraries": [
      "library(tidyverse)",
      "library(haven)",
      "library(lubridate)",
      "library(gt)",
      "library(flextable)",
      "library(broom)",
      "library(emmeans)"
    ],
    "data_preparation": [
      "# Load datasets",
      "adsl <- read_sas('data/adsl.sas7bdat')",
      "adqs <- read_sas('data/adqs.sas7bdat')",
      "",
      "# Filter for ITT population",
      "adsl_itt <- adsl %>% filter(ITTFL == 'Y')",
      "",
      "# Merge datasets",
      "analysis_data <- adqs %>%",
      "  inner_join(adsl_itt, by = 'USUBJID') %>%",
      "  filter(AVISIT == 'Baseline') %>%",
      "  mutate(",
      "    TRT01P = factor(TRT01P, levels = c('Placebo', 'Treatment B', 'Treatment A'))",
      "  )",
      "",
      "# Define baseline parameters",
      "baseline_parameters <- list(",
      "  MMSE = list(",
      "    label = 'MMSE Score',",
      "    category = 'Disease Severity',",
      "    data_type = 'continuous',",
      "    clinical_threshold = '≤24 indicates cognitive impairment'",
      "  ),",
      "  CDRGLOB = list(",
      "    label = 'CDR Global Score',",
      "    category = 'Disease Severity',",
      "    data_type = 'categorical',",
      "    clinical_threshold = '0.5, 1.0, 2.0, 3.0 severity levels'",
      "  ),",
      "  ADASCOG = list(",
      "    label = 'ADAS-Cog Total Score',",
      "    category = 'Disease Severity',",
      "    data_type = 'continuous',",
      "    clinical_threshold = '≥10 indicates moderate impairment'",
      "  ),",
      "  ADCSADL = list(",
      "    label = 'ADCS-ADL Total Score',",
      "    category = 'Disease Severity',",
      "    data_type = 'continuous',",
      "    clinical_threshold = '≤50 indicates functional impairment'",
      "  ),",
      "  APOE4 = list(",
      "    label = 'APOE4 Carrier Status',",
      "    category = 'Risk Factors',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Carrier vs Non-carrier'",
      "  ),",
      "  FAMHIST = list(",
      "    label = 'Family History of Dementia',",
      "    category = 'Risk Factors',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Yes vs No'",
      "  ),",
      "  STROKE = list(",
      "    label = 'Previous Stroke',",
      "    category = 'Risk Factors',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Yes vs No'",
      "  ),",
      "  DIABETES = list(",
      "    label = 'Diabetes Mellitus',",
      "    category = 'Risk Factors',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Yes vs No'",
      "  ),",
      "  HYPERTENSION = list(",
      "    label = 'Hypertension',",
      "    category = 'Risk Factors',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Yes vs No'",
      "  ),",
      "  DIAGNOSIS_TIME = list(",
      "    label = 'Time Since Diagnosis',",
      "    category = 'Disease Duration',",
      "    data_type = 'continuous',",
      "    clinical_threshold = '≤2 years vs >2 years'",
      "  ),",
      "  SYMPTOM_DURATION = list(",
      "    label = 'Symptom Duration',",
      "    category = 'Disease Duration',",
      "    data_type = 'continuous',",
      "    clinical_threshold = '≤3 years vs >3 years'",
      "  ),",
      "  DEPRESSION = list(",
      "    label = 'Depression',",
      "    category = 'Comorbidities',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Yes vs No'",
      "  ),",
      "  ANXIETY = list(",
      "    label = 'Anxiety',",
      "    category = 'Comorbidities',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Yes vs No'",
      "  ),",
      "  SLEEP_DISORDER = list(",
      "    label = 'Sleep Disorders',",
      "    category = 'Comorbidities',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Yes vs No'",
      "  ),",
      "  CVD = list(",
      "    label = 'Cardiovascular Disease',",
      "    category = 'Comorbidities',",
      "    data_type = 'categorical',",
      "    clinical_threshold = 'Yes vs No'",
      "  ),",
      "  IADL = list(",
      "    label = 'IADL Score',",
      "    category = 'Functional Status',",
      "    data_type = 'continuous',",
      "    clinical_threshold = '≤6 indicates functional impairment'",
      "  ),",
      "  BARTHEL = list(",
      "    label = 'Barthel Index',",
      "    category = 'Functional Status',",
      "    data_type = 'continuous',",
      "    clinical_threshold = '≤60 indicates severe disability'",
      "  ),",
      "  GAIT_SPEED = list(",
      "    label = 'Gait Speed',",
      "    category = 'Functional Status',",
      "    data_type = 'continuous',",
      "    clinical_threshold = '≤0.8 m/s indicates slow gait'",
      "  )",
      ")"
    ],
    "statistical_analysis": [
      "# Function to analyze continuous baseline variables",
      "analyze_continuous_baseline <- function(data, param_code) {",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code) %>%",
      "    filter(!is.na(AVAL))",
      "  ",
      "  # Calculate summary statistics by treatment group",
      "  summary_stats <- param_data %>%",
      "    group_by(TRT01P) %>%",
      "    summarise(",
      "      n = n(),",
      "      mean_val = mean(AVAL, na.rm = TRUE),",
      "      sd_val = sd(AVAL, na.rm = TRUE),",
      "      .groups = 'drop'",
      "    )",
      "  ",
      "  # Calculate total summary",
      "  total_summary <- param_data %>%",
      "    summarise(",
      "      n = n(),",
      "      mean_val = mean(AVAL, na.rm = TRUE),",
      "      sd_val = sd(AVAL, na.rm = TRUE),",
      "      .groups = 'drop'",
      "    ) %>%",
      "    mutate(TRT01P = 'Total')",
      "  ",
      "  # Combine treatment groups and total",
      "  all_summary <- rbind(summary_stats, total_summary)",
      "  ",
      "  # Calculate treatment differences",
      "  placebo_mean <- summary_stats %>% filter(TRT01P == 'Placebo') %>% pull(mean_val)",
      "  ",
      "  treatment_diffs <- summary_stats %>%",
      "    filter(TRT01P != 'Placebo') %>%",
      "    mutate(",
      "      difference = mean_val - placebo_mean,",
      "      # Simple CI calculation (can be improved)",
      "      pooled_sd = sqrt((sd_val^2 + (summary_stats %>% filter(TRT01P == 'Placebo') %>% pull(sd_val))^2) / 2),",
      "      se_diff = pooled_sd * sqrt(1/n + 1/(summary_stats %>% filter(TRT01P == 'Placebo') %>% pull(n))),",
      "      ci_lower = difference - 1.96 * se_diff,",
      "      ci_upper = difference + 1.96 * se_diff,",
      "      # t-test p-value",
      "      t_stat = difference / se_diff,",
      "      p_value = 2 * pt(-abs(t_stat), df = n + (summary_stats %>% filter(TRT01P == 'Placebo') %>% pull(n)) - 2)",
      "    )",
      "  ",
      "  return(list(",
      "    summary = all_summary,",
      "    differences = treatment_diffs",
      "  ))",
      "}",
      "",
      "# Function to analyze categorical baseline variables",
      "analyze_categorical_baseline <- function(data, param_code) {",
      "  param_data <- data %>%",
      "    filter(PARAMCD == param_code) %>%",
      "    filter(!is.na(AVAL))",
      "  ",
      "  # Calculate summary statistics by treatment group",
      "  summary_stats <- param_data %>%",
      "    group_by(TRT01P, AVAL) %>%",
      "    summarise(",
      "      n_category = n(),",
      "      .groups = 'drop'",
      "    ) %>%",
      "    group_by(TRT01P) %>%",
      "    mutate(",
      "      n_total = sum(n_category),",
      "      percentage = n_category / n_total * 100",
      "    ) %>%",
      "    ungroup()",
      "  ",
      "  # Calculate total summary",
      "  total_summary <- param_data %>%",
      "    group_by(AVAL) %>%",
      "    summarise(",
      "      n_category = n(),",
      "      .groups = 'drop'",
      "    ) %>%",
      "    mutate(",
      "      n_total = sum(n_category),",
      "      percentage = n_category / n_total * 100,",
      "      TRT01P = 'Total'",
      "    )",
      "  ",
      "  # Combine treatment groups and total",
      "  all_summary <- rbind(summary_stats, total_summary)",
      "  ",
      "  # Calculate treatment differences for each category",
      "  treatment_diffs <- data.frame()",
      "  ",
      "  for (category in unique(summary_stats$AVAL)) {",
      "    category_data <- summary_stats %>% filter(AVAL == category)",
      "    ",
      "    placebo_count <- category_data %>% filter(TRT01P == 'Placebo') %>% pull(n_category)",
      "    placebo_total <- category_data %>% filter(TRT01P == 'Placebo') %>% pull(n_total)",
      "    ",
      "    if (length(placebo_count) > 0) {",
      "      category_diffs <- category_data %>%",
      "        filter(TRT01P != 'Placebo') %>%",
      "        mutate(",
      "          placebo_rate = placebo_count / placebo_total,",
      "          treatment_rate = n_category / n_total,",
      "          difference = treatment_rate - placebo_rate,",
      "          # Wilson confidence interval for difference",
      "          se_diff = sqrt(treatment_rate * (1 - treatment_rate) / n_total + placebo_rate * (1 - placebo_rate) / placebo_total),",
      "          ci_lower = difference - 1.96 * se_diff,",
      "          ci_upper = difference + 1.96 * se_diff,",
      "          # Chi-square test",
      "          p_value = chisq.test(matrix(c(n_category, n_total - n_category, placebo_count, placebo_total - placebo_count), nrow = 2))$p.value,",
      "          category = category",
      "        )",
      "      ",
      "      treatment_diffs <- rbind(treatment_diffs, category_diffs)",
      "    }",
      "  }",
      "  ",
      "  return(list(",
      "    summary = all_summary,",
      "    differences = treatment_diffs",
      "  ))",
      "}",
      "",
      "# Analyze all baseline parameters",
      "baseline_results <- list()",
      "for (param in names(baseline_parameters)) {",
      "  param_info <- baseline_parameters[[param]]",
      "  ",
      "  if (param_info$data_type == 'continuous') {",
      "    baseline_results[[param]] <- analyze_continuous_baseline(analysis_data, param)",
      "  } else {",
      "    baseline_results[[param]] <- analyze_categorical_baseline(analysis_data, param)",
      "  }",
      "}"
    ],
    "table_generation": [
      "# Function to create baseline characteristics summary table",
      "create_baseline_table <- function(results, param_info) {",
      "  table_data <- data.frame()",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    info <- param_info[[param]]",
      "    ",
      "    if (info$data_type == 'continuous') {",
      "      # Continuous variable",
      "      summary <- result$summary",
      "      differences <- result$differences",
      "      ",
      "      # Get treatment group summaries",
      "      trt_a <- summary %>% filter(TRT01P == 'Treatment A')",
      "      trt_a_summary <- sprintf('%.2f (%.2f)', trt_a$mean_val, trt_a$sd_val)",
      "      ",
      "      trt_b <- summary %>% filter(TRT01P == 'Treatment B')",
      "      trt_b_summary <- sprintf('%.2f (%.2f)', trt_b$mean_val, trt_b$sd_val)",
      "      ",
      "      placebo <- summary %>% filter(TRT01P == 'Placebo')",
      "      placebo_summary <- sprintf('%.2f (%.2f)', placebo$mean_val, placebo$sd_val)",
      "      ",
      "      total <- summary %>% filter(TRT01P == 'Total')",
      "      total_summary <- sprintf('%.2f (%.2f)', total$mean_val, total$sd_val)",
      "      ",
      "      # Treatment differences",
      "      trt_a_diff <- differences %>% filter(TRT01P == 'Treatment A')",
      "      trt_a_diff_ci <- sprintf('%.3f (%.3f, %.3f)', trt_a_diff$difference, trt_a_diff$ci_lower, trt_a_diff$ci_upper)",
      "      trt_a_p <- sprintf('%.4f', trt_a_diff$p_value)",
      "      ",
      "      trt_b_diff <- differences %>% filter(TRT01P == 'Treatment B')",
      "      trt_b_diff_ci <- sprintf('%.3f (%.3f, %.3f)', trt_b_diff$difference, trt_b_diff$ci_lower, trt_b_diff$ci_upper)",
      "      trt_b_p <- sprintf('%.4f', trt_b_diff$p_value)",
      "      ",
      "      # Baseline balance assessment",
      "      baseline_balance <- ifelse(max(differences$p_value) < 0.05, 'Imbalanced', 'Balanced')",
      "      ",
      "      # Add to table data",
      "      row_data <- data.frame(",
      "        Parameter = info$label,",
      "        Category = info$category,",
      "        Treatment_A = trt_a_summary,",
      "        Treatment_B = trt_b_summary,",
      "        Placebo = placebo_summary,",
      "        Total = total_summary,",
      "        Treatment_A_vs_Placebo = trt_a_diff_ci,",
      "        Treatment_B_vs_Placebo = trt_b_diff_ci,",
      "        Baseline_Balance = baseline_balance",
      "      )",
      "      ",
      "      table_data <- rbind(table_data, row_data)",
      "    } else {",
      "      # Categorical variable",
      "      summary <- result$summary",
      "      differences <- result$differences",
      "      ",
      "      # Get treatment group summaries for each category",
      "      for (category in unique(summary$AVAL)) {",
      "        category_summary <- summary %>% filter(AVAL == category)",
      "        ",
      "        trt_a <- category_summary %>% filter(TRT01P == 'Treatment A')",
      "        trt_a_summary <- ifelse(nrow(trt_a) > 0, sprintf('%d/%d (%.1f%%)', trt_a$n_category, trt_a$n_total, trt_a$percentage), '0/0 (0.0%)')",
      "        ",
      "        trt_b <- category_summary %>% filter(TRT01P == 'Treatment B')",
      "        trt_b_summary <- ifelse(nrow(trt_b) > 0, sprintf('%d/%d (%.1f%%)', trt_b$n_category, trt_b$n_total, trt_b$percentage), '0/0 (0.0%)')",
      "        ",
      "        placebo <- category_summary %>% filter(TRT01P == 'Placebo')",
      "        placebo_summary <- ifelse(nrow(placebo) > 0, sprintf('%d/%d (%.1f%%)', placebo$n_category, placebo$n_total, placebo$percentage), '0/0 (0.0%)')",
      "        ",
      "        total <- category_summary %>% filter(TRT01P == 'Total')",
      "        total_summary <- ifelse(nrow(total) > 0, sprintf('%d/%d (%.1f%%)', total$n_category, total$n_total, total$percentage), '0/0 (0.0%)')",
      "        ",
      "        # Treatment differences",
      "        category_diffs <- differences %>% filter(category == category)",
      "        ",
      "        trt_a_diff <- category_diffs %>% filter(TRT01P == 'Treatment A')",
      "        trt_a_diff_ci <- ifelse(nrow(trt_a_diff) > 0, sprintf('%.3f (%.3f, %.3f)', trt_a_diff$difference, trt_a_diff$ci_lower, trt_a_diff$ci_upper), 'N/A')",
      "        trt_a_p <- ifelse(nrow(trt_a_diff) > 0, sprintf('%.4f', trt_a_diff$p_value), 'N/A')",
      "        ",
      "        trt_b_diff <- category_diffs %>% filter(TRT01P == 'Treatment B')",
      "        trt_b_diff_ci <- ifelse(nrow(trt_b_diff) > 0, sprintf('%.3f (%.3f, %.3f)', trt_b_diff$difference, trt_b_diff$ci_lower, trt_b_diff$ci_upper), 'N/A')",
      "        trt_b_p <- ifelse(nrow(trt_b_diff) > 0, sprintf('%.4f', trt_b_diff$p_value), 'N/A')",
      "        ",
      "        # Baseline balance assessment",
      "        baseline_balance <- ifelse(any(category_diffs$p_value < 0.05, na.rm = TRUE), 'Imbalanced', 'Balanced')",
      "        ",
      "        # Add to table data",
      "        row_data <- data.frame(",
      "          Parameter = paste(info$label, '-', category),",
      "          Category = info$category,",
      "          Treatment_A = trt_a_summary,",
      "          Treatment_B = trt_b_summary,",
      "          Placebo = placebo_summary,",
      "          Total = total_summary,",
      "          Treatment_A_vs_Placebo = trt_a_diff_ci,",
      "          Treatment_B_vs_Placebo = trt_b_diff_ci,",
      "          Baseline_Balance = baseline_balance",
      "        )",
      "        ",
      "        table_data <- rbind(table_data, row_data)",
      "      }",
      "    }",
      "  }",
      "  ",
      "  return(table_data)",
      "}",
      "",
      "# Generate table",
      "baseline_table_data <- create_baseline_table(baseline_results, baseline_parameters)",
      "",
      "# Create formatted table",
      "baseline_characteristics_table <- baseline_table_data %>%",
      "  gt() %>%",
      "  tab_header(",
      "    title = 'Table 14.1.3 Baseline Characteristics',",
      "    subtitle = 'Disease-Specific Baseline Measures by Treatment Group'",
      "  ) %>%",
      "  cols_label(",
      "    Parameter = 'Parameter',",
      "    Category = 'Category',",
      "    Treatment_A = 'Treatment A<br>n/N (%) or Mean (SD)',",
      "    Treatment_B = 'Treatment B<br>n/N (%) or Mean (SD)',",
      "    Placebo = 'Placebo<br>n/N (%) or Mean (SD)',",
      "    Total = 'Total<br>n/N (%) or Mean (SD)',",
      "    Treatment_A_vs_Placebo = 'Treatment A vs Placebo<br>Difference (95% CI)',",
      "    Treatment_B_vs_Placebo = 'Treatment B vs Placebo<br>Difference (95% CI)',",
      "    Baseline_Balance = 'Baseline Balance'",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_column_labels()",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_borders(",
      "      sides = 'bottom',",
      "      weight = px(2)",
      "    ),",
      "    locations = cells_body(",
      "      rows = c(4, 9, 11, 15, 18)",
      "    )",
      "  ) %>%",
      "  fmt_markdown(columns = everything()) %>%",
      "  tab_footnote(",
      "    footnote = 'ITT Population: All randomized subjects who received at least one dose of study drug',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Continuous variables: Mean (SD) presented',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Categorical variables: n/N (%) presented',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Baseline Balance: Assessment of randomization success and group comparability',",
      "    locations = cells_title()",
      "  )",
      "",
      "# Display table",
      "baseline_characteristics_table"
    ],
    "quality_checks": [
      "# Data validation checks",
      "data_validation <- analysis_data %>%",
      "  group_by(TRT01P, PARAMCD) %>%",
      "  summarise(",
      "    n_subjects = n_distinct(USUBJID),",
      "    missing_data = sum(is.na(AVAL)),",
      "    missing_rate = missing_data / n_subjects * 100,",
      "    .groups = 'drop'",
      "  ) %>%",
      "  filter(missing_rate > 10)",
      "",
      "# Statistical validation",
      "statistical_validation <- list()",
      "for (param in names(baseline_results)) {",
      "  result <- baseline_results[[param]]",
      "  param_info <- baseline_parameters[[param]]",
      "  ",
      "  if (param_info$data_type == 'continuous') {",
      "    # Check for sufficient sample sizes",
      "    sample_sizes <- result$summary %>%",
      "      filter(TRT01P != 'Total') %>%",
      "      summarise(",
      "        min_n = min(n),",
      "        max_n = max(n),",
      "        .groups = 'drop'",
      "      )",
      "    ",
      "    # Check for normality",
      "    param_data <- analysis_data %>% filter(PARAMCD == param)",
      "    normality_test <- shapiro.test(param_data$AVAL)",
      "    ",
      "    statistical_validation[[param]] <- list(",
      "      sample_sizes = sample_sizes,",
      "      normality_p_value = normality_test$p.value,",
      "      is_normal = normality_test$p.value > 0.05",
      "    )",
      "  } else {",
      "    # Check for sufficient sample sizes",
      "    sample_sizes <- result$summary %>%",
      "      filter(TRT01P != 'Total') %>%",
      "      summarise(",
      "        min_n = min(n_total),",
      "        max_n = max(n_total),",
      "        .groups = 'drop'",
      "      )",
      "    ",
      "    # Check for expected cell counts",
      "    expected_counts <- result$summary %>%",
      "      filter(TRT01P != 'Total') %>%",
      "      group_by(AVAL) %>%",
      "      summarise(",
      "        total_category = sum(n_category),",
      "        .groups = 'drop'",
      "      ) %>%",
      "      mutate(",
      "        expected_count = total_category / 3,  # Assuming 3 treatment groups",
      "        chi_square_valid = expected_count >= 5",
      "      )",
      "    ",
      "    statistical_validation[[param]] <- list(",
      "      sample_sizes = sample_sizes,",
      "      expected_counts = expected_counts,",
      "      chi_square_valid = all(expected_counts$chi_square_valid)",
      "    )",
      "  }",
      "}",
      "",
      "# Clinical validation",
      "clinical_validation <- list()",
      "for (param in names(baseline_results)) {",
      "  result <- baseline_results[[param]]",
      "  param_info <- baseline_parameters[[param]]",
      "  ",
      "  # Check for clinically significant differences",
      "  if (param_info$data_type == 'continuous') {",
      "    differences <- result$differences",
      "    clinically_significant_diffs <- differences %>%",
      "      filter(abs(difference) >= 0.5) %>%  # Effect size threshold",
      "      nrow()",
      "  } else {",
      "    differences <- result$differences",
      "    clinically_significant_diffs <- differences %>%",
      "      filter(abs(difference) >= 0.1) %>%  # 10% difference threshold",
      "      nrow()",
      "  }",
      "  ",
      "  clinical_validation[[param]] <- list(",
      "    clinically_significant_count = clinically_significant_diffs,",
      "    clinical_threshold = param_info$clinical_threshold",
      "  )",
      "}",
      "",
      "# Baseline balance validation",
      "baseline_balance_validation <- list()",
      "for (param in names(baseline_results)) {",
      "  result <- baseline_results[[param]]",
      "  ",
      "  # Check for baseline imbalance",
      "  if ('differences' %in% names(result)) {",
      "    differences <- result$differences",
      "    ",
      "    # Count significant differences",
      "    significant_diffs <- differences %>%",
      "      filter(p_value < 0.05) %>%",
      "      nrow()",
      "    ",
      "    # Calculate overall balance assessment",
      "    overall_balance <- ifelse(significant_diffs > 0, 'Imbalanced', 'Balanced')",
      "    ",
      "    baseline_balance_validation[[param]] <- list(",
      "      significant_differences = significant_diffs,",
      "      overall_balance = overall_balance,",
      "      randomization_success = overall_balance == 'Balanced'",
      "    )",
      "  }",
      "}",
      "",
      "# Print validation results",
      "cat('Data Validation:\\n')",
      "print(data_validation)",
      "cat('\\nStatistical Validation:\\n')",
      "print(statistical_validation)",
      "cat('\\nClinical Validation:\\n')",
      "print(clinical_validation)",
      "cat('\\nBaseline Balance Validation:\\n')",
      "print(baseline_balance_validation)"
    ],
    "export_functions": [
      "# Export baseline characteristics analysis results",
      "export_baseline_results <- function(table_data, results, param_info, output_dir = 'output') {",
      "  # Create output directory",
      "  if (!dir.exists(output_dir)) {",
      "    dir.create(output_dir, recursive = TRUE)",
      "  }",
      "  ",
      "  # Export HTML table",
      "  html_file <- file.path(output_dir, 'baseline_characteristics_table.html')",
      "  baseline_characteristics_table %>%",
      "    gtsave(html_file)",
      "  ",
      "  # Export RTF table",
      "  rtf_file <- file.path(output_dir, 'baseline_characteristics_table.rtf')",
      "  baseline_table_data %>%",
      "    flextable() %>%",
      "    set_header_labels(",
      "      Parameter = 'Parameter',",
      "      Category = 'Category',",
      "      Treatment_A = 'Treatment A\\nn/N (%) or Mean (SD)',",
      "      Treatment_B = 'Treatment B\\nn/N (%) or Mean (SD)',",
      "      Placebo = 'Placebo\\nn/N (%) or Mean (SD)',",
      "      Total = 'Total\\nn/N (%) or Mean (SD)',",
      "      Treatment_A_vs_Placebo = 'Treatment A vs Placebo\\nDifference (95% CI)',",
      "      Treatment_B_vs_Placebo = 'Treatment B vs Placebo\\nDifference (95% CI)',",
      "      Baseline_Balance = 'Baseline Balance'",
      "    ) %>%",
      "    autofit() %>%",
      "    save_as_rtf(rtf_file)",
      "  ",
      "  # Export results summary",
      "  summary_file <- file.path(output_dir, 'baseline_characteristics_summary.txt')",
      "  sink(summary_file)",
      "  cat('Baseline Characteristics Analysis Summary\\n')",
      "  cat('=====================================\\n\\n')",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    info <- param_info[[param]]",
      "    ",
      "    cat(sprintf('Parameter: %s (%s)\\n', info$label, info$data_type))",
      "    ",
      "    # Print summary statistics",
      "    cat('Summary Statistics:\\n')",
      "    print(result$summary)",
      "    ",
      "    # Print treatment differences",
      "    if ('differences' %in% names(result)) {",
      "      cat('Treatment Differences:\\n')",
      "      print(result$differences)",
      "    }",
      "    ",
      "    cat('\\n')",
      "  }",
      "  ",
      "  cat('Statistical Method: Descriptive Statistics\\n')",
      "  cat('Population: Intent-to-Treat\\n')",
      "  cat('Significance Level: 0.05\\n')",
      "  cat('Baseline Balance: Assessment of randomization success\\n')",
      "  sink()",
      "  ",
      "  cat('Exported files to:', output_dir, '\\n')",
      "}",
      "",
      "# Export results",
      "export_baseline_results(baseline_table_data, baseline_results, baseline_parameters)"
    ]
  },
  "keywords": [
    "baseline characteristics",
    "disease severity",
    "risk factors",
    "disease duration",
    "comorbidities",
    "functional status",
    "baseline balance",
    "randomization",
    "ITT population",
    "FDA compliance",
    "ICH E3",
    "clinical trial",
    "statistical analysis"
  ],
  "metadata": {
    "created_date": "2024-08-06",
    "version": "1.0",
    "author": "Jaime Yan",
    "description": "FDA-compliant baseline characteristics template with detailed structure and complete R code",
    "references": [
      "ICH E3 Guidelines Section 14.1.3",
      "FDA Guidance for Industry: E3 Structure and Content of Clinical Study Reports",
      "CDISC ADaM Implementation Guide",
      "Baseline Characteristics Guidelines",
      "Statistical Analysis Plan Template"
    ],
    "data_requirements": [
      "ADSL dataset with ITTFL flag",
      "ADQS dataset with baseline variables",
      "Baseline variables: MMSE, CDRGLOB, ADASCOG, ADCSADL, APOE4, FAMHIST, STROKE, DIABETES, HYPERTENSION, DIAGNOSIS_TIME, SYMPTOM_DURATION, DEPRESSION, ANXIETY, SLEEP_DISORDER, CVD, IADL, BARTHEL, GAIT_SPEED",
      "Visit information: AVISIT (Baseline)",
      "Treatment assignment: TRT01P",
      "Clinical thresholds for disease severity assessment"
    ],
    "statistical_methods": [
      "Descriptive statistics for continuous and categorical variables",
      "Treatment group comparisons with confidence intervals",
      "t-test for continuous variables, chi-square test for categorical variables",
      "Baseline balance assessment using p-values and effect sizes",
      "Clinical significance assessment using pre-specified thresholds"
    ]
  }
} 