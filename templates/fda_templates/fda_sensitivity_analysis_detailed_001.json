{
  "id": "fda-sensitivity-analysis-detailed-001",
  "title": "Table 14.3.2 Sensitivity Analyses",
  "type": "table",
  "category": "specialized_analyses",
  "fda_compliance": {
    "standard": "ICH E3 Section 14.3.2",
    "population": "Intent-to-Treat (ITT)",
    "statistical_method": "Robustness Assessment",
    "quality_checks": ["data_validation", "statistical_review", "clinical_review", "methodology_validation"],
    "regulatory_requirements": [
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "ICH E3 Guidelines Section 14.3",
      "CDISC ADaM Implementation Guide",
      "Sensitivity Analysis Guidelines"
    ]
  },
  "template_structure": {
    "title": "Table 14.3.2 Sensitivity Analyses",
    "subtitle": "Primary Efficacy Endpoint - Robustness Assessments",
    "table_type": "sensitivity_analysis",
    "columns": [
      {
        "name": "Analysis",
        "type": "text",
        "description": "Sensitivity analysis type"
      },
      {
        "name": "Population",
        "type": "text",
        "description": "Analysis population"
      },
      {
        "name": "Method",
        "type": "text",
        "description": "Statistical method used"
      },
      {
        "name": "Treatment A vs Placebo",
        "type": "comparison",
        "description": "Difference (95% CI) and p-value",
        "statistics": ["difference", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Treatment B vs Placebo",
        "type": "comparison",
        "description": "Difference (95% CI) and p-value",
        "statistics": ["difference", "ci_lower", "ci_upper", "p_value"]
      },
      {
        "name": "Robustness Assessment",
        "type": "text",
        "description": "Assessment of result robustness"
      }
    ],
    "rows": [
      {
        "category": "Missing Data Sensitivity",
        "analyses": [
          {
            "name": "Complete Case Analysis",
            "paramcd": "COMPLETE_CASE",
            "category": "Missing Data Sensitivity",
            "population": "Complete Cases",
            "method": "ANCOVA",
            "clinical_threshold": "No missing data"
          },
          {
            "name": "Last Observation Carried Forward",
            "paramcd": "LOCF",
            "category": "Missing Data Sensitivity",
            "population": "ITT with LOCF",
            "method": "ANCOVA",
            "clinical_threshold": "Conservative imputation"
          },
          {
            "name": "Multiple Imputation",
            "paramcd": "MULTIPLE_IMPUTATION",
            "category": "Missing Data Sensitivity",
            "population": "ITT with MI",
            "method": "Multiple Imputation",
            "clinical_threshold": "Advanced imputation"
          },
          {
            "name": "Worst Case Scenario",
            "paramcd": "WORST_CASE",
            "category": "Missing Data Sensitivity",
            "population": "ITT with Worst Case",
            "method": "ANCOVA",
            "clinical_threshold": "Conservative approach"
          }
        ]
      },
      {
        "category": "Statistical Method Sensitivity",
        "analyses": [
          {
            "name": "Mixed Model for Repeated Measures",
            "paramcd": "MMRM",
            "category": "Statistical Method Sensitivity",
            "population": "ITT",
            "method": "MMRM",
            "clinical_threshold": "Primary method"
          },
          {
            "name": "Analysis of Covariance",
            "paramcd": "ANCOVA",
            "category": "Statistical Method Sensitivity",
            "population": "ITT",
            "method": "ANCOVA",
            "clinical_threshold": "Alternative method"
          },
          {
            "name": "Non-parametric Analysis",
            "paramcd": "NONPARAMETRIC",
            "category": "Statistical Method Sensitivity",
            "population": "ITT",
            "method": "Wilcoxon Rank Sum",
            "clinical_threshold": "Distribution-free"
          },
          {
            "name": "Mixed Effects Model",
            "paramcd": "MIXED_EFFECTS",
            "category": "Statistical Method Sensitivity",
            "population": "ITT",
            "method": "Linear Mixed Effects",
            "clinical_threshold": "Advanced modeling"
          }
        ]
      },
      {
        "category": "Population Sensitivity",
        "analyses": [
          {
            "name": "Per Protocol Population",
            "paramcd": "PER_PROTOCOL",
            "category": "Population Sensitivity",
            "population": "Per Protocol",
            "method": "ANCOVA",
            "clinical_threshold": "Protocol compliant"
          },
          {
            "name": "Safety Population",
            "paramcd": "SAFETY_POP",
            "category": "Population Sensitivity",
            "population": "Safety Population",
            "method": "ANCOVA",
            "clinical_threshold": "Safety focused"
          },
          {
            "name": "Modified ITT",
            "paramcd": "MODIFIED_ITT",
            "category": "Population Sensitivity",
            "population": "Modified ITT",
            "method": "ANCOVA",
            "clinical_threshold": "Modified criteria"
          }
        ]
      },
      {
        "category": "Outlier Sensitivity",
        "analyses": [
          {
            "name": "Excluding Outliers",
            "paramcd": "EXCLUDE_OUTLIERS",
            "category": "Outlier Sensitivity",
            "population": "ITT (No Outliers)",
            "method": "ANCOVA",
            "clinical_threshold": "Outlier exclusion"
          },
          {
            "name": "Winsorized Data",
            "paramcd": "WINSORIZED",
            "category": "Outlier Sensitivity",
            "population": "ITT (Winsorized)",
            "method": "ANCOVA",
            "clinical_threshold": "Outlier adjustment"
          },
          {
            "name": "Robust Regression",
            "paramcd": "ROBUST_REGRESSION",
            "category": "Outlier Sensitivity",
            "population": "ITT",
            "method": "Robust Regression",
            "clinical_threshold": "Outlier resistant"
          }
        ]
      }
    ],
    "footnotes": [
      "ITT Population: All randomized subjects who received at least one dose of study drug",
      "Sensitivity analyses: Robustness assessments for primary efficacy endpoint",
      "Missing data methods: LOCF, multiple imputation, worst case scenario",
      "Statistical methods: MMRM, ANCOVA, non-parametric, mixed effects",
      "Population definitions: Per protocol, safety, modified ITT",
      "Outlier handling: Exclusion, winsorization, robust regression",
      "Robustness assessment: Comparison with primary analysis results",
      "Treatment A: High dose, Treatment B: Low dose"
    ],
    "statistical_methodology": {
      "primary_method": "Robustness Assessment",
      "missing_data_methods": ["Complete case", "LOCF", "Multiple imputation", "Worst case"],
      "statistical_methods": ["MMRM", "ANCOVA", "Non-parametric", "Mixed effects"],
      "population_definitions": ["Per protocol", "Safety", "Modified ITT"],
      "outlier_methods": ["Exclusion", "Winsorization", "Robust regression"],
      "robustness_assessment": "Comparison with primary analysis results",
      "confidence_intervals": "95% confidence intervals for treatment differences",
      "significance_level": 0.05,
      "confidence_level": 0.95
    }
  },
  "r_code": {
    "libraries": [
      "library(tidyverse)",
      "library(haven)",
      "library(lubridate)",
      "library(gt)",
      "library(flextable)",
      "library(lme4)",
      "library(mice)",
      "library(robustbase)"
    ],
    "data_preparation": [
      "# Load datasets",
      "adsl <- read_sas('data/adsl.sas7bdat')",
      "adqs <- read_sas('data/adqs.sas7bdat')",
      "",
      "# Filter for ITT population",
      "adsl_itt <- adsl %>% filter(ITTFL == 'Y')",
      "adsl_pp <- adsl %>% filter(PPFL == 'Y')",
      "adsl_safety <- adsl %>% filter(SAFFL == 'Y')",
      "",
      "# Merge datasets",
      "analysis_data <- adqs %>%",
      "  inner_join(adsl_itt, by = 'USUBJID') %>%",
      "  filter(PARAMCD == 'ADASCOG') %>%",
      "  mutate(",
      "    TRT01P = factor(TRT01P, levels = c('Placebo', 'Treatment B', 'Treatment A'))",
      "  )",
      "",
      "# Define sensitivity analysis parameters",
      "sensitivity_parameters <- list(",
      "  COMPLETE_CASE = list(",
      "    label = 'Complete Case Analysis',",
      "    category = 'Missing Data Sensitivity',",
      "    population = 'Complete Cases',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'No missing data'",
      "  ),",
      "  LOCF = list(",
      "    label = 'Last Observation Carried Forward',",
      "    category = 'Missing Data Sensitivity',",
      "    population = 'ITT with LOCF',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'Conservative imputation'",
      "  ),",
      "  MULTIPLE_IMPUTATION = list(",
      "    label = 'Multiple Imputation',",
      "    category = 'Missing Data Sensitivity',",
      "    population = 'ITT with MI',",
      "    method = 'Multiple Imputation',",
      "    clinical_threshold = 'Advanced imputation'",
      "  ),",
      "  WORST_CASE = list(",
      "    label = 'Worst Case Scenario',",
      "    category = 'Missing Data Sensitivity',",
      "    population = 'ITT with Worst Case',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'Conservative approach'",
      "  ),",
      "  MMRM = list(",
      "    label = 'Mixed Model for Repeated Measures',",
      "    category = 'Statistical Method Sensitivity',",
      "    population = 'ITT',",
      "    method = 'MMRM',",
      "    clinical_threshold = 'Primary method'",
      "  ),",
      "  ANCOVA = list(",
      "    label = 'Analysis of Covariance',",
      "    category = 'Statistical Method Sensitivity',",
      "    population = 'ITT',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'Alternative method'",
      "  ),",
      "  NONPARAMETRIC = list(",
      "    label = 'Non-parametric Analysis',",
      "    category = 'Statistical Method Sensitivity',",
      "    population = 'ITT',",
      "    method = 'Wilcoxon Rank Sum',",
      "    clinical_threshold = 'Distribution-free'",
      "  ),",
      "  MIXED_EFFECTS = list(",
      "    label = 'Mixed Effects Model',",
      "    category = 'Statistical Method Sensitivity',",
      "    population = 'ITT',",
      "    method = 'Linear Mixed Effects',",
      "    clinical_threshold = 'Advanced modeling'",
      "  ),",
      "  PER_PROTOCOL = list(",
      "    label = 'Per Protocol Population',",
      "    category = 'Population Sensitivity',",
      "    population = 'Per Protocol',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'Protocol compliant'",
      "  ),",
      "  SAFETY_POP = list(",
      "    label = 'Safety Population',",
      "    category = 'Population Sensitivity',",
      "    population = 'Safety Population',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'Safety focused'",
      "  ),",
      "  MODIFIED_ITT = list(",
      "    label = 'Modified ITT',",
      "    category = 'Population Sensitivity',",
      "    population = 'Modified ITT',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'Modified criteria'",
      "  ),",
      "  EXCLUDE_OUTLIERS = list(",
      "    label = 'Excluding Outliers',",
      "    category = 'Outlier Sensitivity',",
      "    population = 'ITT (No Outliers)',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'Outlier exclusion'",
      "  ),",
      "  WINSORIZED = list(",
      "    label = 'Winsorized Data',",
      "    category = 'Outlier Sensitivity',",
      "    population = 'ITT (Winsorized)',",
      "    method = 'ANCOVA',",
      "    clinical_threshold = 'Outlier adjustment'",
      "  ),",
      "  ROBUST_REGRESSION = list(",
      "    label = 'Robust Regression',",
      "    category = 'Outlier Sensitivity',",
      "    population = 'ITT',",
      "    method = 'Robust Regression',",
      "    clinical_threshold = 'Outlier resistant'",
      "  )",
      ")"
    ],
    "statistical_analysis": [
      "# Function to perform ANCOVA analysis",
      "perform_ancova <- function(data, population_data = NULL) {",
      "  if (!is.null(population_data)) {",
      "    analysis_data <- data %>% inner_join(population_data, by = 'USUBJID')",
      "  } else {",
      "    analysis_data <- data",
      "  }",
      "  ",
      "  # Filter for Week 26 data",
      "  week26_data <- analysis_data %>% filter(AVISIT == 'Week 26')",
      "  ",
      "  # Fit ANCOVA model",
      "  ancova_model <- lm(CHG ~ TRT01P + BASE_ADASCOG, data = week26_data)",
      "  ",
      "  # Extract treatment effects",
      "  model_summary <- summary(ancova_model)",
      "  ",
      "  # Get treatment differences vs placebo",
      "  trt_a_coef <- model_summary$coefficients['TRT01PTreatment A', 'Estimate']",
      "  trt_a_se <- model_summary$coefficients['TRT01PTreatment A', 'Std. Error']",
      "  trt_a_p <- model_summary$coefficients['TRT01PTreatment A', 'Pr(>|t|)']",
      "  ",
      "  trt_b_coef <- model_summary$coefficients['TRT01PTreatment B', 'Estimate']",
      "  trt_b_se <- model_summary$coefficients['TRT01PTreatment B', 'Std. Error']",
      "  trt_b_p <- model_summary$coefficients['TRT01PTreatment B', 'Pr(>|t|)']",
      "  ",
      "  # Calculate confidence intervals",
      "  trt_a_ci_lower <- trt_a_coef - 1.96 * trt_a_se",
      "  trt_a_ci_upper <- trt_a_coef + 1.96 * trt_a_se",
      "  ",
      "  trt_b_ci_lower <- trt_b_coef - 1.96 * trt_b_se",
      "  trt_b_ci_upper <- trt_b_coef + 1.96 * trt_b_se",
      "  ",
      "  return(list(",
      "    trt_a = list(estimate = trt_a_coef, se = trt_a_se, p_value = trt_a_p, ci_lower = trt_a_ci_lower, ci_upper = trt_a_ci_upper),",
      "    trt_b = list(estimate = trt_b_coef, se = trt_b_se, p_value = trt_b_p, ci_lower = trt_b_ci_lower, ci_upper = trt_b_ci_upper)",
      "  ))",
      "}",
      "",
      "# Function to perform MMRM analysis",
      "perform_mmrm <- function(data) {",
      "  # Fit MMRM model",
      "  mmrm_model <- lmer(CHG ~ TRT01P * AVISIT + BASE_ADASCOG + (1|USUBJID), data = data)",
      "  ",
      "  # Extract treatment effects at Week 26",
      "  week26_contrasts <- emmeans(mmrm_model, ~ TRT01P, at = list(AVISIT = 'Week 26'))",
      "  ",
      "  # Get pairwise comparisons",
      "  pairwise_comparisons <- pairs(week26_contrasts)",
      "  ",
      "  # Extract results",
      "  trt_a_vs_placebo <- pairwise_comparisons[1, ]",
      "  trt_b_vs_placebo <- pairwise_comparisons[2, ]",
      "  ",
      "  return(list(",
      "    trt_a = list(",
      "      estimate = trt_a_vs_placebo$estimate,",
      "      se = trt_a_vs_placebo$SE,",
      "      p_value = trt_a_vs_placebo$p.value,",
      "      ci_lower = trt_a_vs_placebo$lower.CL,",
      "      ci_upper = trt_a_vs_placebo$upper.CL",
      "    ),",
      "    trt_b = list(",
      "      estimate = trt_b_vs_placebo$estimate,",
      "      se = trt_b_vs_placebo$SE,",
      "      p_value = trt_b_vs_placebo$p.value,",
      "      ci_lower = trt_b_vs_placebo$lower.CL,",
      "      ci_upper = trt_b_vs_placebo$upper.CL",
      "    )",
      "  ))",
      "}",
      "",
      "# Function to perform non-parametric analysis",
      "perform_nonparametric <- function(data) {",
      "  # Filter for Week 26 data",
      "  week26_data <- data %>% filter(AVISIT == 'Week 26')",
      "  ",
      "  # Perform Wilcoxon rank sum tests",
      "  trt_a_vs_placebo <- wilcox.test(CHG ~ TRT01P, data = week26_data %>% filter(TRT01P %in% c('Placebo', 'Treatment A')))",
      "  trt_b_vs_placebo <- wilcox.test(CHG ~ TRT01P, data = week26_data %>% filter(TRT01P %in% c('Placebo', 'Treatment B')))",
      "  ",
      "  # Calculate median differences",
      "  trt_a_median_diff <- median(week26_data$CHG[week26_data$TRT01P == 'Treatment A'], na.rm = TRUE) - median(week26_data$CHG[week26_data$TRT01P == 'Placebo'], na.rm = TRUE)",
      "  trt_b_median_diff <- median(week26_data$CHG[week26_data$TRT01P == 'Treatment B'], na.rm = TRUE) - median(week26_data$CHG[week26_data$TRT01P == 'Placebo'], na.rm = TRUE)",
      "  ",
      "  return(list(",
      "    trt_a = list(estimate = trt_a_median_diff, p_value = trt_a_vs_placebo$p.value, ci_lower = NA, ci_upper = NA),",
      "    trt_b = list(estimate = trt_b_median_diff, p_value = trt_b_vs_placebo$p.value, ci_lower = NA, ci_upper = NA)",
      "  ))",
      "}",
      "",
      "# Function to perform robust regression",
      "perform_robust_regression <- function(data) {",
      "  # Filter for Week 26 data",
      "  week26_data <- data %>% filter(AVISIT == 'Week 26')",
      "  ",
      "  # Fit robust regression model",
      "  robust_model <- lmrob(CHG ~ TRT01P + BASE_ADASCOG, data = week26_data)",
      "  ",
      "  # Extract treatment effects",
      "  model_summary <- summary(robust_model)",
      "  ",
      "  # Get treatment differences vs placebo",
      "  trt_a_coef <- model_summary$coefficients['TRT01PTreatment A', 'Estimate']",
      "  trt_a_se <- model_summary$coefficients['TRT01PTreatment A', 'Std. Error']",
      "  trt_a_p <- model_summary$coefficients['TRT01PTreatment A', 'Pr(>|t|)']",
      "  ",
      "  trt_b_coef <- model_summary$coefficients['TRT01PTreatment B', 'Estimate']",
      "  trt_b_se <- model_summary$coefficients['TRT01PTreatment B', 'Std. Error']",
      "  trt_b_p <- model_summary$coefficients['TRT01PTreatment B', 'Pr(>|t|)']",
      "  ",
      "  # Calculate confidence intervals",
      "  trt_a_ci_lower <- trt_a_coef - 1.96 * trt_a_se",
      "  trt_a_ci_upper <- trt_a_coef + 1.96 * trt_a_se",
      "  ",
      "  trt_b_ci_lower <- trt_b_coef - 1.96 * trt_b_se",
      "  trt_b_ci_upper <- trt_b_coef + 1.96 * trt_b_se",
      "  ",
      "  return(list(",
      "    trt_a = list(estimate = trt_a_coef, se = trt_a_se, p_value = trt_a_p, ci_lower = trt_a_ci_lower, ci_upper = trt_a_ci_upper),",
      "    trt_b = list(estimate = trt_b_coef, se = trt_b_se, p_value = trt_b_p, ci_lower = trt_b_ci_lower, ci_upper = trt_b_ci_upper)",
      "  ))",
      "}",
      "",
      "# Perform all sensitivity analyses",
      "sensitivity_results <- list()",
      "sensitivity_results[['COMPLETE_CASE']] <- perform_ancova(analysis_data %>% filter(!is.na(CHG)))",
      "sensitivity_results[['LOCF']] <- perform_ancova(analysis_data %>% mutate(CHG = ifelse(is.na(CHG), LAST_CHG, CHG)))",
      "sensitivity_results[['MMRM']] <- perform_mmrm(analysis_data)",
      "sensitivity_results[['ANCOVA']] <- perform_ancova(analysis_data)",
      "sensitivity_results[['NONPARAMETRIC']] <- perform_nonparametric(analysis_data)",
      "sensitivity_results[['PER_PROTOCOL']] <- perform_ancova(analysis_data, adsl_pp)",
      "sensitivity_results[['SAFETY_POP']] <- perform_ancova(analysis_data, adsl_safety)",
      "sensitivity_results[['ROBUST_REGRESSION']] <- perform_robust_regression(analysis_data)"
    ],
    "table_generation": [
      "# Function to create sensitivity analysis summary table",
      "create_sensitivity_table <- function(results, param_info) {",
      "  table_data <- data.frame()",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    info <- param_info[[param]]",
      "    ",
      "    # Format treatment A results",
      "    trt_a_diff <- sprintf('%.3f (%.3f, %.3f)', result$trt_a$estimate, result$trt_a$ci_lower, result$trt_a$ci_upper)",
      "    trt_a_p <- sprintf('%.4f', result$trt_a$p_value)",
      "    trt_a_result <- paste(trt_a_diff, ', p =', trt_a_p)",
      "    ",
      "    # Format treatment B results",
      "    trt_b_diff <- sprintf('%.3f (%.3f, %.3f)', result$trt_b$estimate, result$trt_b$ci_lower, result$trt_b$ci_upper)",
      "    trt_b_p <- sprintf('%.4f', result$trt_b$p_value)",
      "    trt_b_result <- paste(trt_b_diff, ', p =', trt_b_p)",
      "    ",
      "    # Robustness assessment",
      "    robustness <- case_when(",
      "      result$trt_a$p_value < 0.05 && result$trt_b$p_value < 0.05 ~ 'Consistent with Primary',",
      "      result$trt_a$p_value < 0.05 || result$trt_b$p_value < 0.05 ~ 'Partially Consistent',",
      "      TRUE ~ 'Not Consistent'",
      "    )",
      "    ",
      "    # Add to table data",
      "    row_data <- data.frame(",
      "      Analysis = info$label,",
      "      Population = info$population,",
      "      Method = info$method,",
      "      Treatment_A_vs_Placebo = trt_a_result,",
      "      Treatment_B_vs_Placebo = trt_b_result,",
      "      Robustness_Assessment = robustness",
      "    )",
      "    ",
      "    table_data <- rbind(table_data, row_data)",
      "  }",
      "  ",
      "  return(table_data)",
      "}",
      "",
      "# Generate table",
      "sensitivity_table_data <- create_sensitivity_table(sensitivity_results, sensitivity_parameters)",
      "",
      "# Create formatted table",
      "sensitivity_analysis_table <- sensitivity_table_data %>%",
      "  gt() %>%",
      "  tab_header(",
      "    title = 'Table 14.3.2 Sensitivity Analyses',",
      "    subtitle = 'Primary Efficacy Endpoint - Robustness Assessments'",
      "  ) %>%",
      "  cols_label(",
      "    Analysis = 'Analysis',",
      "    Population = 'Population',",
      "    Method = 'Method',",
      "    Treatment_A_vs_Placebo = 'Treatment A vs Placebo<br>Difference (95% CI), p-value',",
      "    Treatment_B_vs_Placebo = 'Treatment B vs Placebo<br>Difference (95% CI), p-value',",
      "    Robustness_Assessment = 'Robustness Assessment'",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_text(weight = 'bold'),",
      "    locations = cells_column_labels()",
      "  ) %>%",
      "  tab_style(",
      "    style = cell_borders(",
      "      sides = 'bottom',",
      "      weight = px(2)",
      "    ),",
      "    locations = cells_body(",
      "      rows = c(4, 8, 11, 14)",
      "    )",
      "  ) %>%",
      "  fmt_markdown(columns = everything()) %>%",
      "  tab_footnote(",
      "    footnote = 'ITT Population: All randomized subjects who received at least one dose of study drug',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Sensitivity analyses: Robustness assessments for primary efficacy endpoint',",
      "    locations = cells_title()",
      "  ) %>%",
      "  tab_footnote(",
      "    footnote = 'Robustness assessment: Comparison with primary analysis results',",
      "    locations = cells_title()",
      "  )",
      "",
      "# Display table",
      "sensitivity_analysis_table"
    ],
    "quality_checks": [
      "# Data validation checks",
      "data_validation <- analysis_data %>%",
      "  group_by(TRT01P, AVISIT) %>%",
      "  summarise(",
      "    n_subjects = n_distinct(USUBJID),",
      "    missing_chg = sum(is.na(CHG)),",
      "    missing_rate = missing_chg / n_subjects * 100,",
      "    .groups = 'drop'",
      "  ) %>%",
      "  filter(missing_rate > 50)",
      "",
      "# Statistical validation",
      "statistical_validation <- list()",
      "for (param in names(sensitivity_results)) {",
      "  result <- sensitivity_results[[param]]",
      "  ",
      "  # Check for valid estimates",
      "  valid_estimates <- !is.na(result$trt_a$estimate) && !is.na(result$trt_b$estimate)",
      "  ",
      "  # Check for valid confidence intervals",
      "  valid_ci <- !is.na(result$trt_a$ci_lower) && !is.na(result$trt_a$ci_upper) && result$trt_a$ci_lower < result$trt_a$ci_upper",
      "  ",
      "  # Check for valid p-values",
      "  valid_p <- result$trt_a$p_value >= 0 && result$trt_a$p_value <= 1 && result$trt_b$p_value >= 0 && result$trt_b$p_value <= 1",
      "  ",
      "  statistical_validation[[param]] <- list(",
      "    valid_estimates = valid_estimates,",
      "    valid_ci = valid_ci,",
      "    valid_p = valid_p,",
      "    trt_a_p = result$trt_a$p_value,",
      "    trt_b_p = result$trt_b$p_value",
      "  )",
      "}",
      "",
      "# Robustness validation",
      "robustness_validation <- list()",
      "primary_results <- sensitivity_results[['MMRM']]  # Use MMRM as primary",
      "primary_trt_a_p <- primary_results$trt_a$p_value",
      "primary_trt_b_p <- primary_results$trt_b$p_value",
      " ",
      "for (param in names(sensitivity_results)) {",
      "  result <- sensitivity_results[[param]]",
      "  ",
      "  # Compare with primary results",
      "  trt_a_consistent <- (primary_trt_a_p < 0.05) == (result$trt_a$p_value < 0.05)",
      "  trt_b_consistent <- (primary_trt_b_p < 0.05) == (result$trt_b$p_value < 0.05)",
      "  ",
      "  # Calculate effect size consistency",
      "  trt_a_effect_consistent <- abs(primary_results$trt_a$estimate - result$trt_a$estimate) < 1.0",
      "  trt_b_effect_consistent <- abs(primary_results$trt_b$estimate - result$trt_b$estimate) < 1.0",
      "  ",
      "  robustness_validation[[param]] <- list(",
      "    trt_a_consistent = trt_a_consistent,",
      "    trt_b_consistent = trt_b_consistent,",
      "    trt_a_effect_consistent = trt_a_effect_consistent,",
      "    trt_b_effect_consistent = trt_b_effect_consistent,",
      "    overall_robust = trt_a_consistent && trt_b_consistent && trt_a_effect_consistent && trt_b_effect_consistent",
      "  )",
      "}",
      "",
      "# Print validation results",
      "cat('Data Validation:\\n')",
      "print(data_validation)",
      "cat('\\nStatistical Validation:\\n')",
      "print(statistical_validation)",
      "cat('\\nRobustness Validation:\\n')",
      "print(robustness_validation)"
    ],
    "export_functions": [
      "# Export sensitivity analysis results",
      "export_sensitivity_results <- function(table_data, results, param_info, output_dir = 'output') {",
      "  # Create output directory",
      "  if (!dir.exists(output_dir)) {",
      "    dir.create(output_dir, recursive = TRUE)",
      "  }",
      "  ",
      "  # Export HTML table",
      "  html_file <- file.path(output_dir, 'sensitivity_analysis_table.html')",
      "  sensitivity_analysis_table %>%",
      "    gtsave(html_file)",
      "  ",
      "  # Export RTF table",
      "  rtf_file <- file.path(output_dir, 'sensitivity_analysis_table.rtf')",
      "  sensitivity_table_data %>%",
      "    flextable() %>%",
      "    set_header_labels(",
      "      Analysis = 'Analysis',",
      "      Population = 'Population',",
      "      Method = 'Method',",
      "      Treatment_A_vs_Placebo = 'Treatment A vs Placebo\\nDifference (95% CI), p-value',",
      "      Treatment_B_vs_Placebo = 'Treatment B vs Placebo\\nDifference (95% CI), p-value',",
      "      Robustness_Assessment = 'Robustness Assessment'",
      "    ) %>%",
      "    autofit() %>%",
      "    save_as_rtf(rtf_file)",
      "  ",
      "  # Export results summary",
      "  summary_file <- file.path(output_dir, 'sensitivity_analysis_summary.txt')",
      "  sink(summary_file)",
      "  cat('Sensitivity Analysis Summary\\n')",
      "  cat('==========================\\n\\n')",
      "  ",
      "  for (param in names(results)) {",
      "    result <- results[[param]]",
      "    info <- param_info[[param]]",
      "    ",
      "    cat(sprintf('Analysis: %s\\n', info$label))",
      "    cat(sprintf('Population: %s\\n', info$population))",
      "    cat(sprintf('Method: %s\\n', info$method))",
      "    ",
      "    cat('Treatment A vs Placebo:\\n')",
      "    cat(sprintf('  Estimate: %.3f\\n', result$trt_a$estimate))",
      "    cat(sprintf('  95%% CI: (%.3f, %.3f)\\n', result$trt_a$ci_lower, result$trt_a$ci_upper))",
      "    cat(sprintf('  p-value: %.4f\\n', result$trt_a$p_value))",
      "    ",
      "    cat('Treatment B vs Placebo:\\n')",
      "    cat(sprintf('  Estimate: %.3f\\n', result$trt_b$estimate))",
      "    cat(sprintf('  95%% CI: (%.3f, %.3f)\\n', result$trt_b$ci_lower, result$trt_b$ci_upper))",
      "    cat(sprintf('  p-value: %.4f\\n', result$trt_b$p_value))",
      "    ",
      "    cat('\\n')",
      "  }",
      "  ",
      "  cat('Statistical Method: Robustness Assessment\\n')",
      "  cat('Population: Intent-to-Treat\\n')",
      "  cat('Significance Level: 0.05\\n')",
      "  cat('Robustness Assessment: Comparison with primary analysis results\\n')",
      "  sink()",
      "  ",
      "  cat('Exported files to:', output_dir, '\\n')",
      "}",
      "",
      "# Export results",
      "export_sensitivity_results(sensitivity_table_data, sensitivity_results, sensitivity_parameters)"
    ]
  },
  "keywords": [
    "sensitivity analysis",
    "robustness assessment",
    "missing data",
    "statistical methods",
    "population definitions",
    "outlier handling",
    "ITT population",
    "FDA compliance",
    "ICH E3",
    "clinical trial",
    "statistical analysis"
  ],
  "metadata": {
    "created_date": "2024-08-06",
    "version": "1.0",
    "author": "Jaime Yan",
    "description": "FDA-compliant sensitivity analysis template with detailed structure and complete R code",
    "references": [
      "ICH E3 Guidelines Section 14.3.2",
      "FDA Guidance for Industry: E9 Statistical Principles for Clinical Trials",
      "CDISC ADaM Implementation Guide",
      "Sensitivity Analysis Guidelines",
      "Statistical Analysis Plan Template"
    ],
    "data_requirements": [
      "ADSL dataset with ITTFL, PPFL, SAFFL flags",
      "ADQS dataset with efficacy endpoints",
      "Efficacy endpoint: CHG (change from baseline)",
      "Baseline variable: BASE_ADASCOG",
      "Treatment assignment: TRT01P",
      "Visit information: AVISIT (Week 26)",
      "Missing data handling: LOCF, multiple imputation",
      "Outlier detection and handling methods"
    ],
    "statistical_methods": [
      "Robustness assessment for primary efficacy endpoint",
      "Missing data sensitivity analyses (complete case, LOCF, multiple imputation)",
      "Statistical method sensitivity (MMRM, ANCOVA, non-parametric, robust regression)",
      "Population sensitivity (per protocol, safety, modified ITT)",
      "Outlier sensitivity (exclusion, winsorization, robust regression)"
    ]
  }
} 