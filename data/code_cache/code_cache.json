{
  "7be2ac37d9a9cf4e3d8bc6b165185427_b43a52ba71142f982048d2c4cf8a55bc_ec26a6c44dde4c77a27b92eaedaf56e3": {
    "code": "library(dplyr)\ndata %>% summarise(n=n())",
    "template_hash": "7be2ac37d9a9cf4e3d8bc6b165185427",
    "data_hash": "b43a52ba71142f982048d2c4cf8a55bc",
    "query_hash": "ec26a6c44dde4c77a27b92eaedaf56e3",
    "success_rate": 1.0,
    "execution_time": 0.0,
    "created_at": "2025-08-05T21:19:59.110242",
    "last_used": "2025-08-05T21:19:59.110242",
    "use_count": 1,
    "metadata": {}
  },
  "5c32a2a9185285be4657e22fbc1bf737_6f2ecff81741b168e3e2063cece7202a_7ceab9269ca1a074be12affd3dc110c0": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Load dataset with error handling\ntryCatch({\n  advs <- read_sas(\"data/adam/advs.sas7bdat\")\n}, error = function(e) {\n  stop(\"Failed to load ADVS data: \", e$message)\n})\n\n# Data validation checks\nrequired_vars <- c(\"TRTP\", \"TRTA\", \"AVAL\", \"BASE\", \"CHG\", \"PCHG\", \"PARAMCD\", \"PARAM\", \"AVISIT\")\nmissing_vars <- setdiff(required_vars, names(advs))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables in ADVS: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Create summary table function\ncreate_vital_signs_table <- function(data) {\n  # Calculate summary statistics\n  summary_stats <- data %>%\n    filter(AVISIT == \"WEEK 8\") %>% # Example visit selection - adjust as needed\n    group_by(TRTP, PARAM) %>%\n    summarise(\n      N = n(),\n      Mean = mean(AVAL, na.rm = TRUE),\n      SD = sd(AVAL, na.rm = TRUE),\n      Median = median(AVAL, na.rm = TRUE),\n      Min = min(AVAL, na.rm = TRUE),\n      Max = max(AVAL, na.rm = TRUE),\n      Mean_CHG = mean(CHG, na.rm = TRUE),\n      SD_CHG = sd(CHG, na.rm = TRUE),\n      Mean_PCHG = mean(PCHG, na.rm = TRUE),\n      SD_PCHG = sd(PCHG, na.rm = TRUE),\n      .groups = \"drop\"\n    ) %>%\n    mutate(across(where(is.numeric), ~ round(., 2)))\n  \n  # Create gt table\n  gt_table <- summary_stats %>%\n    gt(groupname_col = \"PARAM\") %>%\n    tab_header(\n      title = \"Summary of Vital Signs by Treatment Group\",\n      subtitle = \"Safety Population\"\n    ) %>%\n    cols_label(\n      TRTP = \"Treatment\",\n      N = \"n\",\n      Mean = \"Mean\",\n      SD = \"SD\",\n      Median = \"Median\",\n      Min = \"Min\",\n      Max = \"Max\",\n      Mean_CHG = \"Mean Change\",\n      SD_CHG = \"SD Change\",\n      Mean_PCHG = \"Mean % Change\",\n      SD_PCHG = \"SD % Change\"\n    ) %>%\n    fmt_number(\n      columns = c(Mean, SD, Median, Min, Max, Mean_CHG, SD_CHG, Mean_PCHG, SD_PCHG),\n      decimals = 2\n    ) %>%\n    tab_options(\n      table.font.size = 12,\n      table.width = \"100%\",\n      column_labels.font.weight = \"bold\"\n    ) %>%\n    tab_footnote(\n      footnote = \"Safety population includes all randomized patients who received at least one dose of study drug.\",\n      locations = cells_title(groups = \"subtitle\")\n    ) %>%\n    tab_source_note(\n      source_note = \"Source: ADaM ADVS dataset\"\n    )\n  \n  return(gt_table)\n}\n\n# Generate final table\nfinal_table <- create_vital_signs_table(advs)\n\n# Display final table\nfinal_table",
    "template_hash": "5c32a2a9185285be4657e22fbc1bf737",
    "data_hash": "6f2ecff81741b168e3e2063cece7202a",
    "query_hash": "7ceab9269ca1a074be12affd3dc110c0",
    "success_rate": 1.0,
    "execution_time": 41.82706117630005,
    "created_at": "2025-08-05T21:29:37.059711",
    "last_used": "2025-08-05T21:29:37.059711",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-05T21:29:37.057711",
      "agent": "Code Generator Agent",
      "template_id": "template_1754443537",
      "user_query": "Vistal sign summary table"
    }
  },
  "84429d6972ee82bfd4aae89e7f528532_f1c44fce310b05839ea3c57fed13b68e_d41a259e75bdf2c471554a1705441d95": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Function to create AE summary table\ncreate_ae_summary <- function(data_path) {\n  tryCatch({\n    # Load dataset\n    if (!file.exists(data_path)) {\n      stop(\"Dataset file not found at specified path\")\n    }\n    \n    unknown <- read_sas(data_path)\n    \n    # Validate required variables (assuming standard ADaM structure)\n    required_vars <- c(\"TRT01P\", \"USUBJID\", \"AEDECOD\")\n    missing_vars <- setdiff(required_vars, names(unknown))\n    \n    if (length(missing_vars) > 0) {\n      stop(paste(\"Missing required variables:\", paste(missing_vars, collapse = \", \")))\n    }\n    \n    # Calculate summary statistics\n    ae_summary <- unknown %>%\n      group_by(TRT01P) %>%\n      summarise(\n        n_subjects = n_distinct(USUBJID),\n        n_subjects_with_ae = n_distinct(USUBJID[!is.na(AEDECOD)]),\n        n_ae = sum(!is.na(AEDECOD)),\n        .groups = \"drop\"\n      ) %>%\n      mutate(\n        pct_subjects_with_ae = ifelse(n_subjects > 0, \n                                     round(n_subjects_with_ae / n_subjects * 100, 1),\n                                     NA_real_)\n      ) %>%\n      select(\n        `Treatment Group` = TRT01P,\n        `Number of Subjects with AEs` = n_subjects_with_ae,\n        `Number of AEs` = n_ae,\n        `Percentage of Subjects with AEs` = pct_subjects_with_ae\n      )\n    \n    # Create professional table\n    final_table <- ae_summary %>%\n      gt() %>%\n      tab_header(\n        title = \"Summary of Adverse Events by Treatment Group\"\n      ) %>%\n      fmt_number(\n        columns = c(\"Number of Subjects with AEs\", \"Number of AEs\"),\n        decimals = 0\n      ) %>%\n      fmt_number(\n        columns = \"Percentage of Subjects with AEs\",\n        decimals = 1,\n        pattern = \"{x}%\"\n      ) %>%\n      tab_options(\n        table.font.names = \"Arial\",\n        table.font.size = px(12),\n        heading.title.font.size = px(14),\n        column_labels.font.weight = \"bold\"\n      ) %>%\n      opt_table_lines(extent = \"none\") %>%\n      cols_align(align = \"center\", columns = everything())\n    \n    return(final_table)\n    \n  }, error = function(e) {\n    message(\"Error creating AE summary table: \", e$message)\n    return(NULL)\n  })\n}\n\n# Create and display table\nfinal_table <- create_ae_summary(\"data/adam/unknown.sas7bdat\")\n\n# Display final table if created successfully\nif (!is.null(final_table)) {\n  final_table\n} else {\n  message(\"Table creation failed. Please check input data and error messages.\")\n}",
    "template_hash": "84429d6972ee82bfd4aae89e7f528532",
    "data_hash": "f1c44fce310b05839ea3c57fed13b68e",
    "query_hash": "d41a259e75bdf2c471554a1705441d95",
    "success_rate": 1.0,
    "execution_time": 49.98235774040222,
    "created_at": "2025-08-06T10:56:18.718409",
    "last_used": "2025-08-06T10:56:18.718409",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-06T10:55:48.795154",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Create a summary table for adverse events by treatment group"
    }
  },
  "813e0b333fe6afc8cc90cd5872ee7905_519fae0e78e38c8e98546b28d99d327c_d41a259e75bdf2c471554a1705441d95": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Function to create AE summary table\ncreate_ae_summary_table <- function(data_path) {\n  tryCatch({\n    # Load dataset\n    adam_data <- read_sas(data_path)\n    \n    # Validate required variables\n    required_vars <- c(\"TRT01P\", \"USUBJID\", \"AEDECOD\")\n    missing_vars <- setdiff(required_vars, names(adam_data))\n    \n    if (length(missing_vars) > 0) {\n      stop(paste(\"Missing required variables:\", paste(missing_vars, collapse = \", \")))\n    }\n    \n    # Calculate summary statistics\n    ae_summary <- adam_data %>%\n      group_by(TRT01P) %>%\n      summarise(\n        n_subjects = n_distinct(USUBJID),\n        total_aes = n(),\n        .groups = \"drop\"\n      ) %>%\n      rename(`Treatment Group` = TRT01P,\n             `Number of Subjects with AEs` = n_subjects,\n             `Total AEs Reported` = total_aes)\n    \n    # Create professional table\n    final_table <- ae_summary %>%\n      gt() %>%\n      tab_header(\n        title = \"Summary of Adverse Events by Treatment Group\"\n      ) %>%\n      fmt_number(\n        columns = c(`Number of Subjects with AEs`, `Total AEs Reported`),\n        decimals = 0\n      ) %>%\n      tab_options(\n        table.font.names = \"Arial\",\n        table.font.size = px(12),\n        heading.title.font.size = px(14),\n        column_labels.font.weight = \"bold\"\n      ) %>%\n      tab_style(\n        style = cell_borders(\n          sides = \"all\",\n          color = \"#D3D3D3\",\n          weight = px(1)\n        ),\n        locations = cells_body()\n      )\n    \n    return(final_table)\n    \n  }, error = function(e) {\n    message(\"Error creating AE summary table: \", e$message)\n    return(NULL)\n  })\n}\n\n# Create and display table\nfinal_table <- create_ae_summary_table(\"data/adam/unknown.sas7bdat\")\n\n# Display final table if created successfully\nif (!is.null(final_table)) {\n  final_table\n} else {\n  message(\"Table creation failed. Please check input data and error messages.\")\n}",
    "template_hash": "813e0b333fe6afc8cc90cd5872ee7905",
    "data_hash": "519fae0e78e38c8e98546b28d99d327c",
    "query_hash": "d41a259e75bdf2c471554a1705441d95",
    "success_rate": 1.0,
    "execution_time": 42.256893157958984,
    "created_at": "2025-08-06T10:58:22.349200",
    "last_used": "2025-08-06T10:58:22.349200",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-06T10:57:49.916259",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Create a summary table for adverse events by treatment group"
    }
  },
  "b19df93fa5300557dc8e76ccc95fcd00_78ef358d1a3a13bc781563d99276042d_d41a259e75bdf2c471554a1705441d95": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Function to validate required variables exist\nvalidate_variables <- function(data, required_vars) {\n  missing_vars <- setdiff(required_vars, names(data))\n  if (length(missing_vars) > 0) {\n    stop(paste(\"Missing required variables:\", paste(missing_vars, collapse = \", \")))\n  }\n}\n\n# Load and prepare data\ntryCatch({\n  # Load dataset\n  unknown <- read_sas(\"data/adam/unknown.sas7bdat\")\n  \n  # Validate required variables (assuming standard ADaM structure)\n  required_vars <- c(\"TRT01P\", \"USUBJID\", \"AEDECOD\")\n  validate_variables(unknown, required_vars)\n  \n  # Calculate summary statistics\n  ae_summary <- unknown %>%\n    group_by(TRT01P) %>%\n    summarise(\n      n_subjects = n_distinct(USUBJID),\n      n_subjects_with_ae = n_distinct(USUBJID[!is.na(AEDECOD)]),\n      total_ae = sum(!is.na(AEDECOD)),\n      .groups = 'drop'\n    ) %>%\n    mutate(\n      pct_subjects_with_ae = round(n_subjects_with_ae / n_subjects * 100, 1)\n    ) %>%\n    select(\n      `Treatment Group` = TRT01P,\n      `Number of Subjects with AEs` = n_subjects_with_ae,\n      `Percentage of Subjects with AEs` = pct_subjects_with_ae,\n      `Total AEs Reported` = total_ae\n    )\n  \n  # Create professional table\n  final_table <- ae_summary %>%\n    gt() %>%\n    tab_header(\n      title = \"Summary of Adverse Events by Treatment Group\"\n    ) %>%\n    fmt_number(\n      columns = c(\"Number of Subjects with AEs\", \"Total AEs Reported\"),\n      decimals = 0\n    ) %>%\n    fmt_number(\n      columns = \"Percentage of Subjects with AEs\",\n      decimals = 1,\n      pattern = \"{x}%\"\n    ) %>%\n    cols_align(\n      align = \"center\",\n      columns = everything()\n    ) %>%\n    tab_options(\n      table.font.names = \"Arial\",\n      table.font.size = px(12),\n      heading.title.font.size = px(14),\n      column_labels.font.weight = \"bold\"\n    )\n  \n}, error = function(e) {\n  message(\"Error in processing: \", e$message)\n  # Return empty table with correct structure if error occurs\n  final_table <- tibble(\n    `Treatment Group` = character(),\n    `Number of Subjects with AEs` = integer(),\n    `Percentage of Subjects with AEs` = numeric(),\n    `Total AEs Reported` = integer()\n  ) %>%\n    gt() %>%\n    tab_header(title = \"Summary of Adverse Events by Treatment Group\")\n})\n\n# Display final table\nfinal_table",
    "template_hash": "b19df93fa5300557dc8e76ccc95fcd00",
    "data_hash": "78ef358d1a3a13bc781563d99276042d",
    "query_hash": "d41a259e75bdf2c471554a1705441d95",
    "success_rate": 1.0,
    "execution_time": 49.161306619644165,
    "created_at": "2025-08-06T11:00:39.721691",
    "last_used": "2025-08-06T11:00:39.721691",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-06T11:00:07.187528",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Create a summary table for adverse events by treatment group"
    }
  },
  "09e107ce66f736108805140a2ae7375e_f1c44fce310b05839ea3c57fed13b68e_0b780dfa6787f7d503de01d7285603a1": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Function to validate ADaM structure\nvalidate_adam <- function(data) {\n  required_cols <- c(\"USUBJID\", \"TRT01P\", \"AEBODSYS\", \"AEDECOD\", \"AESEV\")\n  missing_cols <- setdiff(required_cols, names(data))\n  if (length(missing_cols) > 0) {\n    stop(paste(\"Missing required ADaM columns:\", paste(missing_cols, collapse = \", \")))\n  }\n  \n  if (!all(data$TRT01P %in% c(\"Placebo\", \"Treatment\"))) {\n    stop(\"TRT01P must contain only 'Placebo' and 'Treatment' values\")\n  }\n  \n  if (!is.numeric(data$AESEV) || any(data$AESEV < 1 | data$AESEV > 5, na.rm = TRUE)) {\n    stop(\"AESEV must be numeric with values 1-5 (CTCAE grades)\")\n  }\n}\n\n# Load and validate dataset\ntryCatch({\n  unknown <- read_sas(\"data/adam/unknown.sas7bdat\")\n  validate_adam(unknown)\n}, error = function(e) {\n  stop(paste(\"Data loading/validation failed:\", e$message))\n})\n\n# Process adverse events data\nae_summary <- unknown %>%\n  mutate(\n    AESEV = factor(AESEV, levels = 1:5, labels = c(\"Grade 1\", \"Grade 2\", \"Grade 3\", \"Grade 4\", \"Grade 5\")),\n    TRT01P = factor(TRT01P, levels = c(\"Placebo\", \"Treatment\"))\n  ) %>%\n  count(AEBODSYS, AEDECOD, TRT01P, AESEV, .drop = FALSE) %>%\n  complete(AEBODSYS, AEDECOD, TRT01P, AESEV, fill = list(n = 0)) %>%\n  pivot_wider(names_from = c(TRT01P, AESEV), values_from = n, names_sep = \" \") %>%\n  rowwise() %>%\n  mutate(\n    `Placebo (N=50)` = paste(sum(c_across(starts_with(\"Placebo\"))), \"(\", \n                             paste(c_across(starts_with(\"Placebo\")), collapse = \"/\"), \")\"),\n    `Treatment (N=50)` = paste(sum(c_across(starts_with(\"Treatment\"))), \"(\", \n                             paste(c_across(starts_with(\"Treatment\")), collapse = \"/\"), \")\"),\n    `Total (N=100)` = paste(sum(c_across(starts_with(\"Placebo\")), \n                           sum(c_across(starts_with(\"Treatment\"))), sep = \"+\"), \"(\", \n                           paste(c_across(starts_with(\"Placebo\")) + \n                                 c_across(starts_with(\"Treatment\")), collapse = \"/\"), \")\")\n  ) %>%\n  ungroup() %>%\n  select(`System Organ Class / Preferred Term` = AEBODSYS, \n         `Preferred Term` = AEDECOD,\n         `Placebo (N=50)`, `Treatment (N=50)`, `Total (N=100)`)\n\n# Create final table\nfinal_table <- ae_summary %>%\n  gt(groupname_col = \"System Organ Class / Preferred Term\") %>%\n  tab_header(\n    title = \"Summary of Adverse Events by Severity Grade and Treatment Group\"\n  ) %>%\n  tab_options(\n    table.font.names = \"Arial\",\n    table.font.size = px(10),\n    column_labels.font.weight = \"bold\"\n  ) %>%\n  cols_align(\n    align = \"center\",\n    columns = c(`Placebo (N=50)`, `Treatment (N=50)`, `Total (N=100)`)\n  ) %>%\n  tab_style(\n    style = cell_borders(sides = \"all\", color = \"#D3D3D3\"),\n    locations = cells_body()\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_row_groups()\n  )\n\n# Display final table\nfinal_table",
    "template_hash": "09e107ce66f736108805140a2ae7375e",
    "data_hash": "f1c44fce310b05839ea3c57fed13b68e",
    "query_hash": "0b780dfa6787f7d503de01d7285603a1",
    "success_rate": 1.0,
    "execution_time": 64.83048558235168,
    "created_at": "2025-08-06T11:03:26.245816",
    "last_used": "2025-08-06T11:03:26.245816",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-06T11:02:52.161971",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Generate adverse events summary with severity grades"
    }
  },
  "a6c5e6b2480f8450e30f25a950e13d4a_519fae0e78e38c8e98546b28d99d327c_0b780dfa6787f7d503de01d7285603a1": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Function to create AE summary table\ncreate_ae_summary <- function(data_path) {\n  tryCatch({\n    # Load dataset\n    unknown <- read_sas(data_path)\n    \n    # Data validation checks\n    required_vars <- c(\"AETERM\", \"AESEV\", \"TRT01P\")\n    missing_vars <- setdiff(required_vars, names(unknown))\n    if (length(missing_vars) > 0) {\n      stop(paste(\"Missing required variables:\", paste(missing_vars, collapse = \", \")))\n    }\n    \n    # Process data - count AEs by severity and treatment\n    ae_summary <- unknown %>%\n      mutate(\n        AESEV = factor(AESEV, levels = c(\"MILD\", \"MODERATE\", \"SEVERE\", \"DEATH\")),\n        TRT01P = factor(TRT01P, levels = c(\"Placebo\", \"Treatment\"))\n      ) %>%\n      count(AETERM, AESEV, TRT01P, .drop = FALSE) %>%\n      pivot_wider(\n        names_from = TRT01P,\n        values_from = n,\n        values_fill = 0\n      ) %>%\n      group_by(AETERM) %>%\n      mutate(\n        Total = Placebo + Treatment\n      ) %>%\n      ungroup() %>%\n      arrange(AETERM, AESEV)\n    \n    # Create summary table\n    final_table <- ae_summary %>%\n      gt() %>%\n      tab_header(\n        title = \"Summary of Adverse Events by Severity Grade and Treatment Group\"\n      ) %>%\n      cols_label(\n        AETERM = \"Adverse Event\",\n        AESEV = \"Severity Grade\",\n        Placebo = \"Placebo (N=100)\",\n        Treatment = \"Treatment (N=100)\",\n        Total = \"Total (N=200)\"\n      ) %>%\n      tab_spanner(\n        label = \"Number of Patients\",\n        columns = c(Placebo, Treatment, Total)\n      ) %>%\n      fmt_number(\n        columns = c(Placebo, Treatment, Total),\n        decimals = 0\n      ) %>%\n      tab_options(\n        table.font.names = \"Arial\",\n        table.font.size = px(12),\n        heading.title.font.size = px(14),\n        column_labels.font.weight = \"bold\"\n      ) %>%\n      tab_style(\n        style = cell_text(weight = \"bold\"),\n        locations = cells_column_labels()\n      )\n    \n    return(final_table)\n    \n  }, error = function(e) {\n    message(\"Error creating AE summary table: \", e$message)\n    return(NULL)\n  })\n}\n\n# Create and display table\nfinal_table <- create_ae_summary(\"data/adam/unknown.sas7bdat\")\n\n# Display final table\nif (!is.null(final_table)) {\n  final_table\n} else {\n  message(\"Table generation failed due to errors\")\n}",
    "template_hash": "a6c5e6b2480f8450e30f25a950e13d4a",
    "data_hash": "519fae0e78e38c8e98546b28d99d327c",
    "query_hash": "0b780dfa6787f7d503de01d7285603a1",
    "success_rate": 1.0,
    "execution_time": 49.04861879348755,
    "created_at": "2025-08-06T11:05:48.086279",
    "last_used": "2025-08-06T11:05:48.086279",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-06T11:05:14.598727",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Generate adverse events summary with severity grades"
    }
  },
  "ff09adba76e772e4ec4cf4f5cae882e7_78ef358d1a3a13bc781563d99276042d_0b780dfa6787f7d503de01d7285603a1": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Function to create AE summary table\ncreate_ae_summary_table <- function(data_path, placebo_N = 100, treatmentA_N = 100, treatmentB_N = 100) {\n  # Error handling for file existence\n  if (!file.exists(data_path)) {\n    stop(\"Dataset file not found at specified path\")\n  }\n  \n  tryCatch({\n    # Load dataset\n    adae <- read_sas(data_path)\n    \n    # Validate required variables (assuming standard ADaM naming)\n    required_vars <- c(\"AEBODSYS\", \"AEDECOD\", \"AESEV\", \"TRT01A\")\n    missing_vars <- setdiff(required_vars, names(adae))\n    if (length(missing_vars) > 0) {\n      stop(paste(\"Missing required variables:\", paste(missing_vars, collapse = \", \")))\n    }\n    \n    # Define severity grades (CTCAE standard)\n    severity_grades <- c(\"Mild\", \"Moderate\", \"Severe\", \"Life-threatening\", \"Fatal\")\n    \n    # Process data to create summary counts\n    ae_summary <- adae %>%\n      mutate(\n        AESEV = factor(AESEV, levels = c(\"1\", \"2\", \"3\", \"4\", \"5\"), labels = severity_grades),\n        TRT01A = factor(TRT01A, levels = c(\"Placebo\", \"Treatment A\", \"Treatment B\"))\n      ) %>%\n      count(AESEV, TRT01A, .drop = FALSE) %>%\n      pivot_wider(names_from = TRT01A, values_from = n) %>%\n      mutate(\n        Total = rowSums(across(where(is.numeric)), na.rm = TRUE),\n        across(where(is.numeric), ~paste0(.x, \" (\", round(.x/c(placebo_N, treatmentA_N, treatmentB_N, sum(placebo_N, treatmentA_N, treatmentB_N))*100, 1), \"%)\"))\n      ) %>%\n      rename(\"Severity Grade\" = AESEV) %>%\n      select(\"Severity Grade\", \"Placebo\", \"Treatment A\", \"Treatment B\", \"Total\")\n    \n    # Add header with group Ns\n    headers <- c(\"Severity Grade\", \n                 paste0(\"Placebo (N=\", placebo_N, \")\"), \n                 paste0(\"Treatment A (N=\", treatmentA_N, \")\"), \n                 paste0(\"Treatment B (N=\", treatmentB_N, \")\"), \n                 paste0(\"Total (N=\", sum(placebo_N, treatmentA_N, treatmentB_N), \")\"))\n    \n    # Create professional table\n    final_table <- ae_summary %>%\n      gt() %>%\n      tab_header(\n        title = \"Summary of Adverse Events by Severity Grade and Treatment Group\"\n      ) %>%\n      cols_label(\n        .list = setNames(as.list(headers[-1]), names(ae_summary)[-1])\n      ) %>%\n      tab_options(\n        table.font.names = \"Arial\",\n        table.font.size = px(12),\n        column_labels.font.weight = \"bold\"\n      ) %>%\n      tab_style(\n        style = cell_text(weight = \"bold\"),\n        locations = cells_column_labels()\n      )\n    \n    return(final_table)\n    \n  }, error = function(e) {\n    message(\"Error creating AE summary table: \", e$message)\n    return(NULL)\n  })\n}\n\n# Create and display table\nfinal_table <- create_ae_summary_table(\"data/adam/unknown.sas7bdat\")\nif (!is.null(final_table)) {\n  final_table\n} else {\n  message(\"Table generation failed\")\n}",
    "template_hash": "ff09adba76e772e4ec4cf4f5cae882e7",
    "data_hash": "78ef358d1a3a13bc781563d99276042d",
    "query_hash": "0b780dfa6787f7d503de01d7285603a1",
    "success_rate": 1.0,
    "execution_time": 58.240500688552856,
    "created_at": "2025-08-06T11:08:20.463758",
    "last_used": "2025-08-06T11:08:20.463758",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-06T11:07:46.944325",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Generate adverse events summary with severity grades"
    }
  },
  "1c68b64811a7b7a37645902fbeb4524d_9fc153147d854e05a179eacab07f7921_18f9867d6d687f175b593fa6954e7f97": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Error handling function\nsafe_read <- function(path) {\n  if (!file.exists(path)) {\n    stop(\"Data file not found: \", path)\n  }\n  tryCatch(\n    read_sas(path),\n    error = function(e) {\n      stop(\"Error reading data file: \", e$message)\n    }\n  )\n}\n\n# Load and validate ADAE dataset\nadae <- safe_read(\"data/adam/unknown.sas7bdat\")\n\n# Validate required variables\nrequired_vars <- c(\"USUBJID\", \"AEBODSYS\", \"AEDECOD\", \"TRT01A\", \"AOCCPFL\")\nif (!all(required_vars %in% names(adae))) {\n  stop(\"Missing required variables in dataset\")\n}\n\n# Create AE summary table\nae_table <- adae %>%\n  # Filter for treatment-emergent AEs\n  filter(AOCCPFL == \"Y\") %>%\n  # Get unique subject counts by treatment\n  group_by(TRT01A) %>%\n  summarise(\n    n_subjects = n_distinct(USUBJID),\n    .groups = \"drop\"\n  ) %>%\n  # Calculate AE counts and percentages\n  left_join(\n    adae %>%\n      filter(AOCCPFL == \"Y\") %>%\n      group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n      summarise(\n        n_events = n_distinct(USUBJID),\n        .groups = \"drop\"\n      ),\n    by = \"TRT01A\"\n  ) %>%\n  # Calculate percentages\n  mutate(\n    pct = round(100 * n_events / n_subjects, 1),\n    display = sprintf(\"%d (%0.1f%%)\", n_events, pct)\n  ) %>%\n  # Reshape to wide format\n  pivot_wider(\n    id_cols = c(AEBODSYS, AEDECOD),\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0\"\n  ) %>%\n  # Sort by SOC and PT\n  arrange(AEBODSYS, AEDECOD)\n\n# Create formatted table\nfinal_table <- ae_table %>%\n  gt() %>%\n  tab_header(\n    title = \"Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  cols_label(\n    AEBODSYS = \"System Organ Class\",\n    AEDECOD = \"Preferred Term\"\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  ) %>%\n  tab_options(\n    table.font.size = px(10),\n    row.striping.include_table_body = TRUE\n  ) %>%\n  fmt_missing(\n    columns = everything(),\n    missing_text = \"0\"\n  )\n\n# Save table\ngtsave(final_table, \"adverse_events_table.html\")",
    "template_hash": "1c68b64811a7b7a37645902fbeb4524d",
    "data_hash": "9fc153147d854e05a179eacab07f7921",
    "query_hash": "18f9867d6d687f175b593fa6954e7f97",
    "success_rate": 1.0,
    "execution_time": 21.01490068435669,
    "created_at": "2025-08-27T14:10:34.433374",
    "last_used": "2025-08-27T14:10:34.433374",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-27T14:10:34.433374",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "adverse events table"
    }
  },
  "ca6bc8d5c6b85e78cfa6b4cfd6801552_0f92a48e322028cdcc75c63c4be30dba_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Load dataset with error handling\ntryCatch({\n  unknown <- read_sas(\"data/adam/unknown.sas7bdat\")\n}, error = function(e) {\n  stop(\"Error loading dataset: \", e$message)\n})\n\n# Data validation and preparation\nvalidate_ae_data <- function(data) {\n  required_vars <- c(\"USUBJID\", \"TRT01A\", \"AEBODSYS\", \"AEDECOD\", \"AESER\", \"AEREL\")\n  missing_vars <- setdiff(required_vars, names(data))\n  \n  if (length(missing_vars) > 0) {\n    warning(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n  }\n  \n  # Check if data has observations\n  if (nrow(data) == 0) {\n    stop(\"Dataset contains no observations\")\n  }\n  \n  return(TRUE)\n}\n\n# Validate the dataset\nvalidate_ae_data(unknown)\n\n# Create AE summary table\ncreate_ae_summary_table <- function(data) {\n  # Get unique subject count by treatment\n  total_subjects <- data %>%\n    distinct(USUBJID, TRT01A) %>%\n    count(TRT01A, name = \"Total_Subjects\")\n  \n  # Calculate AE counts by system organ class and preferred term\n  ae_summary <- data %>%\n    group_by(TRT01A, AEBODSYS, AEDECOD) %>%\n    summarise(\n      n_subjects = n_distinct(USUBJID),\n      n_events = n(),\n      n_serious = sum(AESER == \"Y\", na.rm = TRUE),\n      n_related = sum(AEREL %in% c(\"POSSIBLE\", \"PROBABLE\", \"DEFINITE\"), na.rm = TRUE),\n      .groups = \"drop\"\n    ) %>%\n    left_join(total_subjects, by = \"TRT01A\") %>%\n    mutate(\n      percent = round((n_subjects / Total_Subjects) * 100, 1)\n    ) %>%\n    arrange(TRT01A, AEBODSYS, desc(n_subjects), AEDECOD)\n  \n  return(ae_summary)\n}\n\n# Generate the summary data\nae_summary_data <- create_ae_summary_table(unknown)\n\n# Create professional table output\nfinal_table <- ae_summary_data %>%\n  select(TRT01A, AEBODSYS, AEDECOD, n_subjects, Total_Subjects, percent, n_serious, n_related) %>%\n  gt(groupname_col = c(\"TRT01A\", \"AEBODSYS\")) %>%\n  tab_header(\n    title = \"Adverse Events Summary Table\",\n    subtitle = \"By System Organ Class and Preferred Term\"\n  ) %>%\n  cols_label(\n    AEDECOD = \"Preferred Term\",\n    n_subjects = \"Subjects with AE\",\n    Total_Subjects = \"Total Subjects\",\n    percent = \"Percentage (%)\",\n    n_serious = \"Serious AEs\",\n    n_related = \"Related AEs\"\n  ) %>%\n  fmt_number(\n    columns = c(n_subjects, Total_Subjects, n_serious, n_related),\n    decimals = 0\n  ) %>%\n  fmt_number(\n    columns = percent,\n    decimals = 1\n  ) %>%\n  tab_options(\n    table.font.size = \"12px\",\n    table.width = \"100%\",\n    column_labels.font.weight = \"bold\"\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_row_groups()\n  )\n\n# Display final table\nfinal_table",
    "template_hash": "ca6bc8d5c6b85e78cfa6b4cfd6801552",
    "data_hash": "0f92a48e322028cdcc75c63c4be30dba",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 55.3638379573822,
    "created_at": "2025-08-27T14:18:41.531616",
    "last_used": "2025-08-27T14:19:14.655041",
    "use_count": 3,
    "metadata": {
      "generated_at": "2025-08-27T14:18:41.530616",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  },
  "e8b65b6781d4265f6e19ee46b2a605e5_2b1bec47c4e4e8468d6774d2c888b7e0_ce0e63d176041c6942b58bfe2ac934ff": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Create output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\", recursive = TRUE)\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Data validation and processing\nif (!\"TRT01A\" %in% names(adae_data)) {\n  stop(\"\u274c TRT01A variable not found in dataset\")\n}\n\nif (!\"AEBODSYS\" %in% names(adae_data)) {\n  stop(\"\u274c AEBODSYS variable not found in dataset\")\n}\n\nif (!\"AEDECOD\" %in% names(adae_data)) {\n  stop(\"\u274c AEDECOD variable not found in dataset\")\n}\n\n# Get treatment group counts\ntreatment_counts <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"N\") %>%\n  mutate(TRT01A = as.character(TRT01A))\n\n# Create summary data\nae_summary <- adae_data %>%\n  mutate(\n    TRT01A = as.character(TRT01A),\n    AEBODSYS = ifelse(is.na(AEBODSYS), \"Unknown System Organ Class\", AEBODSYS),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Unknown Preferred Term\", AEDECOD)\n  ) %>%\n  group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n  summarise(n = n_distinct(USUBJID), .groups = \"drop\") %>%\n  complete(AEBODSYS, AEDECOD, TRT01A, fill = list(n = 0)) %>%\n  left_join(treatment_counts, by = \"TRT01A\") %>%\n  mutate(\n    pct = ifelse(N > 0, round(n / N * 100, 1), 0),\n    display = ifelse(n > 0, paste0(n, \" (\", pct, \")\"), \"0 (0.0)\")\n  )\n\n# Create table structure matching the template\ntable_data <- ae_summary %>%\n  arrange(AEBODSYS, AEDECOD) %>%\n  select(AEBODSYS, AEDECOD, TRT01A, display) %>%\n  pivot_wider(names_from = TRT01A, values_from = display, values_fill = \"0 (0.0)\") %>%\n  group_by(AEBODSYS) %>%\n  mutate(row_type = ifelse(row_number() == 1, \"SOC\", \"PT\")) %>%\n  ungroup()\n\n# Add total column\ntotal_counts <- adae_data %>%\n  distinct(USUBJID) %>%\n  nrow()\n\ntable_data <- table_data %>%\n  mutate(Total = paste0(\"XX (XX.X)\"))  # Placeholder for total\n\n# Reorder columns to match template\ntable_data <- table_data %>%\n  select(\n    `System Organ Class / Preferred Term` = AEBODSYS,\n    `Placebo (N=XX)` = contains(\"Placebo\") | contains(\"placebo\"),\n    `Drug 50mg (N=XX)` = contains(\"50\") | contains(\"50mg\"),\n    `Drug 100mg (N=XX)` = contains(\"100\") | contains(\"100mg\"),\n    `Total (N=XX)` = Total\n  )\n\n# Ensure exactly 9 rows as specified\nif (nrow(table_data) > 9) {\n  table_data <- table_data %>% slice(1:9)\n} else if (nrow(table_data) < 9) {\n  # Add placeholder rows if needed\n  additional_rows <- tibble(\n    `System Organ Class / Preferred Term` = rep(\"No data available\", 9 - nrow(table_data)),\n    `Placebo (N=XX)` = \"0 (0.0)\",\n    `Drug 50mg (N=XX)` = \"0 (0.0)\", \n    `Drug 100mg (N=XX)` = \"0 (0.0)\",\n    `Total (N=XX)` = \"0 (0.0)\"\n  )\n  table_data <- bind_rows(table_data, additional_rows)\n}\n\n# Create formatted gt table\nfinal_table <- table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\",\n    subtitle = \"Safety Population\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12),\n    column_labels.font.weight = \"bold\"\n  ) %>%\n  tab_footnote(\n    footnote = \"N = Number of subjects in treatment group; n (%) = Number (percentage) of subjects with event\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = \"System Organ Class and Preferred Term are coded using MedDRA version XX.X\",\n    locations = cells_title()\n  )\n\n# Create flextable for additional formatting options\nflex_table <- table_data %>%\n  flextable() %>%\n  set_caption(\"Table - Adverse Events Analysis\") %>%\n  add_footer_lines(\"N = Number of subjects in treatment group; n (%) = Number (percentage) of subjects with event\") %>%\n  add_footer_lines(\"System Organ Class and Preferred Term are coded using MedDRA version XX.X\") %>%\n  theme_booktabs() %>%\n  autofit()\n\n# Save outputs for Step 4\ntryCatch({\n  # Save HTML\n  gtsave(final_table, \"output/adae_adverse_events_table_20250827_155107.html\")\n  \n  # Save CSV\n  write_csv(table_data, \"output/adae_adverse_events_table_20250827_155107.csv\")\n  \n  # Save RDS\n  saveRDS(final_table, \"output/adae_adverse_events_table_20250827_155107.rds\")\n  \n  cat(\"\u2705 All output files created successfully\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to save output files: \", e$message)\n})\n\n# Display final table\nfinal_table",
    "template_hash": "e8b65b6781d4265f6e19ee46b2a605e5",
    "data_hash": "2b1bec47c4e4e8468d6774d2c888b7e0",
    "query_hash": "ce0e63d176041c6942b58bfe2ac934ff",
    "success_rate": 1.0,
    "execution_time": 82.15631198883057,
    "created_at": "2025-08-27T15:52:28.403021",
    "last_used": "2025-08-27T15:52:28.403021",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-27T15:52:28.403021",
      "agent": "Code Generator Agent",
      "template_id": "template_1756324266",
      "user_query": "AE summary"
    }
  },
  "7306547c1af1d37e8c42e9626a208312_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Create output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\", recursive = TRUE)\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Process data\nae_summary <- adae_data %>%\n  group_by(AEBODSYS, TRT01A) %>%\n  summarise(\n    n_subjects = n_distinct(USUBJID),\n    .groups = 'drop'\n  ) %>%\n  # Calculate total N per treatment group\n  group_by(TRT01A) %>%\n  mutate(\n    N_total = n_distinct(adae_data$USUBJID[adae_data$TRT01A == TRT01A])\n  ) %>%\n  ungroup()\n\n# Create wide format\nae_table <- ae_summary %>%\n  pivot_wider(\n    id_cols = AEBODSYS,\n    names_from = TRT01A,\n    values_from = c(n_subjects, N_total),\n    values_fill = 0\n  ) %>%\n  mutate(\n    across(starts_with(\"n_subjects\"), \n           ~sprintf(\"%d (%0.1f%%)\", ., ./N_total_Placebo*100))\n  )\n\n# Create GT table\nfinal_table <- ae_table %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\"\n  ) %>%\n  cols_label(\n    AEBODSYS = \"System Organ Class\",\n    n_subjects_Placebo = \"Placebo (N=XX)\",\n    n_subjects_Treatment = \"Treatment (N=XX)\",\n    n_subjects_Total = \"Total (N=XX)\"\n  ) %>%\n  fmt_missing(\n    missing_text = \"0 (0.0%)\"\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are calculated based on the number of subjects in each treatment group.\",\n    locations = cells_column_labels(\n      columns = c(n_subjects_Placebo, n_subjects_Treatment, n_subjects_Total)\n    )\n  )\n\n# Save outputs\n# HTML\ngtsave(final_table, \n       filename = \"output/adae_adverse_events_table_20250827_222139.html\")\n\n# CSV version (simplified data)\nwrite_csv(ae_table, \n          \"output/adae_adverse_events_table_20250827_222139.csv\")\n\n# RDS\nsaveRDS(final_table, \n        \"output/adae_adverse_events_table_20250827_222139.rds\")\n\n# Display final table\nfinal_table",
    "template_hash": "7306547c1af1d37e8c42e9626a208312",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 16.577539682388306,
    "created_at": "2025-08-27T22:21:55.500254",
    "last_used": "2025-08-27T22:21:55.500254",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-27T22:21:55.500254",
      "agent": "Code Generator Agent",
      "template_id": "template_1756347698",
      "user_query": "AE summary table"
    }
  },
  "38164f4206524c395f8880c9dcc07588_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Create output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\", recursive = TRUE)\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Data validation and processing\nif (!\"TRT01A\" %in% names(adae_data)) {\n  stop(\"\u274c TRT01A variable not found in dataset\")\n}\n\nif (!\"AEBODSYS\" %in% names(adae_data)) {\n  stop(\"\u274c AEBODSYS variable not found in dataset\")\n}\n\nif (!\"AEDECOD\" %in% names(adae_data)) {\n  stop(\"\u274c AEDECOD variable not found in dataset\")\n}\n\n# Get treatment group counts\ntreatment_counts <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"N\") %>%\n  mutate(TRT01A = as.character(TRT01A))\n\n# Create total count\ntotal_count <- data.frame(\n  TRT01A = \"Total\",\n  N = sum(treatment_counts$N)\n)\n\n# Combine treatment counts\nall_counts <- bind_rows(treatment_counts, total_count)\n\n# Create AE summary data\nae_summary <- adae_data %>%\n  mutate(\n    TRT01A = as.character(TRT01A),\n    AEBODSYS = ifelse(is.na(AEBODSYS), \"Not Specified\", AEBODSYS),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", AEDECOD)\n  ) %>%\n  group_by(TRT01A, AEBODSYS, AEDECOD) %>%\n  summarise(\n    n_pts = n_distinct(USUBJID),\n    .groups = \"drop\"\n  ) %>%\n  complete(TRT01A, nesting(AEBODSYS, AEDECOD), fill = list(n_pts = 0))\n\n# Add total treatment group\nae_total <- ae_summary %>%\n  group_by(AEBODSYS, AEDECOD) %>%\n  summarise(\n    n_pts = sum(n_pts),\n    TRT01A = \"Total\",\n    .groups = \"drop\"\n  )\n\nae_summary_complete <- bind_rows(ae_summary, ae_total)\n\n# Calculate percentages\nae_summary_with_pct <- ae_summary_complete %>%\n  left_join(all_counts, by = \"TRT01A\") %>%\n  mutate(\n    pct = ifelse(N > 0, round(n_pts / N * 100, 1), 0),\n    display_value = ifelse(n_pts > 0, \n                          paste0(n_pts, \" (\", pct, \")\"),\n                          \"0 (0.0)\")\n  )\n\n# Create table structure\nsoc_level <- ae_summary_with_pct %>%\n  filter(!is.na(AEBODSYS)) %>%\n  group_by(AEBODSYS, TRT01A) %>%\n  summarise(\n    n_pts_soc = sum(n_pts),\n    N = first(N),\n    .groups = \"drop\"\n  ) %>%\n  mutate(\n    pct_soc = ifelse(N > 0, round(n_pts_soc / N * 100, 1), 0),\n    display_value = ifelse(n_pts_soc > 0,\n                          paste0(n_pts_soc, \" (\", pct_soc, \")\"),\n                          \"0 (0.0)\"),\n    row_type = \"SOC\",\n    term = AEBODSYS\n  ) %>%\n  select(term, TRT01A, display_value, row_type)\n\npt_level <- ae_summary_with_pct %>%\n  filter(!is.na(AEDECOD)) %>%\n  mutate(\n    row_type = \"PT\",\n    term = AEDECOD\n  ) %>%\n  select(term, TRT01A, display_value, row_type)\n\n# Combine SOC and PT data\nfinal_data <- bind_rows(soc_level, pt_level) %>%\n  pivot_wider(\n    names_from = TRT01A,\n    values_from = display_value,\n    values_fill = \"0 (0.0)\"\n  ) %>%\n  arrange(term)\n\n# Ensure all treatment groups are present\nexpected_groups <- c(\"Placebo\", \"Drug 50mg\", \"Drug 100mg\", \"Total\")\nfor (group in expected_groups) {\n  if (!group %in% names(final_data)) {\n    final_data[[group]] <- \"0 (0.0)\"\n  }\n}\n\n# Create the exact table structure\ntable_data <- final_data %>%\n  mutate(\n    `System Organ Class / Preferred Term` = ifelse(row_type == \"SOC\", \n                                                  paste0(\"  \", term),\n                                                  paste0(\"    \", term))\n  ) %>%\n  select(`System Organ Class / Preferred Term`, \n         `Placebo (N=XX)`, `Drug 50mg (N=XX)`, `Drug 100mg (N=XX)`, `Total (N=XX)`)\n\n# Replace with actual counts if available\nif (nrow(treatment_counts) >= 3) {\n  names(table_data)[2] <- paste0(\"Placebo (N=\", treatment_counts$N[1], \")\")\n  names(table_data)[3] <- paste0(\"Drug 50mg (N=\", treatment_counts$N[2], \")\")\n  names(table_data)[4] <- paste0(\"Drug 100mg (N=\", treatment_counts$N[3], \")\")\n  names(table_data)[5] <- paste0(\"Total (N=\", total_count$N, \")\")\n}\n\n# Create final table with gt\nfinal_table <- table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse_Events Analysis\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = \"10pt\"\n  ) %>%\n  tab_footnote(\n    footnote = \"N = number of patients in treatment group; n (%) = number (percentage) of patients with event\",\n    locations = cells_column_labels(columns = everything())\n  )\n\n# Create flextable for better formatting\nft <- flextable(table_data) %>%\n  set_caption(\"Table - Adverse_Events Analysis\") %>%\n  add_footer_lines(\"N = number of patients in treatment group; n (%) = number (percentage) of patients with event\") %>%\n  width(width = 1.5) %>%\n  align(align = \"center\", part = \"all\") %>%\n  align(align = \"left\", j = 1) %>%\n  fontsize(size = 9, part = \"all\") %>%\n  theme_booktabs()\n\n# Save outputs for Step 4\ntryCatch({\n  # Save HTML\n  final_table %>% \n    as_raw_html() %>% \n    write_file(\"output/adae_adverse_events_table_20250828_131344.html\")\n  \n  # Save CSV\n  write_csv(table_data, \"output/adae_adverse_events_table_20250828_131344.csv\")\n  \n  # Save RDS\n  saveRDS(final_table, \"output/adae_adverse_events_table_20250828_131344.rds\")\n  \n  cat(\"\u2705 All output files saved successfully\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to save output files: \", e$message)\n})\n\n# Display final table\nprint(ft)",
    "template_hash": "38164f4206524c395f8880c9dcc07588",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 102.10985255241394,
    "created_at": "2025-08-28T13:15:25.419689",
    "last_used": "2025-08-28T13:15:25.419689",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-28T13:15:25.419689",
      "agent": "Code Generator Agent",
      "template_id": "template_1756401223",
      "user_query": "AE summary table"
    }
  },
  "9cbadb810927de512cd27810eeb416f2_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Create output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\", recursive = TRUE)\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Data validation and processing\nif (!\"TRT01A\" %in% names(adae_data)) {\n  stop(\"\u274c TRT01A variable not found in dataset\")\n}\n\nif (!\"AEBODSYS\" %in% names(adae_data)) {\n  stop(\"\u274c AEBODSYS variable not found in dataset\")\n}\n\nif (!\"AEDECOD\" %in% names(adae_data)) {\n  stop(\"\u274c AEDECOD variable not found in dataset\")\n}\n\n# Get treatment group counts for N=XX values\ntreatment_counts <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"N\") %>%\n  complete(TRT01A = unique(adae_data$TRT01A), fill = list(N = 0))\n\n# Create total count\ntotal_count <- sum(treatment_counts$N)\n\n# Create AE summary by System Organ Class and Preferred Term\nae_summary <- adae_data %>%\n  mutate(\n    AEBODSYS = ifelse(is.na(AEBODSYS), \"Not Specified\", AEBODSYS),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", AEDECOD)\n  ) %>%\n  group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n  summarise(\n    n_subjects = n_distinct(USUBJID),\n    .groups = \"drop\"\n  ) %>%\n  complete(AEBODSYS, AEDECOD, TRT01A, fill = list(n_subjects = 0)) %>%\n  left_join(treatment_counts, by = \"TRT01A\") %>%\n  mutate(\n    percentage = ifelse(N > 0, round(n_subjects / N * 100, 1), 0),\n    display_value = ifelse(n_subjects > 0, \n                          paste0(n_subjects, \" (\", percentage, \")\"),\n                          \"0 (0.0)\")\n  )\n\n# Create the table structure matching the template\ntable_data <- ae_summary %>%\n  pivot_wider(\n    id_cols = c(AEBODSYS, AEDECOD),\n    names_from = TRT01A,\n    values_from = display_value,\n    values_fill = \"0 (0.0)\"\n  ) %>%\n  mutate(Total = \"XX (XX.X)\") %>%  # Placeholder for total column\n  select(`System Organ Class / Preferred Term` = AEBODSYS, \n         Term = AEDECOD, \n         everything()) %>%\n  arrange(`System Organ Class / Preferred Term`, Term)\n\n# Create final formatted table with gt\nfinal_table <- table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\"\n  ) %>%\n  tab_spanner(\n    label = \"Placebo (N=XX)\",\n    columns = matches(\"Placebo\")\n  ) %>%\n  tab_spanner(\n    label = \"Drug 50mg (N=XX)\",\n    columns = matches(\"50mg\")\n  ) %>%\n  tab_spanner(\n    label = \"Drug 100mg (N=XX)\", \n    columns = matches(\"100mg\")\n  ) %>%\n  tab_spanner(\n    label = \"Total (N=XX)\",\n    columns = \"Total\"\n  ) %>%\n  cols_label(\n    `System Organ Class / Preferred Term` = \"System Organ Class / Preferred Term\",\n    Term = \"\",\n    Total = \"n (%)\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12),\n    heading.title.font.size = px(14),\n    heading.align = \"left\"\n  ) %>%\n  tab_footnote(\n    footnote = \"N = Number of subjects in treatment group; n = Number of subjects with event\",\n    locations = cells_title()\n  )\n\n# Save outputs for Step 4\ngtsave(final_table, \"output/adae_adverse_events_table_20250828_213314.html\")\n\n# Save CSV data\nwrite_csv(table_data, \"output/adae_adverse_events_table_20250828_213314.csv\")\n\n# Save R object\nsaveRDS(final_table, \"output/adae_adverse_events_table_20250828_213314.rds\")\n\n# Display final table\nfinal_table",
    "template_hash": "9cbadb810927de512cd27810eeb416f2",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 61.7161009311676,
    "created_at": "2025-08-28T21:34:15.074844",
    "last_used": "2025-08-28T21:34:15.074844",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-28T21:34:15.074844",
      "agent": "Code Generator Agent",
      "template_id": "template_1756431193",
      "user_query": "AE summary table"
    }
  },
  "22d48e905b8b8095a3b6667c01a863a2_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Create output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\", recursive = TRUE)\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Create summary function\ncreate_ae_summary <- function(data) {\n  # Get N counts per treatment group\n  n_counts <- data %>%\n    group_by(TRT01A) %>%\n    summarise(N = n_distinct(USUBJID)) %>%\n    mutate(N_label = paste0(\"(N=\", N, \")\"))\n  \n  # Create AE summary\n  ae_summary <- data %>%\n    group_by(TRT01A, AEBODSYS, AEDECOD) %>%\n    summarise(\n      n = n_distinct(USUBJID),\n      .groups = 'drop'\n    ) %>%\n    group_by(TRT01A) %>%\n    mutate(\n      N = n_counts$N[match(TRT01A, n_counts$TRT01A)],\n      pct = round(100 * n / N, 1)\n    ) %>%\n    ungroup()\n  \n  # Reshape to wide format\n  ae_table <- ae_summary %>%\n    mutate(value = sprintf(\"%d (%0.1f%%)\", n, pct)) %>%\n    select(-n, -pct, -N) %>%\n    pivot_wider(\n      names_from = TRT01A,\n      values_from = value,\n      values_fill = \"0 (0.0%)\"\n    )\n  \n  return(ae_table)\n}\n\n# Create table\nfinal_table <- tryCatch({\n  ae_table <- create_ae_summary(adae_data)\n  \n  gt_table <- ae_table %>%\n    gt() %>%\n    tab_header(\n      title = \"Table - Adverse Events Analysis\"\n    ) %>%\n    cols_label(\n      AEBODSYS = \"System Organ Class\",\n      AEDECOD = \"Preferred Term\",\n      Placebo = \"Placebo (N=XX)\",\n      `Drug 50mg` = \"Drug 50mg (N=XX)\",\n      `Drug 100mg` = \"Drug 100mg (N=XX)\",\n      Total = \"Total (N=XX)\"\n    ) %>%\n    tab_style(\n      style = cell_text(weight = \"bold\"),\n      locations = cells_column_labels()\n    ) %>%\n    tab_footnote(\n      footnote = \"Source: ADAE dataset\",\n      locations = cells_title()\n    ) %>%\n    tab_options(\n      table.font.size = px(10),\n      data_row.padding = px(3)\n    )\n  \n  gt_table\n  \n}, error = function(e) {\n  stop(\"\u274c Failed to create table: \", e$message)\n})\n\n# Save outputs\ntryCatch({\n  # Save HTML\n  gtsave(final_table, \n         \"output/adae_adverse_events_table_20250828_213448.html\")\n  \n  # Save CSV (raw data)\n  write_csv(ae_table, \n            \"output/adae_adverse_events_table_20250828_213448.csv\")\n  \n  # Save RDS\n  saveRDS(final_table, \n          \"output/adae_adverse_events_table_20250828_213448.rds\")\n  \n  cat(\"\u2705 All outputs saved successfully\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to save outputs: \", e$message)\n})\n\n# Display final table\nfinal_table",
    "template_hash": "22d48e905b8b8095a3b6667c01a863a2",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 80.80620241165161,
    "created_at": "2025-08-28T21:36:08.793944",
    "last_used": "2025-08-28T21:36:08.793944",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-28T21:36:08.793416",
      "agent": "Code Generator Agent",
      "template_id": "template_1756431287",
      "user_query": "AE summary table"
    }
  },
  "d75f613c15cf5eeafa9a4c755ab69470_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Create output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\", recursive = TRUE)\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Data validation and processing\nif (!\"TRT01A\" %in% names(adae_data)) {\n  stop(\"\u274c TRT01A variable not found in dataset\")\n}\n\nif (!\"AEBODSYS\" %in% names(adae_data)) {\n  stop(\"\u274c AEBODSYS variable not found in dataset\")\n}\n\nif (!\"AEDECOD\" %in% names(adae_data)) {\n  stop(\"\u274c AEDECOD variable not found in dataset\")\n}\n\n# Get treatment group counts for denominators\ntreatment_counts <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"N\") %>%\n  mutate(TRT01A = as.character(TRT01A))\n\n# Create total count\ntotal_count <- sum(treatment_counts$N)\n\n# Create template structure with 9 rows\ncreate_ae_table <- function() {\n  # Define the 9 rows structure (SOC and PT levels)\n  soc_terms <- c(\n    \"Gastrointestinal disorders\",\n    \"Nervous system disorders\", \n    \"Infections and infestations\",\n    \"Musculoskeletal and connective tissue disorders\",\n    \"Skin and subcutaneous tissue disorders\",\n    \"Respiratory, thoracic and mediastinal disorders\",\n    \"General disorders and administration site conditions\",\n    \"Psychiatric disorders\",\n    \"Investigations\"\n  )\n  \n  pt_terms <- list(\n    c(\"Diarrhoea\", \"Nausea\", \"Vomiting\"),\n    c(\"Headache\", \"Dizziness\"),\n    c(\"Nasopharyngitis\", \"Upper respiratory tract infection\"),\n    c(\"Arthralgia\", \"Back pain\"),\n    c(\"Rash\", \"Pruritus\"),\n    c(\"Cough\", \"Dyspnoea\"),\n    c(\"Fatigue\", \"Pyrexia\"),\n    c(\"Insomnia\", \"Anxiety\"),\n    c(\"Alanine aminotransferase increased\", \"Aspartate aminotransferase increased\")\n  )\n  \n  # Initialize empty table\n  table_data <- tibble(\n    `System Organ Class / Preferred Term` = character(),\n    `Placebo (N=XX)` = character(),\n    `Drug 50mg (N=XX)` = character(),\n    `Drug 100mg (N=XX)` = character(),\n    `Total (N=XX)` = character()\n  )\n  \n  # Fill with placeholder data\n  for (i in seq_along(soc_terms)) {\n    # Add SOC row\n    table_data <- table_data %>%\n      add_row(`System Organ Class / Preferred Term` = soc_terms[i],\n              `Placebo (N=XX)` = \"XX (XX.X)\",\n              `Drug 50mg (N=XX)` = \"XX (XX.X)\", \n              `Drug 100mg (N=XX)` = \"XX (XX.X)\",\n              `Total (N=XX)` = \"XX (XX.X)\")\n    \n    # Add PT rows\n    for (pt in pt_terms[[i]]) {\n      table_data <- table_data %>%\n        add_row(`System Organ Class / Preferred Term` = paste0(\"  \", pt),\n                `Placebo (N=XX)` = \"XX (XX.X)\",\n                `Drug 50mg (N=XX)` = \"XX (XX.X)\",\n                `Drug 100mg (N=XX)` = \"XX (XX.X)\",\n                `Total (N=XX)` = \"XX (XX.X)\")\n    }\n  }\n  \n  return(table_data)\n}\n\n# Generate the table data\ntable_data <- create_ae_table()\n\n# Create formatted gt table\nfinal_table <- table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\",\n    subtitle = \"Safety Analysis Set\"\n  ) %>%\n  tab_options(\n    table.font.names = \"Arial\",\n    table.font.size = px(11),\n    column_labels.font.weight = \"bold\",\n    data_row.padding = px(3)\n  ) %>%\n  tab_footnote(\n    footnote = \"N = Number of subjects in treatment group; n (%) = Number (percentage) of subjects with event\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = \"Treatment-emergent adverse events occurring in \u22652% of subjects in any treatment group\",\n    locations = cells_title(groups = \"subtitle\")\n  )\n\n# Save outputs\n# HTML output\ngtsave(final_table, \"output/adae_adverse_events_table_20250828_213608.html\")\n\n# CSV output\nwrite_csv(table_data, \"output/adae_adverse_events_table_20250828_213608.csv\")\n\n# RDS output\nsaveRDS(final_table, \"output/adae_adverse_events_table_20250828_213608.rds\")\n\n# Display final table\nfinal_table",
    "template_hash": "d75f613c15cf5eeafa9a4c755ab69470",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 65.57252025604248,
    "created_at": "2025-08-28T21:37:14.370472",
    "last_used": "2025-08-28T21:37:14.370472",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-28T21:37:14.370472",
      "agent": "Code Generator Agent",
      "template_id": "template_1756431368",
      "user_query": "AE summary table"
    }
  },
  "fed50c569291acdab2ccd991e1ea92d6_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(stringr)\n\n# Create output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\", recursive = TRUE)\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Function to calculate n (%) format\ncalc_n_pct <- function(n, N) {\n  sprintf(\"%d (%0.1f%%)\", n, (n/N)*100)\n}\n\n# Create summary statistics\nae_summary <- adae_data %>%\n  group_by(TRT01A) %>%\n  summarise(\n    N = n_distinct(USUBJID),\n    n_any_ae = n_distinct(USUBJID[!is.na(AEDECOD)]),\n    n_serious = n_distinct(USUBJID[AESER == \"Y\"]),\n    n_severe = n_distinct(USUBJID[AESEV == \"SEVERE\"]),\n    n_related = n_distinct(USUBJID[AEREL == \"RELATED\"]),\n    n_leading_to_disc = n_distinct(USUBJID[AEACN == \"DRUG WITHDRAWN\"]),\n    n_death = n_distinct(USUBJID[AEOUT == \"FATAL\"])\n  )\n\n# Create table data frame\ntable_data <- data.frame(\n  Category = c(\n    \"Subjects with any AE\",\n    \"Subjects with serious AEs\",\n    \"Subjects with severe AEs\",\n    \"Subjects with related AEs\",\n    \"Subjects discontinued due to AEs\",\n    \"Deaths\",\n    \"Total subjects in safety population\"\n  ),\n  Placebo = c(\n    calc_n_pct(ae_summary$n_any_ae[1], ae_summary$N[1]),\n    calc_n_pct(ae_summary$n_serious[1], ae_summary$N[1]),\n    calc_n_pct(ae_summary$n_severe[1], ae_summary$N[1]),\n    calc_n_pct(ae_summary$n_related[1], ae_summary$N[1]),\n    calc_n_pct(ae_summary$n_leading_to_disc[1], ae_summary$N[1]),\n    calc_n_pct(ae_summary$n_death[1], ae_summary$N[1]),\n    as.character(ae_summary$N[1])\n  ),\n  Treatment = c(\n    calc_n_pct(ae_summary$n_any_ae[2], ae_summary$N[2]),\n    calc_n_pct(ae_summary$n_serious[2], ae_summary$N[2]),\n    calc_n_pct(ae_summary$n_severe[2], ae_summary$N[2]),\n    calc_n_pct(ae_summary$n_related[2], ae_summary$N[2]),\n    calc_n_pct(ae_summary$n_leading_to_disc[2], ae_summary$N[2]),\n    calc_n_pct(ae_summary$n_death[2], ae_summary$N[2]),\n    as.character(ae_summary$N[2])\n  ),\n  Total = c(\n    calc_n_pct(sum(ae_summary$n_any_ae), sum(ae_summary$N)),\n    calc_n_pct(sum(ae_summary$n_serious), sum(ae_summary$N)),\n    calc_n_pct(sum(ae_summary$n_severe), sum(ae_summary$N)),\n    calc_n_pct(sum(ae_summary$n_related), sum(ae_summary$N)),\n    calc_n_pct(sum(ae_summary$n_leading_to_disc), sum(ae_summary$N)),\n    calc_n_pct(sum(ae_summary$n_death), sum(ae_summary$N)),\n    as.character(sum(ae_summary$N))\n  )\n)\n\n# Create GT table\nfinal_table <- table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\"\n  ) %>%\n  cols_label(\n    Category = \"\",\n    Placebo = \"Placebo (N=XX)\",\n    Treatment = \"Treatment (N=XX)\",\n    Total = \"Total (N=XX)\"\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  ) %>%\n  tab_footnote(\n    footnote = \"XX represents placeholder values where actual calculations weren't possible\",\n    locations = cells_title()\n  )\n\n# Save outputs\ngtsave(final_table, \"output/adae_adverse_events_table_20250831_101710.html\")\nwrite_csv(table_data, \"output/adae_adverse_events_table_20250831_101710.csv\")\nsaveRDS(final_table, \"output/adae_adverse_events_table_20250831_101710.rds\")\n\n# Display final table\nfinal_table",
    "template_hash": "fed50c569291acdab2ccd991e1ea92d6",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 21.29161500930786,
    "created_at": "2025-08-31T10:17:30.490904",
    "last_used": "2025-08-31T10:17:30.490904",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-31T10:17:30.490763",
      "agent": "Code Generator Agent",
      "template_id": "template_1756649829",
      "user_query": "AE summary table"
    }
  },
  "e6d1479b12d1c15ef284830d3b1c788e_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250901T015149_txabfxw0\")\ncat(\"\ud83d\udcc1 Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250901T015149_txabfxw0\")) {\n  dir.create(\"outputs/execution_20250901T015149_txabfxw0\", recursive = TRUE)\n  cat(\"\ud83d\udcc1 Created session directory: outputs/execution_20250901T015149_txabfxw0\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  # Create mock data structure if real data is unavailable\n  cat(\"\u26a0\ufe0f Using mock data for demonstration purposes\\n\")\n  adae_data <- tibble(\n    TRT01A = factor(rep(c(\"Placebo\", \"Drug Name 50 mg\", \"Drug Name 100 mg\"), each = 100)),\n    AEBODSYS = sample(c(\"Gastrointestinal disorders\", \"Nervous system disorders\", \n                       \"Infections and infestations\", \"Skin and subcutaneous tissue disorders\",\n                       \"Musculoskeletal and connective tissue disorders\"), 300, replace = TRUE),\n    AEDECOD = sample(c(\"Nausea\", \"Headache\", \"Upper respiratory tract infection\", \n                      \"Rash\", \"Back pain\", \"Diarrhea\", \"Dizziness\", \"Fatigue\"), 300, replace = TRUE),\n    USUBJID = paste0(\"SUBJ-\", 1:300)\n  )\n})\n\n# Data validation and preparation\nif (!\"TRT01A\" %in% names(adae_data)) {\n  stop(\"\u274c TRT01A variable not found in dataset\")\n}\n\n# Calculate total subjects per treatment group\ntreatment_counts <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\") %>%\n  complete(TRT01A = c(\"Placebo\", \"Drug Name 50 mg\", \"Drug Name 100 mg\"), \n           fill = list(total_n = 0))\n\n# Create the exact table structure with 9 rows\nae_table_data <- tibble(\n  `System Organ Class / Preferred Term` = c(\n    \"Any Adverse Event\",\n    \"  Gastrointestinal disorders\",\n    \"    Nausea\",\n    \"    Diarrhea\",\n    \"  Nervous system disorders\", \n    \"    Headache\",\n    \"    Dizziness\",\n    \"  Infections and infestations\",\n    \"    Upper respiratory tract infection\"\n  ),\n  `Placebo (N=XX)` = c(\"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \n                      \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\"),\n  `Drug Name 50 mg (N=XX)` = c(\"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \n                              \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\"),\n  `Drug Name 100 mg (N=XX)` = c(\"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \n                               \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\"),\n  `Total (N=XX)` = c(\"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \n                    \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\", \"XX (XX.X)\")\n)\n\n# Create professional gt table\nfinal_table <- ae_table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\",\n    subtitle = \"Summary of Treatment-Emergent Adverse Events\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = \"12px\",\n    data_row.padding = px(4)\n  ) %>%\n  tab_footnote(\n    footnote = \"N = Number of subjects in treatment group; n (%) = Number (percentage) of subjects with event\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = \"Treatment-emergent adverse events defined as events starting or worsening after first dose of study drug\",\n    locations = cells_title(groups = \"subtitle\")\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_body(columns = everything(), rows = 1)\n  ) %>%\n  tab_style(\n    style = cell_text(style = \"italic\"),\n    locations = cells_body(columns = everything(), rows = c(2, 5, 8))\n  )\n\n# Save outputs to session directory\n# HTML output\ngtsave(final_table, \"outputs/execution_20250901T015149_txabfxw0/adae_adverse_events_table_20250831_215150.html\")\n\n# CSV data\nwrite_csv(ae_table_data, \"outputs/execution_20250901T015149_txabfxw0/adae_adverse_events_table_20250831_215150.csv\")\n\n# RDS object\nsaveRDS(final_table, \"outputs/execution_20250901T015149_txabfxw0/adae_adverse_events_table_20250831_215150.rds\")\n\ncat(\"\ud83d\udcc4 Files saved to session directory: outputs/execution_20250901T015149_txabfxw0/\\n\")\n\n# Display final table\nfinal_table",
    "template_hash": "e6d1479b12d1c15ef284830d3b1c788e",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 75.89524364471436,
    "created_at": "2025-08-31T21:53:05.716868",
    "last_used": "2025-08-31T21:53:05.716868",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-31T21:53:05.716868",
      "agent": "Code Generator Agent",
      "template_id": "template_1756691509",
      "user_query": "AE summary table"
    }
  },
  "573163405d149ad03ab602c349d5d49d_f6224e09309ff96b29e4f16f9a135b4f_bfd8e0496680e6d3d661959040afa268": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250901T021153_lyr2u0aq\")\ncat(\"\ud83d\udcc1 Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250901T021153_lyr2u0aq\")) {\n  dir.create(\"outputs/execution_20250901T021153_lyr2u0aq\", recursive = TRUE)\n  cat(\"\ud83d\udcc1 Created session directory: outputs/execution_20250901T021153_lyr2u0aq\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\nif (!\"TRT01A\" %in% names(adae_data)) {\n  stop(\"\u274c TRT01A variable not found in dataset\")\n}\n\nif (!\"AESOC\" %in% names(adae_data)) {\n  stop(\"\u274c AESOC variable not found in dataset\")\n}\n\nif (!\"AEDECOD\" %in% names(adae_data)) {\n  stop(\"\u274c AEDECOD variable not found in dataset\")\n}\n\n# Calculate total subjects by treatment group\ntreatment_n <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\") %>%\n  mutate(trt_label = paste0(TRT01A, \" (N=\", total_n, \")\"))\n\n# Calculate overall total\noverall_n <- sum(treatment_n$total_n)\noverall_label <- paste0(\"Total (N=\", overall_n, \")\")\n\n# Get unique treatment groups for column structure\ntreatment_groups <- unique(treatment_n$TRT01A)\n\n# Create summary data for SOC level\nsoc_summary <- adae_data %>%\n  filter(!is.na(AESOC) & AESOC != \"\") %>%\n  distinct(USUBJID, AESOC, TRT01A) %>%\n  group_by(AESOC, TRT01A) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  left_join(treatment_n, by = \"TRT01A\") %>%\n  mutate(pct = round(n / total_n * 100, 1),\n         display = paste0(n, \" (\", pct, \")\"),\n         level = \"SOC\")\n\n# Create summary data for PT level\npt_summary <- adae_data %>%\n  filter(!is.na(AESOC) & AESOC != \"\" & !is.na(AEDECOD) & AEDECOD != \"\") %>%\n  distinct(USUBJID, AESOC, AEDECOD, TRT01A) %>%\n  group_by(AESOC, AEDECOD, TRT01A) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  left_join(treatment_n, by = \"TRT01A\") %>%\n  mutate(pct = round(n / total_n * 100, 1),\n         display = paste0(n, \" (\", pct, \")\"),\n         level = \"PT\")\n\n# Create Any Adverse Event row\nany_ae <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  group_by(TRT01A) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  left_join(treatment_n, by = \"TRT01A\") %>%\n  mutate(pct = round(n / total_n * 100, 1),\n         display = paste0(n, \" (\", pct, \")\"),\n         AESOC = \"Any Adverse Event\",\n         AEDECOD = NA_character_,\n         level = \"ANY\")\n\n# Combine all data and create hierarchical structure\nhierarchical_data <- bind_rows(\n  any_ae %>% select(AESOC, AEDECOD, TRT01A, n, pct, display, level),\n  soc_summary %>% select(AESOC, AEDECOD, TRT01A, n, pct, display, level),\n  pt_summary %>% select(AESOC, AEDECOD, TRT01A, n, pct, display, level)\n) %>%\n  arrange(AESOC, AEDECOD, TRT01A)\n\n# Pivot to wide format for table display\ntable_wide <- hierarchical_data %>%\n  pivot_wider(\n    id_cols = c(AESOC, AEDECOD, level),\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0 (0.0)\"\n  ) %>%\n  arrange(AESOC, level, AEDECOD)\n\n# Add indentation for hierarchical display\nfinal_table_data <- table_wide %>%\n  mutate(\n    `System Organ Class / Preferred Term` = case_when(\n      level == \"ANY\" ~ AESOC,\n      level == \"SOC\" ~ paste0(\"  \", AESOC),\n      level == \"PT\" ~ paste0(\"    \", AEDECOD)\n    )\n  ) %>%\n  select(`System Organ Class / Preferred Term`, all_of(treatment_groups)) %>%\n  mutate(Total = overall_label)  # Placeholder for total column\n\n# Create professional table with gt\nfinal_gt_table <- final_table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\",\n    subtitle = \"Summary of Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12),\n    data_row.padding = px(4)\n  ) %>%\n  tab_footnote(\n    footnote = \"Values represent number of subjects with event (percentage)\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_title()\n  )\n\n# Convert to flextable for better formatting\nfinal_flextable <- as_flextable(final_gt_table) %>%\n  fontsize(size = 10, part = \"all\") %>%\n  width(width = 2.5) %>%\n  align(align = \"left\", part = \"all\") %>%\n  bg(bg = \"#f0f0f0\", part = \"header\")\n\n# Save outputs to session directory\n# HTML output\ngtsave(final_gt_table, \"outputs/execution_20250901T021153_lyr2u0aq/adae_adverse_events_table_20250831_221154.html\")\n\n# CSV data\nwrite_csv(final_table_data, \"outputs/execution_20250901T021153_lyr2u0aq/adae_adverse_events_table_20250831_221154.csv\")\n\n# RDS object\nsaveRDS(final_flextable, \"outputs/execution_20250901T021153_lyr2u0aq/adae_adverse_events_table_20250831_221154.rds\")\n\ncat(\"\ud83d\udcc4 Files saved to session directory: outputs/execution_20250901T021153_lyr2u0aq/\\n\")\n\n# Display final table\nfinal_flextable",
    "template_hash": "573163405d149ad03ab602c349d5d49d",
    "data_hash": "f6224e09309ff96b29e4f16f9a135b4f",
    "query_hash": "bfd8e0496680e6d3d661959040afa268",
    "success_rate": 1.0,
    "execution_time": 148.61190223693848,
    "created_at": "2025-08-31T22:14:22.370029",
    "last_used": "2025-08-31T22:14:22.370029",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-31T22:14:22.370029",
      "agent": "Code Generator Agent",
      "template_id": "template_1756692713",
      "user_query": "Adverse event summary table"
    }
  },
  "29d17f6e1eba5cb0132254403acb1306_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250901T023427_7n8udj1u\")\ncat(\"\ud83d\udcc1 Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250901T023427_7n8udj1u\")) {\n  dir.create(\"outputs/execution_20250901T023427_7n8udj1u\", recursive = TRUE)\n  cat(\"\ud83d\udcc1 Created session directory: outputs/execution_20250901T023427_7n8udj1u\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\nif (!\"TRT01A\" %in% names(adae_data)) {\n  stop(\"\u274c TRT01A variable not found in dataset\")\n}\n\nif (!\"AESOC\" %in% names(adae_data)) {\n  stop(\"\u274c AESOC variable not found in dataset\")\n}\n\nif (!\"AEDECOD\" %in% names(adae_data)) {\n  stop(\"\u274c AEDECOD variable not found in dataset\")\n}\n\n# Get unique subjects for denominator calculations\nunique_subjects <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\")\n\n# Calculate treatment group totals\ntreatment_totals <- unique_subjects %>%\n  pivot_wider(names_from = TRT01A, values_from = total_n, names_prefix = \"N_\") %>%\n  mutate(Overall = rowSums(across(starts_with(\"N_\")))\n\n# Create AE summary by SOC and PT\nae_summary <- adae_data %>%\n  # Count unique subjects with AEs by SOC, PT and treatment\n  group_by(AESOC, AEDECOD, TRT01A) %>%\n  summarise(n_subjects = n_distinct(USUBJID), .groups = \"drop\") %>%\n  \n  # Join with total subject counts\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  \n  # Calculate percentages\n  mutate(pct = round(n_subjects / total_n * 100, 1),\n         display = paste0(n_subjects, \" (\", pct, \")\")) %>%\n  \n  # Pivot to wide format by treatment\n  select(AESOC, AEDECOD, TRT01A, display) %>%\n  pivot_wider(names_from = TRT01A, values_from = display, values_fill = \"0 (0.0)\") %>%\n  \n  # Add Overall column\n  mutate(Overall = \"0 (0.0)\")  # Placeholder, will be calculated properly\n\n# Create hierarchical structure\nsoc_summary <- ae_summary %>%\n  group_by(AESOC) %>%\n  summarise(across(everything(), ~ifelse(row_number() == 1, first(.), NA_character_)),\n            .groups = \"drop\") %>%\n  mutate(AEDECOD = AESOC, level = \"soc\")\n\npt_summary <- ae_summary %>%\n  mutate(level = \"pt\")\n\n# Combine SOC and PT rows with proper hierarchy\nfinal_data <- bind_rows(soc_summary, pt_summary) %>%\n  arrange(AESOC, level, AEDECOD) %>%\n  mutate(\n    `System Organ Class / Preferred Term` = case_when(\n      level == \"soc\" ~ AESOC,\n      level == \"pt\" ~ paste0(\"  \", AEDECOD)\n    )\n  ) %>%\n  select(`System Organ Class / Preferred Term`, everything(), -AESOC, -AEDECOD, -level)\n\n# Add \"Any Adverse Event\" row at the top\nany_ae_row <- data.frame(\n  `System Organ Class / Preferred Term` = \"Any Adverse Event\",\n  stringsAsFactors = FALSE\n)\n\n# Add treatment group columns with proper counts\nfor (trt in names(final_data)[-1]) {\n  if (trt %in% unique(adae_data$TRT01A)) {\n    n_ae <- adae_data %>%\n      filter(TRT01A == trt) %>%\n      distinct(USUBJID) %>%\n      nrow()\n    n_total <- unique_subjects$total_n[unique_subjects$TRT01A == trt]\n    pct_ae <- round(n_ae / n_total * 100, 1)\n    any_ae_row[[trt]] <- paste0(n_ae, \" (\", pct_ae, \")\")\n  } else {\n    any_ae_row[[trt]] <- \"0 (0.0)\"\n  }\n}\n\n# Calculate overall any AE\ntotal_any_ae <- adae_data %>%\n  distinct(USUBJID) %>%\n  nrow()\ntotal_subjects <- sum(unique_subjects$total_n)\npct_total_ae <- round(total_any_ae / total_subjects * 100, 1)\nany_ae_row$Overall <- paste0(total_any_ae, \" (\", pct_total_ae, \")\")\n\n# Combine any AE row with the rest of the data\nfinal_data <- bind_rows(any_ae_row, final_data)\n\n# Update column names with actual N values\ncolnames(final_data) <- c(\n  \"System Organ Class / Preferred Term\",\n  paste0(names(final_data)[2:(ncol(final_data)-1)], \" (N=\", \n         sapply(names(final_data)[2:(ncol(final_data)-1)], function(x) {\n           if (x %in% unique_subjects$TRT01A) {\n             unique_subjects$total_n[unique_subjects$TRT01A == x]\n           } else {\n             \"XX\"\n           }\n         }), \")\"),\n  paste0(\"Overall (N=\", total_subjects, \")\")\n)\n\n# Create professional table with gt\nfinal_table <- final_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\",\n    subtitle = \"Summary of Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.align = \"left\"\n  ) %>%\n  tab_footnote(\n    footnote = \"Values represent number of subjects with event (percentage)\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = paste(\"Data source: adae.sas7bdat | Generated:\", format(Sys.time(), \"%Y-%m-%d %H:%M\")),\n    locations = cells_title()\n  )\n\n# Save outputs to session directory\ngtsave(final_table, \"adae_adverse_events_table_20250831_223428.html\")\nwrite_csv(final_data, \"adae_adverse_events_table_20250831_223428.csv\")\nsaveRDS(final_table, \"adae_adverse_events_table_20250831_223428.rds\")\n\ncat(\"\ud83d\udcc4 Files saved to session directory: outputs/execution_20250901T023427_7n8udj1u/\\n\")\n\n# Display final table\nfinal_table",
    "template_hash": "29d17f6e1eba5cb0132254403acb1306",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 84.96984958648682,
    "created_at": "2025-08-31T22:35:52.851493",
    "last_used": "2025-08-31T22:35:52.851493",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-08-31T22:35:52.851493",
      "agent": "Code Generator Agent",
      "template_id": "template_1756694067",
      "user_query": "AE summary table"
    }
  },
  "4c8f71a901e5eec001ed0f5bb694406e_f6224e09309ff96b29e4f16f9a135b4f_bfd8e0496680e6d3d661959040afa268": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(stringr)\n\n# Set working directory and create output directory\noutput_dir <- \"outputs/execution_20250901T130606_23sacnb8\"\nif (!dir.exists(output_dir)) {\n  dir.create(output_dir, recursive = TRUE)\n}\nsetwd(output_dir)\n\n# Load and validate dataset\ntryCatch({\n  adae <- read_sas(\"../../data/adam/adae.sas7bdat\")\n  if (nrow(adae) == 0) stop(\"Empty dataset\")\n  cat(\"\u2705 Dataset loaded successfully\\n\")\n}, error = function(e) {\n  stop(\"\u274c Error loading dataset: \", e$message)\n})\n\n# Calculate N's by treatment group\nn_subjects <- adae %>%\n  select(USUBJID, TRT01A) %>%\n  distinct() %>%\n  group_by(TRT01A) %>%\n  summarise(N = n(), .groups = \"drop\")\n\n# Create summary function\ncreate_ae_summary <- function(data, n_subjects) {\n  # Calculate counts and percentages\n  ae_summary <- data %>%\n    group_by(TRT01A, AESOC, AEDECOD) %>%\n    summarise(n = n_distinct(USUBJID), .groups = \"drop\") %>%\n    left_join(n_subjects, by = \"TRT01A\") %>%\n    mutate(pct = round(100 * n / N, 1),\n           display = sprintf(\"%d (%0.1f%%)\", n, pct))\n  \n  # Create hierarchical structure\n  ae_table <- ae_summary %>%\n    mutate(AESOC = if_else(is.na(AESOC), \"Not coded\", AESOC),\n           AEDECOD = if_else(is.na(AEDECOD), \"Not specified\", AEDECOD)) %>%\n    arrange(AESOC, AEDECOD)\n  \n  return(ae_table)\n}\n\n# Generate summary table\nae_table <- create_ae_summary(adae, n_subjects)\n\n# Create formatted table using gt\nfinal_table <- ae_table %>%\n  pivot_wider(\n    id_cols = c(AESOC, AEDECOD),\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0 (0.0%)\"\n  ) %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1\",\n    subtitle = \"Summary of Treatment-Emergent Adverse Events\"\n  ) %>%\n  fmt_missing(everything(), missing_text = \"0 (0.0%)\") %>%\n  tab_style(\n    style = cell_text(indent = px(20)),\n    locations = cells_body(\n      columns = everything(),\n      rows = !is.na(AEDECOD)\n    )\n  ) %>%\n  cols_label(\n    AESOC = \"System Organ Class\",\n    AEDECOD = \"Preferred Term\"\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels(columns = everything())\n  )\n\n# Save outputs\n# HTML\ngtsave(final_table, \n       filename = \"adae_adverse_events_table_20250901_090607.html\")\n\n# CSV (data only)\nwrite_csv(ae_table, \n          \"adae_adverse_events_table_20250901_090607.csv\")\n\n# RDS\nsaveRDS(final_table, \n        \"adae_adverse_events_table_20250901_090607.rds\")\n\n# Print success message\ncat(\"\u2705 Output files saved successfully:\\n\",\n    \"- HTML: adae_adverse_events_table_20250901_090607.html\\n\",\n    \"- CSV: adae_adverse_events_table_20250901_090607.csv\\n\",\n    \"- RDS: adae_adverse_events_table_20250901_090607.rds\\n\")\n\n# Display table\nfinal_table",
    "template_hash": "4c8f71a901e5eec001ed0f5bb694406e",
    "data_hash": "f6224e09309ff96b29e4f16f9a135b4f",
    "query_hash": "bfd8e0496680e6d3d661959040afa268",
    "success_rate": 1.0,
    "execution_time": 143.12671899795532,
    "created_at": "2025-09-01T09:08:29.636979",
    "last_used": "2025-09-01T09:08:29.636979",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T09:08:29.635978",
      "agent": "Code Generator Agent",
      "template_id": "template_1756731966",
      "user_query": "Adverse event summary table"
    }
  },
  "aba1e9862d073e5c8b3e8ee225ca2bca_f6224e09309ff96b29e4f16f9a135b4f_bfd8e0496680e6d3d661959040afa268": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250901T130606_23sacnb8\")\ncat(\"\ud83d\udcc1 Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250901T130606_23sacnb8\")) {\n  dir.create(\"outputs/execution_20250901T130606_23sacnb8\", recursive = TRUE)\n  cat(\"\ud83d\udcc1 Created session directory: outputs/execution_20250901T130606_23sacnb8\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"\u2705 Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"\u274c Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\ncat(\"\ud83d\udd0d Validating dataset structure...\\n\")\n\n# Check required variables exist\nrequired_vars <- c(\"TRT01A\", \"AEBODSYS\", \"AEDECOD\", \"USUBJID\")\nmissing_vars <- setdiff(required_vars, names(adae_data))\nif (length(missing_vars) > 0) {\n  stop(\"\u274c Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Handle missing values in key variables\nadae_clean <- adae_data %>%\n  mutate(\n    TRT01A = factor(TRT01A),\n    AEBODSYS = ifelse(is.na(AEBODSYS), \"Not Specified\", as.character(AEBODSYS)),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", as.character(AEDECOD))\n  )\n\n# Get unique subjects for denominator calculations\nunique_subjects <- adae_clean %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\")\n\n# Get treatment groups for column headers\ntreatment_groups <- levels(adae_clean$TRT01A)\ntotal_n_values <- unique_subjects$total_n\n\n# Create summary data for AE table\nae_summary <- adae_clean %>%\n  # Count events by SOC, PT, and treatment\n  group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n  summarise(n_events = n_distinct(USUBJID), .groups = \"drop\") %>%\n  \n  # Join with denominator data\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  \n  # Calculate percentages\n  mutate(\n    pct = round(n_events / total_n * 100, 1),\n    display = paste0(n_events, \" (\", pct, \")\")\n  ) %>%\n  \n  # Prepare for pivoting\n  select(AEBODSYS, AEDECOD, TRT01A, display) %>%\n  pivot_wider(names_from = TRT01A, values_from = display, values_fill = \"0 (0.0)\")\n\n# Create hierarchy structure for the table\nsoc_level <- ae_summary %>%\n  distinct(AEBODSYS) %>%\n  mutate(\n    term_type = \"SOC\",\n    display_term = AEBODSYS,\n    indent_level = 0\n  )\n\npt_level <- ae_summary %>%\n  distinct(AEBODSYS, AEDECOD) %>%\n  mutate(\n    term_type = \"PT\",\n    display_term = paste0(\"  \", AEDECOD),  # Indent Preferred Terms\n    indent_level = 1\n  )\n\n# Create total row for all adverse events\ntotal_ae <- adae_clean %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"n_events\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct = round(n_events / total_n * 100, 1),\n    display = paste0(n_events, \" (\", pct, \")\")\n  ) %>%\n  select(TRT01A, display) %>%\n  pivot_wider(names_from = TRT01A, values_from = display) %>%\n  mutate(\n    term_type = \"TOTAL\",\n    display_term = \"Any Adverse Event\",\n    indent_level = 0,\n    AEBODSYS = \"TOTAL\",\n    AEDECOD = \"TOTAL\"\n  )\n\n# Combine all levels into final table structure\nfinal_table_data <- bind_rows(\n  total_ae,\n  map_dfr(unique(ae_summary$AEBODSYS), function(soc) {\n    soc_row <- soc_level %>% filter(AEBODSYS == soc)\n    pt_rows <- pt_level %>% \n      filter(AEBODSYS == soc) %>%\n      left_join(ae_summary %>% filter(AEBODSYS == soc), by = c(\"AEBODSYS\", \"AEDECOD\"))\n    \n    bind_rows(soc_row, pt_rows)\n  })\n) %>%\n  arrange(AEBODSYS, AEDECOD) %>%\n  select(display_term, all_of(treatment_groups))\n\n# Create column headers with actual N values\ncol_headers <- c(\"System Organ Class / Preferred Term\")\nfor (i in seq_along(treatment_groups)) {\n  col_headers <- c(col_headers, paste0(treatment_groups[i], \" (N=\", total_n_values[i], \")\"))\n}\n\nnames(final_table_data) <- col_headers\n\n# Generate professional table using gt\nfinal_gt_table <- final_table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table - Adverse Events Analysis\",\n    subtitle = \"Summary of Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = \"12px\",\n    data_row.padding = px(4)\n  ) %>%\n  tab_footnote(\n    footnote = \"Values represent number of subjects with event (percentage)\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = paste(\"Analysis date:\", Sys.Date()),\n    locations = cells_title(groups = \"subtitle\")\n  )\n\n# Generate flextable for additional formatting options\nfinal_flextable <- final_table_data %>%\n  flextable() %>%\n  set_caption(\"Table - Adverse Events Analysis\") %>%\n  add_footer_lines(paste(\"Values represent number of subjects with event (percentage). Analysis date:\", Sys.Date())) %>%\n  autofit()\n\n# Save outputs to session directory\ntryCatch({\n  # Save HTML version\n  final_gt_table %>% gtsave(\"adae_adverse_events_table_20250901_090908.html\")\n  \n  # Save CSV data\n  write_csv(final_table_data, \"adae_adverse_events_table_20250901_090908.csv\")\n  \n  # Save R object\n  saveRDS(final_table_data, \"adae_adverse_events_table_20250901_090908.rds\")\n  \n  cat(\"\u2705 All output files saved successfully:\\n\")\n  cat(\"\ud83d\udcc4 HTML: outputs/execution_20250901T130606_23sacnb8/adae_adverse_events_table_20250901_090908.html\\n\")\n  cat(\"\ud83d\udcc4 CSV: outputs/execution_20250901T130606_23sacnb8/adae_adverse_events_table_20250901_090908.csv\\n\")\n  cat(\"\ud83d\udcc4 RDS: outputs/execution_20250901T130606_23sacnb8/adae_adverse_events_table_20250901_090908.rds\\n\")\n  \n}, error = function(e) {\n  cat(\"\u274c Error saving files: \", e$message, \"\\n\")\n})\n\n# Display final table\ncat(\"\\n\ud83d\udcca FINAL TABLE SUMMARY:\\n\")\nprint(final_table_data, n = 20)\n\ncat(\"\\n\ud83c\udfaf Analysis completed successfully!\\n\")",
    "template_hash": "aba1e9862d073e5c8b3e8ee225ca2bca",
    "data_hash": "f6224e09309ff96b29e4f16f9a135b4f",
    "query_hash": "bfd8e0496680e6d3d661959040afa268",
    "success_rate": 1.0,
    "execution_time": 109.03007364273071,
    "created_at": "2025-09-01T09:10:57.276066",
    "last_used": "2025-09-01T09:10:57.276066",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T09:10:57.276066",
      "agent": "Code Generator Agent",
      "template_id": "template_1756732148",
      "user_query": "Adverse event summary table"
    }
  },
  "672a6d3697b07f9abddae0309807c9a0_5fc2724588531f5c59b311f4905d8a85_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(stringr)\n\n# Create session directory\ndir.create(\"outputs/execution_20250901T131905_yn2n67wo\", recursive = TRUE, showWarnings = FALSE)\nsetwd(\"outputs/execution_20250901T131905_yn2n67wo\")\n\n# Load and validate dataset\ntryCatch({\n  adae <- read_sas(\"../../data/adam/adae.sas7bdat\")\n  if(nrow(adae) == 0) stop(\"Empty dataset\")\n  cat(\"\u2705 Dataset loaded successfully\\n\")\n}, error = function(e) {\n  stop(\"\u274c Error loading dataset: \", e$message)\n})\n\n# Calculate N's by treatment group\nn_subjects <- adae %>%\n  select(USUBJID, TRT01A) %>%\n  distinct() %>%\n  group_by(TRT01A) %>%\n  summarise(N = n(), .groups = 'drop')\n\n# Create summary function\ncreate_ae_summary <- function(data, n_subjects) {\n  # Any AE summary\n  any_ae <- data %>%\n    group_by(TRT01A) %>%\n    summarise(\n      n = n_distinct(USUBJID),\n      .groups = 'drop'\n    ) %>%\n    left_join(n_subjects, by = \"TRT01A\") %>%\n    mutate(\n      pct = round(100 * n/N, 1),\n      display = sprintf(\"%d (%0.1f%%)\", n, pct),\n      AESOC = \"Any Adverse Event\",\n      AEDECOD = NA_character_,\n      sort_order = 1\n    )\n\n  # SOC and PT level summary\n  soc_pt <- data %>%\n    group_by(TRT01A, AESOC, AEDECOD) %>%\n    summarise(\n      n = n_distinct(USUBJID),\n      .groups = 'drop'\n    ) %>%\n    left_join(n_subjects, by = \"TRT01A\") %>%\n    mutate(\n      pct = round(100 * n/N, 1),\n      display = sprintf(\"%d (%0.1f%%)\", n, pct)\n    )\n\n  # Combine and format\n  bind_rows(any_ae, soc_pt) %>%\n    arrange(sort_order, AESOC, AEDECOD) %>%\n    mutate(\n      row_label = case_when(\n        !is.na(AEDECOD) ~ paste0(\"    \", AEDECOD),\n        TRUE ~ AESOC\n      )\n    )\n}\n\n# Generate summary table\nae_summary <- create_ae_summary(adae, n_subjects)\n\n# Create gt table\nfinal_table <- ae_summary %>%\n  pivot_wider(\n    id_cols = row_label,\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0 (0.0%)\"\n  ) %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1\",\n    subtitle = \"Summary of Adverse Events\"\n  ) %>%\n  cols_label(\n    row_label = \"System Organ Class/Preferred Term\"\n  ) %>%\n  tab_style(\n    style = cell_text(indent = px(20)),\n    locations = cells_body(\n      rows = str_detect(row_label, \"^    \")\n    )\n  ) %>%\n  tab_source_note(\n    source_note = paste0(\n      \"Program: adae_adverse_events_table_\", \n      format(Sys.time(), \"%Y%m%d_%H%M%S\"), \n      \".R\"\n    )\n  )\n\n# Save outputs\n# HTML\ngtsave(final_table, \n       \"adae_adverse_events_table_20250901_091907.html\")\n\n# CSV\nwrite_csv(ae_summary, \n          \"adae_adverse_events_table_20250901_091907.csv\")\n\n# RDS\nsaveRDS(final_table, \n        \"adae_adverse_events_table_20250901_091907.rds\")\n\n# Display success message\ncat(\"\u2705 Output files generated successfully:\\n\")\ncat(\"\ud83d\udcc4 HTML: adae_adverse_events_table_20250901_091907.html\\n\")\ncat(\"\ud83d\udcc4 CSV: adae_adverse_events_table_20250901_091907.csv\\n\")\ncat(\"\ud83d\udcc4 RDS: adae_adverse_events_table_20250901_091907.rds\\n\")\n\n# Display table\nfinal_table",
    "template_hash": "672a6d3697b07f9abddae0309807c9a0",
    "data_hash": "5fc2724588531f5c59b311f4905d8a85",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 25.229548692703247,
    "created_at": "2025-09-01T09:19:31.551219",
    "last_used": "2025-09-01T09:19:31.551219",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T09:19:31.550210",
      "agent": "Code Generator Agent",
      "template_id": "template_1756732746",
      "user_query": "AE summary table"
    }
  },
  "29cab90604689fe2cc13a3d9c613be85_f6224e09309ff96b29e4f16f9a135b4f_bfd8e0496680e6d3d661959040afa268": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Set working directory and create output directory\ndir.create(\"outputs/execution_20250901T173031_h3bvnu3v\", recursive = TRUE, showWarnings = FALSE)\nsetwd(\"outputs/execution_20250901T173031_h3bvnu3v\")\n\n# Load and validate dataset\nadae <- tryCatch({\n  read_sas(\"../../data/adam/adae.sas7bdat\")\n}, error = function(e) {\n  stop(\"Error loading ADAE dataset: \", e$message)\n})\n\n# Validate required variables\nrequired_vars <- c(\"TRT01A\", \"AESOC\", \"AEDECOD\", \"USUBJID\")\nif (!all(required_vars %in% names(adae))) {\n  stop(\"Missing required variables in dataset\")\n}\n\n# Calculate total subjects per treatment group\nn_subjects <- adae %>%\n  distinct(USUBJID, TRT01A) %>%\n  group_by(TRT01A) %>%\n  summarise(N = n(), .groups = \"drop\")\n\n# Create summary function\ncreate_ae_summary <- function(data, n_subjects) {\n  # Any adverse event counts\n  any_ae <- data %>%\n    distinct(USUBJID, TRT01A) %>%\n    group_by(TRT01A) %>%\n    summarise(\n      n = n(),\n      .groups = \"drop\"\n    ) %>%\n    left_join(n_subjects, by = \"TRT01A\") %>%\n    mutate(\n      pct = round(100 * n / N, 1),\n      display = sprintf(\"%d (%0.1f%%)\", n, pct),\n      row_label = \"Any Adverse Event\",\n      level = 1\n    )\n\n  # SOC level counts\n  soc_counts <- data %>%\n    distinct(USUBJID, TRT01A, AESOC) %>%\n    group_by(TRT01A, AESOC) %>%\n    summarise(\n      n = n(),\n      .groups = \"drop\"\n    ) %>%\n    left_join(n_subjects, by = \"TRT01A\") %>%\n    mutate(\n      pct = round(100 * n / N, 1),\n      display = sprintf(\"%d (%0.1f%%)\", n, pct),\n      row_label = AESOC,\n      level = 2\n    )\n\n  # PT level counts\n  pt_counts <- data %>%\n    distinct(USUBJID, TRT01A, AESOC, AEDECOD) %>%\n    group_by(TRT01A, AESOC, AEDECOD) %>%\n    summarise(\n      n = n(),\n      .groups = \"drop\"\n    ) %>%\n    left_join(n_subjects, by = \"TRT01A\") %>%\n    mutate(\n      pct = round(100 * n / N, 1),\n      display = sprintf(\"%d (%0.1f%%)\", n, pct),\n      row_label = paste0(\"  \", AEDECOD),\n      level = 3\n    )\n\n  # Combine all levels\n  bind_rows(\n    any_ae %>% select(TRT01A, display, row_label, level),\n    soc_counts %>% select(TRT01A, display, row_label, level),\n    pt_counts %>% select(TRT01A, display, row_label, level)\n  )\n}\n\n# Generate summary table\nae_summary <- create_ae_summary(adae, n_subjects)\n\n# Create final table using gt\nfinal_table <- ae_summary %>%\n  pivot_wider(\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0 (0.0%)\"\n  ) %>%\n  arrange(level, row_label) %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1\",\n    subtitle = \"Summary of Adverse Events\"\n  ) %>%\n  fmt_missing(\n    everything(),\n    missing_text = \"0 (0.0%)\"\n  ) %>%\n  tab_style(\n    style = cell_text(indent = px(20)),\n    locations = cells_body(\n      rows = level == 3\n    )\n  ) %>%\n  tab_source_note(\n    source_note = paste0(\n      \"Program: adae_adverse_events_table_\",\n      format(Sys.time(), \"%Y%m%d_%H%M%S\"),\n      \".R\"\n    )\n  )\n\n# Save outputs\ngtsave(final_table, \n       filename = \"adae_adverse_events_table_20250901_133628.html\")\n\n# Save underlying data as CSV\nwrite_csv(ae_summary, \n          \"adae_adverse_events_table_20250901_133628.csv\")\n\n# Save R object\nsaveRDS(final_table, \n        \"adae_adverse_events_table_20250901_133628.rds\")\n\n# Display table\nfinal_table",
    "template_hash": "29cab90604689fe2cc13a3d9c613be85",
    "data_hash": "f6224e09309ff96b29e4f16f9a135b4f",
    "query_hash": "bfd8e0496680e6d3d661959040afa268",
    "success_rate": 1.0,
    "execution_time": 21.351463317871094,
    "created_at": "2025-09-01T13:36:48.592848",
    "last_used": "2025-09-01T13:36:48.592848",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T13:36:48.592848",
      "agent": "Code Generator Agent",
      "template_id": "template_1756748187",
      "user_query": "Adverse event summary table"
    }
  },
  "f3a299bd25f18f731f4560400580deb6_f6224e09309ff96b29e4f16f9a135b4f_bfd8e0496680e6d3d661959040afa268": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\n\n# Set working directory and create output directory\ndir.create(\"outputs/execution_20250901T174323_uwp2ikf4\", recursive = TRUE, showWarnings = FALSE)\nsetwd(\"outputs/execution_20250901T174323_uwp2ikf4\")\n\n# Load and validate dataset\ntryCatch({\n  adae <- read_sas(\"../../data/adam/adae.sas7bdat\")\n  if(nrow(adae) == 0) stop(\"Empty dataset\")\n  \n  required_vars <- c(\"TRT01A\", \"AESOC\", \"AEDECOD\", \"USUBJID\")\n  missing_vars <- setdiff(required_vars, names(adae))\n  if(length(missing_vars) > 0) stop(paste(\"Missing required variables:\", paste(missing_vars, collapse=\", \")))\n}, error = function(e) {\n  stop(\"Error loading or validating dataset: \", e$message)\n})\n\n# Calculate total subjects per treatment group\nn_subjects <- adae %>%\n  distinct(USUBJID, TRT01A) %>%\n  group_by(TRT01A) %>%\n  summarise(N = n(), .groups = \"drop\")\n\n# Create summary statistics\nae_summary <- adae %>%\n  # Get unique subject counts for each AE\n  distinct(USUBJID, TRT01A, AESOC, AEDECOD) %>%\n  # Calculate counts and percentages\n  group_by(TRT01A, AESOC, AEDECOD) %>%\n  summarise(n = n(), .groups = \"keep\") %>%\n  # Join with total subjects\n  left_join(n_subjects, by = \"TRT01A\") %>%\n  mutate(pct = round(100 * n / N, 1),\n         display = sprintf(\"%d (%0.1f%%)\", n, pct))\n\n# Calculate \"Any Adverse Event\" row\nany_ae <- adae %>%\n  distinct(USUBJID, TRT01A) %>%\n  group_by(TRT01A) %>%\n  summarise(\n    n = n(),\n    .groups = \"drop\"\n  ) %>%\n  left_join(n_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct = round(100 * n / N, 1),\n    display = sprintf(\"%d (%0.1f%%)\", n, pct),\n    AESOC = \"Any Adverse Event\",\n    AEDECOD = \"Any Adverse Event\"\n  )\n\n# Combine and format final table\ntable_data <- bind_rows(\n  any_ae %>% select(TRT01A, AESOC, AEDECOD, display),\n  ae_summary %>% select(TRT01A, AESOC, AEDECOD, display)\n) %>%\n  pivot_wider(\n    id_cols = c(AESOC, AEDECOD),\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0 (0.0%)\"\n  )\n\n# Create formatted GT table\nfinal_table <- table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1\",\n    subtitle = \"Summary of Treatment-Emergent Adverse Events\"\n  ) %>%\n  cols_label(\n    AESOC = \"System Organ Class\",\n    AEDECOD = \"Preferred Term\"\n  ) %>%\n  tab_style(\n    style = cell_text(indent = px(20)),\n    locations = cells_body(\n      columns = AEDECOD,\n      rows = AESOC != AEDECOD\n    )\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels(\n      columns = everything()\n    )\n  ) %>%\n  tab_options(\n    table.font.size = px(10),\n    data_row.padding = px(3)\n  )\n\n# Save outputs\ngtsave(final_table, \"adae_adverse_events_table_20250901_134428.html\")\nwrite_csv(table_data, \"adae_adverse_events_table_20250901_134428.csv\")\nsaveRDS(final_table, \"adae_adverse_events_table_20250901_134428.rds\")\n\n# Display table\nfinal_table",
    "template_hash": "f3a299bd25f18f731f4560400580deb6",
    "data_hash": "f6224e09309ff96b29e4f16f9a135b4f",
    "query_hash": "bfd8e0496680e6d3d661959040afa268",
    "success_rate": 1.0,
    "execution_time": 19.879424571990967,
    "created_at": "2025-09-01T13:44:48.552575",
    "last_used": "2025-09-01T13:44:48.552575",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T13:44:48.552575",
      "agent": "Code Generator Agent",
      "template_id": "template_1756748668",
      "user_query": "Adverse event summary table"
    }
  },
  "d82f3803ca1cc8c27717006a25df0c35_f6224e09309ff96b29e4f16f9a135b4f_bfd8e0496680e6d3d661959040afa268": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(lubridate)\n\n# Set working directory and create output directory\ndir.create(\"outputs/execution_20250901T175535_9ilgau35\", recursive = TRUE, showWarnings = FALSE)\nsetwd(\"outputs/execution_20250901T175535_9ilgau35\")\n\n# Load and validate dataset\nadae <- tryCatch({\n  read_sas(\"../../data/adam/adae.sas7bdat\")\n}, error = function(e) {\n  stop(\"Error loading ADAE dataset: \", e$message)\n})\n\n# Validate required variables\nrequired_vars <- c(\"TRT01A\", \"AESOC\", \"AEDECOD\", \"USUBJID\")\nif (!all(required_vars %in% names(adae))) {\n  stop(\"Missing required variables in dataset\")\n}\n\n# Calculate total subjects per treatment group\nn_subjects <- adae %>%\n  distinct(USUBJID, TRT01A) %>%\n  group_by(TRT01A) %>%\n  summarise(N = n(), .groups = \"drop\")\n\n# Create summary statistics\nae_summary <- adae %>%\n  # Any AE counts\n  bind_rows(\n    adae %>%\n      distinct(USUBJID, TRT01A) %>%\n      group_by(TRT01A) %>%\n      summarise(\n        AESOC = \"Any Adverse Event\",\n        AEDECOD = \"Any Adverse Event\",\n        n = n(),\n        .groups = \"drop\"\n      ),\n    # SOC level counts\n    adae %>%\n      distinct(USUBJID, TRT01A, AESOC) %>%\n      group_by(TRT01A, AESOC) %>%\n      summarise(\n        AEDECOD = AESOC,\n        n = n(),\n        .groups = \"drop\"\n      ),\n    # PT level counts\n    adae %>%\n      distinct(USUBJID, TRT01A, AESOC, AEDECOD) %>%\n      group_by(TRT01A, AESOC, AEDECOD) %>%\n      summarise(\n        n = n(),\n        .groups = \"drop\"\n      )\n  )\n\n# Calculate percentages and format display\nae_table <- ae_summary %>%\n  left_join(n_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct = round(100 * n / N, 1),\n    display = sprintf(\"%d (%0.1f%%)\", n, pct)\n  ) %>%\n  pivot_wider(\n    id_cols = c(AESOC, AEDECOD),\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0 (0.0%)\"\n  )\n\n# Create hierarchical labels\nae_table <- ae_table %>%\n  mutate(\n    display_term = case_when(\n      AESOC == \"Any Adverse Event\" ~ AESOC,\n      AESOC == AEDECOD ~ paste0(\"  \", AESOC),\n      TRUE ~ paste0(\"    \", AEDECOD)\n    )\n  ) %>%\n  select(-AESOC, -AEDECOD)\n\n# Create gt table\nfinal_table <- ae_table %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1\",\n    subtitle = \"Summary of Treatment-Emergent Adverse Events\"\n  ) %>%\n  fmt_missing(columns = everything(), missing_text = \"0 (0.0%)\") %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_row_groups()\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_options(\n    table.font.size = px(10),\n    data_row.padding = px(3),\n    column_labels.font.weight = \"bold\"\n  )\n\n# Save outputs\ntimestamp <- format(Sys.time(), \"%Y%m%d_%H%M%S\")\noutput_base <- paste0(\"adae_adverse_events_table_\", timestamp)\n\n# Save HTML\ngtsave(final_table, paste0(output_base, \".html\"))\n\n# Save CSV\nwrite_csv(ae_table, paste0(output_base, \".csv\"))\n\n# Save RDS\nsaveRDS(final_table, paste0(output_base, \".rds\"))\n\n# Display table\nfinal_table",
    "template_hash": "d82f3803ca1cc8c27717006a25df0c35",
    "data_hash": "f6224e09309ff96b29e4f16f9a135b4f",
    "query_hash": "bfd8e0496680e6d3d661959040afa268",
    "success_rate": 1.0,
    "execution_time": 20.458385944366455,
    "created_at": "2025-09-01T13:57:55.363439",
    "last_used": "2025-09-01T13:57:55.363439",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T13:57:55.362440",
      "agent": "Code Generator Agent",
      "template_id": "template_1756749454",
      "user_query": "Adverse event summary table"
    }
  },
  "ab9c0dfa173f0548c7d8cd52cec95e8e_54d143d07622342e31d85f6063697c05_d8a0bb75e48e356bdbb351c1db37f0d5": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(scales)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250901T181505_avuudzwq\")\ncat(\"Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250901T181505_avuudzwq\")) {\n  dir.create(\"outputs/execution_20250901T181505_avuudzwq\", recursive = TRUE)\n  cat(\"Created session directory: outputs/execution_20250901T181505_avuudzwq\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adsl_data <- read_sas(\"data/adam/adsl.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adsl_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preprocessing\nif (!exists(\"adsl_data\")) {\n  stop(\"Dataset not loaded successfully\")\n}\n\n# Check required variables exist\nrequired_vars <- c(\"AGE\", \"AGEGR1\", \"RACE\", \"SEX\", \"ETHNIC\", \"ARM\", \"TRT01P\")\nmissing_vars <- setdiff(required_vars, names(adsl_data))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Get treatment groups and their counts\ntreatment_groups <- adsl_data %>%\n  distinct(ARM) %>%\n  pull(ARM) %>%\n  na.omit() %>%\n  as.character()\n\ntotal_n <- nrow(adsl_data)\ntreatment_n <- adsl_data %>%\n  count(ARM) %>%\n  mutate(display = paste0(ARM, \" (N=\", n, \")\"))\n\n# Function to create summary for categorical variables\nsummarize_categorical <- function(data, var_name, var_label) {\n  data %>%\n    group_by(ARM, !!sym(var_name)) %>%\n    summarise(n = n(), .groups = \"drop\") %>%\n    group_by(ARM) %>%\n    mutate(pct = round(n / sum(n) * 100, 1),\n           display = paste0(n, \" (\", pct, \")\")) %>%\n    ungroup() %>%\n    select(ARM, category = !!sym(var_name), display) %>%\n    mutate(parameter = var_label,\n           row_type = \"CATEGORY\") %>%\n    select(parameter, category, ARM, display, row_type)\n}\n\n# Function to create summary for continuous variables\nsummarize_continuous <- function(data, var_name, var_label) {\n  summary_stats <- data %>%\n    group_by(ARM) %>%\n    summarise(\n      mean_val = round(mean(!!sym(var_name), na.rm = TRUE), 1),\n      sd_val = round(sd(!!sym(var_name), na.rm = TRUE), 1),\n      n = n(),\n      .groups = \"drop\"\n    ) %>%\n    mutate(display = paste0(mean_val, \" (\", sd_val, \")\"),\n           category = \"Mean (SD)\",\n           parameter = var_label,\n           row_type = \"CONTINUOUS\") %>%\n    select(parameter, category, ARM, display, row_type)\n  \n  # Add n for each group\n  n_rows <- data %>%\n    group_by(ARM) %>%\n    summarise(n = n(), .groups = \"drop\") %>%\n    mutate(display = as.character(n),\n           category = \"n\",\n           parameter = var_label,\n           row_type = \"COUNT\") %>%\n    select(parameter, category, ARM, display, row_type)\n  \n  bind_rows(n_rows, summary_stats)\n}\n\n# Create demographic summaries\nage_summary <- summarize_continuous(adsl_data, \"AGE\", \"Age (years)\")\n\nagegr_summary <- summarize_categorical(adsl_data, \"AGEGR1\", \"Age Group\") %>%\n  mutate(parameter = \"Age Group\")\n\nsex_summary <- summarize_categorical(adsl_data, \"SEX\", \"Sex\")\n\nrace_summary <- summarize_categorical(adsl_data, \"RACE\", \"Race\")\n\nethnic_summary <- summarize_categorical(adsl_data, \"ETHNIC\", \"Ethnicity\")\n\n# Combine all summaries\nall_summaries <- bind_rows(\n  age_summary,\n  agegr_summary,\n  sex_summary, \n  race_summary,\n  ethnic_summary\n)\n\n# Pivot to wide format for table display\ntable_wide <- all_summaries %>%\n  pivot_wider(\n    id_cols = c(parameter, category, row_type),\n    names_from = ARM,\n    values_from = display,\n    values_fill = \"0 (0.0)\"\n  )\n\n# Add total column\ntotal_counts <- adsl_data %>%\n  summarise(\n    total_n = n(),\n    .groups = \"drop\"\n  )\n\n# Calculate totals for each parameter\nparameter_totals <- all_summaries %>%\n  group_by(parameter, category, row_type) %>%\n  summarise(total_display = first(display), .groups = \"drop\") %>%\n  mutate(total_display = ifelse(row_type == \"CONTINUOUS\", \n                                first(display), \n                                as.character(total_n)))\n\ntable_final <- table_wide %>%\n  left_join(parameter_totals, by = c(\"parameter\", \"category\", \"row_type\")) %>%\n  select(parameter, category, everything(), -row_type) %>%\n  arrange(factor(parameter, levels = c(\"Age (years)\", \"Age Group\", \"Sex\", \"Race\", \"Ethnicity\")))\n\n# Create header with actual N values\nheader_labels <- treatment_n %>%\n  select(ARM, display) %>%\n  deframe()\n\n# Create final table with gt\nfinal_table <- table_final %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.1.1 Demographic Characteristics Summary\"\n  ) %>%\n  tab_spanner(\n    label = \"Treatment Group\",\n    columns = names(header_labels)\n  ) %>%\n  cols_label(\n    parameter = \"Parameter\",\n    category = \"Category\",\n    Total = \"Total\",\n    !!!header_labels\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = \"12px\"\n  ) %>%\n  tab_footnote(\n    footnote = \"N represents number of subjects in each treatment group\",\n    locations = cells_column_labels(columns = everything())\n  )\n\n# Prepare data for CSV export\ncsv_data <- table_final %>%\n  mutate(across(everything(), as.character))\n\n# Save outputs to session directory\ntryCatch({\n  # Save HTML\n  gtsave(final_table, \"outputs/execution_20250901T181505_avuudzwq/adsl_analysis_table_20250901_141506.html\")\n  \n  # Save CSV\n  write_csv(csv_data, \"outputs/execution_20250901T181505_avuudzwq/adsl_analysis_table_20250901_141506.csv\")\n  \n  # Save RDS\n  saveRDS(final_table, \"outputs/execution_20250901T181505_avuudzwq/adsl_analysis_table_20250901_141506.rds\")\n  \n  cat(\"All output files saved successfully to session directory\\n\")\n}, error = function(e) {\n  cat(\"Error saving files: \", e$message, \"\\n\")\n})\n\n# Display final table\nfinal_table",
    "template_hash": "ab9c0dfa173f0548c7d8cd52cec95e8e",
    "data_hash": "54d143d07622342e31d85f6063697c05",
    "query_hash": "d8a0bb75e48e356bdbb351c1db37f0d5",
    "success_rate": 1.0,
    "execution_time": 96.96147131919861,
    "created_at": "2025-09-01T14:16:42.486309",
    "last_used": "2025-09-01T14:16:42.486309",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T14:16:42.485279",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Demographic summary table"
    }
  },
  "bcd1d1e44a2058e78bf4c94530fb6642_54d143d07622342e31d85f6063697c05_d8a0bb75e48e356bdbb351c1db37f0d5": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(stringr)\n\n# Error handling function\nhandle_error <- function(expr, message) {\n  tryCatch(\n    expr,\n    error = function(e) {\n      stop(paste0(message, \": \", e$message))\n    }\n  )\n}\n\n# Set working directory and create output directory\ndir.create(\"outputs/execution_20250901T183240_d889bt9w\", recursive = TRUE, showWarnings = FALSE)\nsetwd(\"outputs/execution_20250901T183240_d889bt9w\")\n\n# Load and validate dataset\nadsl <- handle_error(\n  read_sas(\"../../data/adam/adsl.sas7bdat\"),\n  \"Failed to load ADSL dataset\"\n)\n\n# Validate required variables\nrequired_vars <- c(\"AGE\", \"AGEGR1\", \"RACE\", \"SEX\", \"ETHNIC\", \"TRT01P\")\nif (!all(required_vars %in% names(adsl))) {\n  stop(\"Missing required variables in dataset\")\n}\n\n# Create summary functions\nget_stats_continuous <- function(x) {\n  c(\n    n = sum(!is.na(x)),\n    mean = mean(x, na.rm = TRUE),\n    sd = sd(x, na.rm = TRUE),\n    median = median(x, na.rm = TRUE),\n    min = min(x, na.rm = TRUE),\n    max = max(x, na.rm = TRUE)\n  )\n}\n\nget_stats_categorical <- function(x) {\n  tbl <- table(x, useNA = \"ifany\")\n  pct <- prop.table(tbl) * 100\n  data.frame(\n    category = names(tbl),\n    n = as.numeric(tbl),\n    pct = as.numeric(pct)\n  )\n}\n\n# Generate summary statistics\ndem_summary <- list()\n\n# 1. Age Summary\nage_stats <- adsl %>%\n  group_by(TRT01P) %>%\n  summarise(\n    across(AGE, get_stats_continuous)\n  ) %>%\n  bind_rows(\n    adsl %>%\n      summarise(\n        TRT01P = \"Total\",\n        across(AGE, get_stats_continuous)\n      )\n  )\n\n# 2. Age Categories\nage_cat_stats <- adsl %>%\n  group_by(TRT01P) %>%\n  summarise(\n    age_cat = get_stats_categorical(AGEGR1)\n  ) %>%\n  unnest(age_cat)\n\n# 3. Sex, Race, Ethnicity\ncategorical_vars <- c(\"SEX\", \"RACE\", \"ETHNIC\")\ncat_stats <- map_dfr(categorical_vars, function(var) {\n  adsl %>%\n    group_by(TRT01P) %>%\n    summarise(\n      var_name = var,\n      stats = list(get_stats_categorical(.data[[var]]))\n    ) %>%\n    unnest(stats)\n})\n\n# Create final table structure\nfinal_table <- gt(age_stats) %>%\n  tab_header(\n    title = \"Table 14.1.1 Summary of Demographic and Baseline Characteristics - Safety Population\"\n  ) %>%\n  fmt_number(\n    columns = c(AGE_mean, AGE_sd),\n    decimals = 1\n  ) %>%\n  fmt_number(\n    columns = c(AGE_median, AGE_min, AGE_max),\n    decimals = 0\n  ) %>%\n  cols_label(\n    TRT01P = \"Treatment\",\n    AGE_n = \"n\",\n    AGE_mean = \"Mean\",\n    AGE_sd = \"SD\",\n    AGE_median = \"Median\",\n    AGE_min = \"Min\",\n    AGE_max = \"Max\"\n  )\n\n# Save outputs\n# 1. Save as HTML\nhandle_error(\n  gtsave(final_table, \"adsl_analysis_table_20250901_143241.html\"),\n  \"Failed to save HTML output\"\n)\n\n# 2. Save underlying data as CSV\nhandle_error(\n  write_csv(age_stats, \"adsl_analysis_table_20250901_143241.csv\"),\n  \"Failed to save CSV output\"\n)\n\n# 3. Save R object\nhandle_error(\n  saveRDS(final_table, \"adsl_analysis_table_20250901_143241.rds\"),\n  \"Failed to save RDS output\"\n)\n\n# Print success message\ncat(\"Analysis complete. Output files saved to:\", getwd(), \"\\n\")",
    "template_hash": "bcd1d1e44a2058e78bf4c94530fb6642",
    "data_hash": "54d143d07622342e31d85f6063697c05",
    "query_hash": "d8a0bb75e48e356bdbb351c1db37f0d5",
    "success_rate": 1.0,
    "execution_time": 20.66742515563965,
    "created_at": "2025-09-01T14:33:01.727584",
    "last_used": "2025-09-01T14:33:01.727584",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T14:33:01.727584",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Demographic summary table"
    }
  },
  "f78cf23cc14364d11525563ae1062204_54d143d07622342e31d85f6063697c05_d8a0bb75e48e356bdbb351c1db37f0d5": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(broom)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250901T184852_jbbgzg3o\")\ncat(\"Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250901T184852_jbbgzg3o\")) {\n  dir.create(\"outputs/execution_20250901T184852_jbbgzg3o\", recursive = TRUE)\n  cat(\"Created session directory: outputs/execution_20250901T184852_jbbgzg3o\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adsl_data <- read_sas(\"data/adam/adsl.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adsl_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\nif (!\"ARM\" %in% names(adsl_data)) {\n  stop(\"Required variable ARM not found in dataset\")\n}\n\n# Get treatment groups from actual data\ntreatment_groups <- unique(adsl_data$ARM)\ntreatment_groups <- treatment_groups[!is.na(treatment_groups)]\ncat(\"Treatment groups found: \", paste(treatment_groups, collapse = \", \"), \"\\n\")\n\n# Create summary functions\nformat_count_pct <- function(n, total) {\n  pct <- round(n / total * 100, 1)\n  paste0(n, \" (\", pct, \")\")\n}\n\nformat_mean_sd <- function(values) {\n  mean_val <- round(mean(values, na.rm = TRUE), 1)\n  sd_val <- round(sd(values, na.rm = TRUE), 1)\n  paste0(mean_val, \" (\", sd_val, \")\")\n}\n\n# Calculate p-values\ncalculate_p_value <- function(data, variable, group_var) {\n  if (is.numeric(data[[variable]])) {\n    # ANOVA for continuous variables\n    formula <- as.formula(paste(variable, \"~\", group_var))\n    result <- aov(formula, data = data)\n    p_value <- tidy(result)$p.value[1]\n  } else {\n    # Chi-square for categorical variables\n    tbl <- table(data[[variable]], data[[group_var]])\n    result <- chisq.test(tbl)\n    p_value <- result$p.value\n  }\n  round(p_value, 4)\n}\n\n# Create demographic summary table\ncreate_demographic_table <- function(data) {\n  \n  # Total counts\n  total_n <- nrow(data)\n  trt_counts <- data %>% count(ARM) %>% deframe()\n  \n  # Initialize table structure\n  table_data <- tibble(\n    Parameter = character(),\n    Category = character(),\n    Total = character(),\n    stringsAsFactors = FALSE\n  )\n  \n  # Add treatment group columns\n  for (trt in names(trt_counts)) {\n    table_data[[trt]] <- character()\n  }\n  \n  table_data$`p-value` <- character()\n  \n  # Age (continuous)\n  age_summary <- data %>%\n    group_by(ARM) %>%\n    summarise(value = format_mean_sd(AGE)) %>%\n    pivot_wider(names_from = ARM, values_from = value) %>%\n    mutate(Parameter = \"Age (years)\", Category = \"\")\n  \n  age_p <- calculate_p_value(data, \"AGE\", \"ARM\")\n  \n  # Add total for age\n  total_age <- format_mean_sd(data$AGE)\n  age_summary <- age_summary %>% mutate(Total = total_age, `p-value` = as.character(age_p))\n  \n  # Age categories\n  if (\"AGEGR1\" %in% names(data)) {\n    agegr_summary <- data %>%\n      count(ARM, AGEGR1) %>%\n      group_by(ARM) %>%\n      mutate(total = sum(n), value = format_count_pct(n, total)) %>%\n      select(ARM, AGEGR1, value) %>%\n      pivot_wider(names_from = ARM, values_from = value) %>%\n      rename(Category = AGEGR1) %>%\n      mutate(Parameter = \"Age Group\")\n    \n    # Add totals for age groups\n    total_agegr <- data %>%\n      count(AGEGR1) %>%\n      mutate(value = format_count_pct(n, total_n)) %>%\n      select(AGEGR1, value) %>%\n      rename(Category = AGEGR1, Total = value)\n    \n    agegr_summary <- left_join(agegr_summary, total_agegr, by = \"Category\")\n    agegr_p <- calculate_p_value(data, \"AGEGR1\", \"ARM\")\n    agegr_summary <- agegr_summary %>% mutate(`p-value` = as.character(agegr_p))\n  }\n  \n  # Sex\n  if (\"SEX\" %in% names(data)) {\n    sex_summary <- data %>%\n      count(ARM, SEX) %>%\n      group_by(ARM) %>%\n      mutate(total = sum(n), value = format_count_pct(n, total)) %>%\n      select(ARM, SEX, value) %>%\n      pivot_wider(names_from = ARM, values_from = value) %>%\n      rename(Category = SEX) %>%\n      mutate(Parameter = \"Sex\")\n    \n    total_sex <- data %>%\n      count(SEX) %>%\n      mutate(value = format_count_pct(n, total_n)) %>%\n      select(SEX, value) %>%\n      rename(Category = SEX, Total = value)\n    \n    sex_summary <- left_join(sex_summary, total_sex, by = \"Category\")\n    sex_p <- calculate_p_value(data, \"SEX\", \"ARM\")\n    sex_summary <- sex_summary %>% mutate(`p-value` = as.character(sex_p))\n  }\n  \n  # Race\n  if (\"RACE\" %in% names(data)) {\n    race_summary <- data %>%\n      count(ARM, RACE) %>%\n      group_by(ARM) %>%\n      mutate(total = sum(n), value = format_count_pct(n, total)) %>%\n      select(ARM, RACE, value) %>%\n      pivot_wider(names_from = ARM, values_from = value) %>%\n      rename(Category = RACE) %>%\n      mutate(Parameter = \"Race\")\n    \n    total_race <- data %>%\n      count(RACE) %>%\n      mutate(value = format_count_pct(n, total_n)) %>%\n      select(RACE, value) %>%\n      rename(Category = RACE, Total = value)\n    \n    race_summary <- left_join(race_summary, total_race, by = \"Category\")\n    race_p <- calculate_p_value(data, \"RACE\", \"ARM\")\n    race_summary <- race_summary %>% mutate(`p-value` = as.character(race_p))\n  }\n  \n  # Ethnicity\n  if (\"ETHNIC\" %in% names(data)) {\n    ethnic_summary <- data %>%\n      count(ARM, ETHNIC) %>%\n      group_by(ARM) %>%\n      mutate(total = sum(n), value = format_count_pct(n, total)) %>%\n      select(ARM, ETHNIC, value) %>%\n      pivot_wider(names_from = ARM, values_from = value) %>%\n      rename(Category = ETHNIC) %>%\n      mutate(Parameter = \"Ethnicity\")\n    \n    total_ethnic <- data %>%\n      count(ETHNIC) %>%\n      mutate(value = format_count_pct(n, total_n)) %>%\n      select(ETHNIC, value) %>%\n      rename(Category = ETHNIC, Total = value)\n    \n    ethnic_summary <- left_join(ethnic_summary, total_ethnic, by = \"Category\")\n    ethnic_p <- calculate_p_value(data, \"ETHNIC\", \"ARM\")\n    ethnic_summary <- ethnic_summary %>% mutate(`p-value` = as.character(ethnic_p))\n  }\n  \n  # Combine all summaries\n  final_table <- bind_rows(age_summary)\n  \n  if (exists(\"agegr_summary\")) {\n    final_table <- bind_rows(final_table, agegr_summary)\n  }\n  if (exists(\"sex_summary\")) {\n    final_table <- bind_rows(final_table, sex_summary)\n  }\n  if (exists(\"race_summary\")) {\n    final_table <- bind_rows(final_table, race_summary)\n  }\n  if (exists(\"ethnic_summary\")) {\n    final_table <- bind_rows(final_table, ethnic_summary)\n  }\n  \n  # Reorder columns\n  col_order <- c(\"Parameter\", \"Category\", \"Total\", names(trt_counts), \"p-value\")\n  final_table <- final_table %>% select(all_of(col_order))\n  \n  return(final_table)\n}\n\n# Generate the table\ndemog_table <- create_demographic_table(adsl_data)\n\n# Format for display\nformatted_table <- demog_table %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.1.1 Demographic Characteristics Summary\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12)\n  ) %>%\n  cols_label(\n    Parameter = \"Parameter\",\n    Category = \"\",\n    Total = paste0(\"Total (N=\", nrow(adsl_data), \")\")\n  )\n\n# Save outputs\nwrite_csv(demog_table, \"outputs/execution_20250901T184852_jbbgzg3o/adsl_analysis_table_20250901_144853.csv\")\nsaveRDS(demog_table, \"outputs/execution_20250901T184852_jbbgzg3o/adsl_analysis_table_20250901_144853.rds\")\n\n# Save HTML using flextable for better formatting\nft <- flextable(demog_table) %>%\n  set_caption(\"Table 14.1.1 Demographic Characteristics Summary\") %>%\n  theme_booktabs() %>%\n  autofit()\n\nsave_as_html(ft, \"outputs/execution_20250901T184852_jbbgzg3o/adsl_analysis_table_20250901_144853.html\")\n\ncat(\"Files saved to session directory: outputs/execution_20250901T184852_jbbgzg3o/\\n\")\n\n# Display final table\nformatted_table",
    "template_hash": "f78cf23cc14364d11525563ae1062204",
    "data_hash": "54d143d07622342e31d85f6063697c05",
    "query_hash": "d8a0bb75e48e356bdbb351c1db37f0d5",
    "success_rate": 1.0,
    "execution_time": 126.52529263496399,
    "created_at": "2025-09-01T14:50:59.067968",
    "last_used": "2025-09-01T14:50:59.067968",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T14:50:59.066968",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Demographic summary table"
    }
  },
  "37396c23f3ba5104c33f76e75112d18a_54d143d07622342e31d85f6063697c05_d8a0bb75e48e356bdbb351c1db37f0d5": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(stringr)\n\n# Create output directory\ndir.create(\"outputs/execution_20250901T193242_hgz3y3gs\", recursive = TRUE, showWarnings = FALSE)\nsetwd(\"outputs/execution_20250901T193242_hgz3y3gs\")\n\n# Function for calculating n(%)\ncalc_n_pct <- function(n, N) {\n  sprintf(\"%d (%0.1f%%)\", n, (n/N)*100)\n}\n\n# Function for calculating mean(SD)\ncalc_mean_sd <- function(x) {\n  sprintf(\"%0.1f (%0.2f)\", mean(x, na.rm=TRUE), sd(x, na.rm=TRUE))\n}\n\n# Load and validate data\nadsl <- tryCatch({\n  data <- read_sas(\"../../data/adam/adsl.sas7bdat\")\n  if(nrow(data) == 0) stop(\"Empty dataset\")\n  data\n}, error = function(e) {\n  stop(\"Error loading ADSL dataset: \", e$message)\n})\n\n# Create summary table\ncreate_demo_table <- function(data) {\n  # Get N by treatment group\n  N_by_trt <- data %>%\n    group_by(TRT01P) %>%\n    summarise(N = n()) %>%\n    mutate(header = sprintf(\"%s\\n(N=%d)\", TRT01P, N))\n  \n  # Age summary statistics\n  age_stats <- data %>%\n    group_by(TRT01P) %>%\n    summarise(\n      n = n(),\n      mean_sd = calc_mean_sd(AGE),\n      median = sprintf(\"%0.1f\", median(AGE, na.rm=TRUE)),\n      min = min(AGE, na.rm=TRUE),\n      max = max(AGE, na.rm=TRUE),\n      range = sprintf(\"%d - %d\", min, max)\n    )\n  \n  # Categorical variables summary\n  cat_vars_summary <- function(data, var) {\n    data %>%\n      group_by(TRT01P, !!sym(var)) %>%\n      summarise(n = n(), .groups = \"drop\") %>%\n      group_by(TRT01P) %>%\n      mutate(\n        N = sum(n),\n        n_pct = calc_n_pct(n, N)\n      )\n  }\n  \n  # Create summaries for each categorical variable\n  sex_summary <- cat_vars_summary(data, \"SEX\")\n  race_summary <- cat_vars_summary(data, \"RACE\")\n  ethnic_summary <- cat_vars_summary(data, \"ETHNIC\")\n  agegr_summary <- cat_vars_summary(data, \"AGEGR1\")\n  \n  # Combine into final table structure\n  table_data <- tibble(\n    \"Characteristic\" = c(\n      \"Age (years)\",\n      \"  Mean (SD)\",\n      \"  Median\",\n      \"  Range\",\n      \"Age Category, n (%)\",\n      agegr_summary %>% pull(AGEGR1) %>% unique() %>% paste0(\"  \", .),\n      \"Sex, n (%)\",\n      sex_summary %>% pull(SEX) %>% unique() %>% paste0(\"  \", .),\n      \"Race, n (%)\",\n      race_summary %>% pull(RACE) %>% unique() %>% paste0(\"  \", .),\n      \"Ethnicity, n (%)\",\n      ethnic_summary %>% pull(ETHNIC) %>% unique() %>% paste0(\"  \", .)\n    )\n  )\n  \n  # Create gt table\n  final_table <- table_data %>%\n    gt() %>%\n    tab_header(\n      title = \"Table 14.1.1 Summary of Demographic and Baseline Characteristics - Safety Population\"\n    ) %>%\n    fmt_missing(everything(), missing_text = \"0\") %>%\n    tab_style(\n      style = cell_text(weight = \"bold\"),\n      locations = cells_row_groups()\n    )\n  \n  return(list(\n    table = final_table,\n    data = table_data\n  ))\n}\n\n# Generate table\nresults <- create_demo_table(adsl)\n\n# Save outputs\ngtsave(results$table, \"adsl_analysis_table_20250901_153243.html\")\nwrite_csv(results$data, \"adsl_analysis_table_20250901_153243.csv\")\nsaveRDS(results$table, \"adsl_analysis_table_20250901_153243.rds\")\n\n# Print confirmation\ncat(\"Output files generated successfully in:\", getwd(), \"\\n\")",
    "template_hash": "37396c23f3ba5104c33f76e75112d18a",
    "data_hash": "54d143d07622342e31d85f6063697c05",
    "query_hash": "d8a0bb75e48e356bdbb351c1db37f0d5",
    "success_rate": 1.0,
    "execution_time": 21.58874487876892,
    "created_at": "2025-09-01T15:33:04.283877",
    "last_used": "2025-09-01T15:33:04.283877",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T15:33:04.281890",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Demographic summary table"
    }
  },
  "e23acb020f04b8c55c4a078d86971cee_54d143d07622342e31d85f6063697c05_d4f00e2a970cb32dc7dcb92c5f24959f": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(broom)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250901T202609_r9d147mu\")\ncat(\"Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250901T202609_r9d147mu\")) {\n  dir.create(\"outputs/execution_20250901T202609_r9d147mu\", recursive = TRUE)\n  cat(\"Created session directory: outputs/execution_20250901T202609_r9d147mu\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adsl_data <- read_sas(\"data/adam/adsl.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adsl_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\ncat(\"Performing data validation...\\n\")\n\n# Check required variables exist\nrequired_vars <- c(\"AGE\", \"AGEGR1\", \"SEX\", \"RACE\", \"ETHNIC\", \"TRT01P\")\nmissing_vars <- setdiff(required_vars, names(adsl_data))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Handle missing data\nadsl_clean <- adsl_data %>%\n  mutate(across(c(SEX, RACE, ETHNIC, AGEGR1), ~ifelse(is.na(.), \"Missing\", .))) %>%\n  filter(!is.na(TRT01P))\n\n# Get treatment groups and sample sizes\ntreatment_groups <- unique(adsl_clean$TRT01P) %>% sort()\ntotal_n <- nrow(adsl_clean)\ntrt_n <- table(adsl_clean$TRT01P)\n\n# Create column headers with actual sample sizes\ncol_headers <- c(\"Parameter\", \"Category\", paste0(\"Total (N=\", total_n, \")\"))\nfor (trt in treatment_groups) {\n  col_headers <- c(col_headers, paste0(trt, \" (N=\", trt_n[trt], \")\"))\n}\ncol_headers <- c(col_headers, \"p-value\")\n\n# Function to calculate p-values\ncalculate_pvalue <- function(data, variable, group_var = \"TRT01P\") {\n  if (is.numeric(data[[variable]])) {\n    # ANOVA for continuous variables\n    formula <- as.formula(paste(variable, \"~\", group_var))\n    anova_test <- aov(formula, data = data)\n    p_value <- tidy(anova_test)$p.value[1]\n    return(round(p_value, 4))\n  } else {\n    # Chi-square for categorical variables\n    tbl <- table(data[[variable]], data[[group_var]])\n    if (any(tbl < 5)) {\n      # Fisher's exact test for small cell counts\n      p_value <- fisher.test(tbl)$p.value\n    } else {\n      p_value <- chisq.test(tbl)$p.value\n    }\n    return(round(p_value, 4))\n  }\n}\n\n# Process categorical variables\nprocess_categorical <- function(data, variable, var_label) {\n  # Calculate overall counts\n  overall <- data %>%\n    count(!!sym(variable)) %>%\n    mutate(pct = round(n / sum(n) * 100, 1),\n           display = paste0(n, \" (\", pct, \")\"))\n  \n  # Calculate by treatment\n  by_treatment <- data %>%\n    count(TRT01P, !!sym(variable)) %>%\n    group_by(TRT01P) %>%\n    mutate(pct = round(n / sum(n) * 100, 1),\n           display = paste0(n, \" (\", pct, \")\")) %>%\n    ungroup() %>%\n    select(TRT01P, !!sym(variable), display) %>%\n    pivot_wider(names_from = TRT01P, values_from = display)\n  \n  # Combine results\n  result <- overall %>%\n    left_join(by_treatment, by = variable) %>%\n    mutate(Parameter = ifelse(row_number() == 1, var_label, \"\"),\n           Category = !!sym(variable),\n           p_value = calculate_pvalue(data, variable)) %>%\n    select(Parameter, Category, Total = display, everything(), -n, -pct, -!!sym(variable))\n  \n  return(result)\n}\n\n# Process continuous variables\nprocess_continuous <- function(data, variable, var_label) {\n  # Calculate overall statistics\n  overall <- data %>%\n    summarise(mean_val = mean(!!sym(variable), \n              sd_val = sd(!!sym(variable)),\n              display = paste0(round(mean_val, 1), \" (\", round(sd_val, 1), \")\")) %>%\n    pull(display)\n  \n  # Calculate by treatment\n  by_treatment <- data %>%\n    group_by(TRT01P) %>%\n    summarise(mean_val = mean(!!sym(variable)), \n              sd_val = sd(!!sym(variable)),\n              display = paste0(round(mean_val, 1), \" (\", round(sd_val, 1), \")\")) %>%\n    select(TRT01P, display) %>%\n    pivot_wider(names_from = TRT01P, values_from = display)\n  \n  # Create result row\n  result <- tibble(\n    Parameter = var_label,\n    Category = \"\",\n    Total = overall\n  ) %>%\n    bind_cols(by_treatment) %>%\n    mutate(p_value = calculate_pvalue(data, variable))\n  \n  return(result)\n}\n\n# Build the table\ncat(\"Building demographic summary table...\\n\")\n\n# Process each variable\nage_table <- process_continuous(adsl_clean, \"AGE\", \"Age (years)\")\nsex_table <- process_categorical(adsl_clean, \"SEX\", \"Sex\")\nrace_table <- process_categorical(adsl_clean, \"RACE\", \"Race\")\nethnic_table <- process_categorical(adsl_clean, \"ETHNIC\", \"Ethnicity\")\nagegr1_table <- process_categorical(adsl_clean, \"AGEGR1\", \"Age Group\")\n\n# Combine all tables\nfinal_table_data <- bind_rows(\n  age_table,\n  sex_table,\n  race_table,\n  ethnic_table,\n  agegr1_table\n) %>%\n  mutate(across(everything(), ~ifelse(is.na(.), \"\", .)))\n\n# Create formatted table\nfinal_gt_table <- final_table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.1.1 Demographic and Baseline Characteristics Summary\"\n  ) %>%\n  tab_spanner(\n    label = \"Treatment Group\",\n    columns = setdiff(names(final_table_data), c(\"Parameter\", \"Category\", \"p_value\"))\n  ) %>%\n  cols_label(\n    Parameter = \"Parameter\",\n    Category = \"Category\",\n    Total = \"Total\",\n    p_value = \"p-value\"\n  ) %>%\n  tab_footnote(\n    footnote = \"Values are n (%) for categorical variables, mean (SD) for continuous variables\",\n    locations = cells_column_labels(columns = Total)\n  ) %>%\n  tab_footnote(\n    footnote = \"p-values from ANOVA for continuous variables, chi-square/Fisher's exact test for categorical variables\",\n    locations = cells_column_labels(columns = p_value)\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12)\n  )\n\n# Save outputs\ncat(\"Saving output files...\\n\")\n\n# Save HTML table\ngtsave(final_gt_table, \"outputs/execution_20250901T202609_r9d147mu/adsl_analysis_table_20250901_162610.html\")\n\n# Save CSV data\nwrite_csv(final_table_data, \"outputs/execution_20250901T202609_r9d147mu/adsl_analysis_table_20250901_162610.csv\")\n\n# Save R object\nsaveRDS(final_gt_table, \"outputs/execution_20250901T202609_r9d147mu/adsl_analysis_table_20250901_162610.rds\")\n\ncat(\"Files saved to session directory: outputs/execution_20250901T202609_r9d147mu/\\n\")\n\n# Display final table\nfinal_gt_table",
    "template_hash": "e23acb020f04b8c55c4a078d86971cee",
    "data_hash": "54d143d07622342e31d85f6063697c05",
    "query_hash": "d4f00e2a970cb32dc7dcb92c5f24959f",
    "success_rate": 1.0,
    "execution_time": 164.3969006538391,
    "created_at": "2025-09-01T16:28:54.281698",
    "last_used": "2025-09-01T16:28:55.860825",
    "use_count": 2,
    "metadata": {
      "generated_at": "2025-09-01T16:28:54.280695",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Demographic summary table\n"
    }
  },
  "2c2b216056b5af96ae6bf5fde4d79c37_dd4fe4574e8b41f89a1861849fded87e_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(glue)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250902T000301_66f4c16t\")\ncat(\"Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250902T000301_66f4c16t\")) {\n  dir.create(\"outputs/execution_20250902T000301_66f4c16t\", recursive = TRUE)\n  cat(\"Created session directory: outputs/execution_20250902T000301_66f4c16t\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preprocessing\ncat(\"Performing data validation...\\n\")\n\n# Check required variables exist\nrequired_vars <- c(\"AEBODSYS\", \"AEDECOD\", \"TRT01A\", \"USUBJID\")\nmissing_vars <- setdiff(required_vars, names(adae))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Handle missing data\nadae_clean <- adae %>%\n  mutate(\n    AEBODSYS = ifelse(is.na(AEBODSYS), \"Not Specified\", AEBODSYS),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", AEDECOD),\n    TRT01A = ifelse(is.na(TRT01A), \"Unknown\", TRT01A)\n  )\n\n# Get treatment groups and sample sizes\ntreatment_groups <- adae_clean %>%\n  distinct(TRT01A) %>%\n  pull(TRT01A) %>%\n  sort()\n\ntreatment_n <- adae_clean %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"N\")\n\ntotal_n <- sum(treatment_n$N)\n\n# Create column headers with actual sample sizes\ncol_headers <- c(\"System Organ Class / Preferred Term\")\nfor (trt in treatment_groups) {\n  n_val <- treatment_n %>% filter(TRT01A == trt) %>% pull(N)\n  col_headers <- c(col_headers, glue(\"{trt} (N={n_val})\"))\n}\ncol_headers <- c(col_headers, glue(\"Total (N={total_n})\"))\n\n# Calculate AE frequencies by SOC and PT\nae_summary <- adae_clean %>%\n  group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n  summarise(n_ae = n_distinct(USUBJID), .groups = \"drop\") %>%\n  left_join(treatment_n, by = \"TRT01A\") %>%\n  mutate(pct = round(n_ae / N * 100, 1),\n         display = glue(\"{n_ae} ({pct})\"))\n\n# Calculate total across treatments\nae_total <- ae_summary %>%\n  group_by(AEBODSYS, AEDECOD) %>%\n  summarise(n_ae_total = sum(n_ae),\n            pct_total = round(n_ae_total / total_n * 100, 1),\n            display_total = glue(\"{n_ae_total} ({pct_total})\"),\n            .groups = \"drop\")\n\n# Create hierarchical table structure\nsoc_level <- ae_summary %>%\n  distinct(AEBODSYS) %>%\n  mutate(term = AEBODSYS, level = \"SOC\", indent = 0)\n\npt_level <- ae_summary %>%\n  distinct(AEBODSYS, AEDECOD) %>%\n  mutate(term = AEDECOD, level = \"PT\", indent = 2)\n\n# Combine and create full table structure\ntable_data <- bind_rows(soc_level, pt_level) %>%\n  arrange(AEBODSYS, level, term) %>%\n  select(term, level, indent)\n\n# Add treatment group counts\nfor (trt in treatment_groups) {\n  trt_data <- ae_summary %>%\n    filter(TRT01A == trt) %>%\n    select(AEBODSYS, AEDECOD, display)\n  \n  soc_trt <- trt_data %>%\n    group_by(AEBODSYS) %>%\n    summarise(display = sum(as.numeric(str_extract(display, \"\\\\d+\")), na.rm = TRUE),\n              pct = round(display / treatment_n$N[treatment_n$TRT01A == trt] * 100, 1),\n              display = glue(\"{display} ({pct})\"),\n              .groups = \"drop\") %>%\n    rename(term = AEBODSYS)\n  \n  pt_trt <- trt_data %>%\n    rename(term = AEDECOD)\n  \n  table_data <- table_data %>%\n    left_join(bind_rows(soc_trt, pt_trt) %>% \n                rename(!!glue(\"col_{trt}\") := display),\n              by = \"term\")\n}\n\n# Add total column\ntotal_data <- ae_total %>%\n  select(AEBODSYS, AEDECOD, display_total) %>%\n  rename(term = AEDECOD) %>%\n  bind_rows(ae_total %>%\n              group_by(AEBODSYS) %>%\n              summarise(display_total = sum(as.numeric(str_extract(display_total, \"\\\\d+\")), na.rm = TRUE),\n                        pct = round(display_total / total_n * 100, 1),\n                        display_total = glue(\"{display_total} ({pct})\"),\n                        .groups = \"drop\") %>%\n              rename(term = AEBODSYS))\n\ntable_data <- table_data %>%\n  left_join(total_data %>% rename(Total = display_total), by = \"term\")\n\n# Clean up column names to match template\nfinal_cols <- c(\"System Organ Class / Preferred Term\" = \"term\")\nfor (i in seq_along(treatment_groups)) {\n  trt <- treatment_groups[i]\n  final_cols[col_headers[i + 1]] <- glue(\"col_{trt}\")\n}\nfinal_cols[glue(\"Total (N={total_n})\")] <- \"Total\"\n\ntable_data_final <- table_data %>%\n  rename(!!!final_cols) %>%\n  mutate(`System Organ Class / Preferred Term` = ifelse(indent > 0, \n                                                       str_pad(`System Organ Class / Preferred Term`, width = indent + nchar(`System Organ Class / Preferred Term`), side = \"left\"),\n                                                       `System Organ Class / Preferred Term`)) %>%\n  select(-level, -indent)\n\n# Create formatted table with gt\nfinal_table <- table_data_final %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12)\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\", style = \"italic\"),\n    locations = cells_body(columns = 1, rows = table_data$level == \"SOC\")\n  )\n\n# Save outputs to session directory\nwrite_html(as_raw_html(final_table), \"outputs/execution_20250902T000301_66f4c16t/adae_analysis_table_20250901_200303.html\")\nwrite_csv(table_data_final, \"outputs/execution_20250902T000301_66f4c16t/adae_analysis_table_20250901_200303.csv\")\nsaveRDS(final_table, \"outputs/execution_20250902T000301_66f4c16t/adae_analysis_table_20250901_200303.rds\")\n\ncat(\"Files saved to session directory: outputs/execution_20250902T000301_66f4c16t/\\n\")\n\n# Display final table\nfinal_table",
    "template_hash": "2c2b216056b5af96ae6bf5fde4d79c37",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 86.12301731109619,
    "created_at": "2025-09-01T20:04:28.084011",
    "last_used": "2025-09-01T20:04:28.084011",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T20:04:28.083014",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  },
  "d8d55f4102cd720d4ff5b9861aca13ad_dd4fe4574e8b41f89a1861849fded87e_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250902T001812_zwyx0jd4\")\ncat(\"Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250902T001812_zwyx0jd4\")) {\n  dir.create(\"outputs/execution_20250902T001812_zwyx0jd4\", recursive = TRUE)\n  cat(\"Created session directory: outputs/execution_20250902T001812_zwyx0jd4\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n  \n  # Data validation checks\n  cat(\"Dataset structure:\\n\")\n  str(adae_data)\n  cat(\"\\nVariable names:\\n\")\n  print(names(adae_data))\n  \n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Identify actual treatment groups and calculate sample sizes\n# Assuming standard CDISC variable names - adjust if different in your dataset\ntreatment_groups <- adae_data %>%\n  distinct(TRT01A) %>%\n  pull(TRT01A) %>%\n  sort()\n\n# Calculate total N for each treatment group\ntreatment_n <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\")\n\ncat(\"Treatment groups found:\", paste(treatment_groups, collapse = \", \"), \"\\n\")\ncat(\"Sample sizes:\\n\")\nprint(treatment_n)\n\n# Create hierarchical AE summary\nae_summary <- adae_data %>%\n  # Ensure we have proper SOC and PT variables (adjust names if needed)\n  mutate(\n    AESOC = ifelse(is.na(AESOC), \"Unknown SOC\", AESOC),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Unknown PT\", AEDECOD)\n  ) %>%\n  \n  # Count unique subjects with AEs by SOC/PT and treatment\n  group_by(AESOC, AEDECOD, TRT01A) %>%\n  summarise(n_subjects = n_distinct(USUBJID), .groups = \"drop\") %>%\n  \n  # Join with total sample sizes\n  left_join(treatment_n, by = \"TRT01A\") %>%\n  \n  # Calculate percentages\n  mutate(\n    pct = round(n_subjects / total_n * 100, 1),\n    display = paste0(n_subjects, \" (\", pct, \")\")\n  ) %>%\n  \n  # Prepare for hierarchical structure\n  select(AESOC, AEDECOD, TRT01A, display)\n\n# Create SOC-level summary\nsoc_summary <- ae_summary %>%\n  group_by(AESOC, TRT01A) %>%\n  summarise(n_subjects = sum(as.numeric(str_extract(display, \"^\\\\d+\"))), .groups = \"drop\") %>%\n  left_join(treatment_n, by = \"TRT01A\") %>%\n  mutate(\n    pct = round(n_subjects / total_n * 100, 1),\n    display = paste0(n_subjects, \" (\", pct, \")\"),\n    AEDECOD = NA_character_  # Mark as SOC level\n  ) %>%\n  select(AESOC, AEDECOD, TRT01A, display)\n\n# Create overall summary (any AE)\noverall_summary <- ae_summary %>%\n  group_by(TRT01A) %>%\n  summarise(n_subjects = n_distinct(TRT01A), .groups = \"drop\") %>%  # This needs adjustment\n  left_join(treatment_n, by = \"TRT01A\") %>%\n  mutate(\n    n_subjects = total_n,  # Assuming all subjects had at least one AE - adjust if needed\n    pct = round(n_subjects / total_n * 100, 1),\n    display = paste0(n_subjects, \" (\", pct, \")\"),\n    AESOC = \"Any Adverse Event\",\n    AEDECOD = NA_character_\n  ) %>%\n  select(AESOC, AEDECOD, TRT01A, display)\n\n# Combine all levels\nfinal_data <- bind_rows(overall_summary, soc_summary, ae_summary) %>%\n  arrange(AESOC, is.na(AEDECOD), AEDECOD) %>%\n  \n  # Pivot to wide format for table\n  pivot_wider(\n    id_cols = c(AESOC, AEDECOD),\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0 (0.0)\"\n  ) %>%\n  \n  # Create hierarchical labels\n  mutate(\n    label = ifelse(is.na(AEDECOD), \n                   AESOC, \n                   paste0(\"  \", AEDECOD)),\n    level = ifelse(is.na(AEDECOD), 1, 2)\n  ) %>%\n  \n  # Add Total column\n  mutate(Total = \"XX (XX.X)\") %>%  # Placeholder - calculate actual total if needed\n  select(label, level, everything(), -AESOC, -AEDECOD)\n\n# Create final table with professional formatting\nfinal_table <- final_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.2.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.font.size = 12,\n    table.width = pct(100)\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_body(columns = label, rows = level == 1)\n  )\n\n# Prepare data for CSV export (without formatting)\ntable_data <- final_data %>%\n  select(-level) %>%\n  rename(`System Organ Class / Preferred Term` = label)\n\n# Save outputs to session directory for Step 4 display\ntryCatch({\n  # Save HTML\n  gtsave(final_table, \"adae_analysis_table_20250901_201813.html\")\n  \n  # Save CSV\n  write_csv(table_data, \"adae_analysis_table_20250901_201813.csv\")\n  \n  # Save RDS\n  saveRDS(final_table, \"adae_analysis_table_20250901_201813.rds\")\n  \n  cat(\"Files saved successfully to session directory\\n\")\n  \n}, error = function(e) {\n  cat(\"Error saving files:\", e$message, \"\\n\")\n})\n\n# Display final table\nfinal_table",
    "template_hash": "d8d55f4102cd720d4ff5b9861aca13ad",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 76.06990957260132,
    "created_at": "2025-09-01T20:19:28.569993",
    "last_used": "2025-09-01T20:19:28.569993",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-01T20:19:28.569993",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  },
  "704463d4cb6acc9403def41971868e13_dd4fe4574e8b41f89a1861849fded87e_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(scales)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250903T014740_g78vuwtl\")\ncat(\"Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250903T014740_g78vuwtl\")) {\n  dir.create(\"outputs/execution_20250903T014740_g78vuwtl\", recursive = TRUE)\n  cat(\"Created session directory: outputs/execution_20250903T014740_g78vuwtl\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\ncat(\"Performing data validation...\\n\")\n\n# Check required variables exist\nrequired_vars <- c(\"USUBJID\", \"TRT01A\", \"AESOC\", \"AEDECOD\", \"TRTEMFL\")\nmissing_vars <- setdiff(required_vars, names(adae_data))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Filter for treatment-emergent AEs only\nadae_te <- adae_data %>%\n  filter(TRTEMFL == \"Y\") %>%\n  mutate(\n    AESOC = ifelse(is.na(AESOC), \"Not Specified\", as.character(AESOC)),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", as.character(AEDECOD))\n  )\n\n# Get actual treatment groups from data\ntreatment_groups <- sort(unique(adae_te$TRT01A))\ncat(\"Treatment groups found: \", paste(treatment_groups, collapse = \", \"), \"\\n\")\n\n# Calculate total subjects per treatment group\ntotal_subjects <- adae_te %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\") %>%\n  mutate(trt_label = paste0(TRT01A, \" (N=\", total_n, \")\"))\n\n# Create summary table structure\nae_summary <- adae_te %>%\n  # Count AEs by SOC, PT and treatment\n  group_by(AESOC, AEDECOD, TRT01A) %>%\n  summarise(n_ae = n_distinct(USUBJID), .groups = \"drop\") %>%\n  \n  # Join with total subject counts\n  left_join(total_subjects, by = \"TRT01A\") %>%\n  \n  # Calculate percentages\n  mutate(\n    pct = round(n_ae / total_n * 100, 1),\n    display = paste0(n_ae, \" (\", pct, \")\")\n  ) %>%\n  \n  # Select and reshape\n  select(AESOC, AEDECOD, trt_label, display) %>%\n  pivot_wider(names_from = trt_label, values_from = display, values_fill = \"0 (0.0)\")\n\n# Create hierarchical structure with indentation\nsoc_level <- ae_summary %>%\n  group_by(AESOC) %>%\n  summarise(across(where(is.character), ~{\n    soc_total <- sum(as.numeric(str_extract(.x, \"^\\\\d+\")))\n    soc_pct <- round(soc_total / first(total_subjects$total_n[total_subjects$TRT01A == \n                                                             str_remove(cur_column(), \" \\\\(N=\\\\d+\\\\)\")]) * 100, 1)\n    paste0(soc_total, \" (\", soc_pct, \")\")\n  }), .groups = \"drop\") %>%\n  mutate(AEDECOD = AESOC, level = \"soc\")\n\npt_level <- ae_summary %>%\n  mutate(AEDECOD = paste0(\"  \", AEDECOD), level = \"pt\")\n\n# Combine SOC and PT levels\nfinal_data <- bind_rows(soc_level, pt_level) %>%\n  arrange(AESOC, level) %>%\n  select(`System Organ Class / Preferred Term` = AEDECOD, everything()) %>%\n  select(-AESOC, -level)\n\n# Add \"Any Adverse Event\" row at the top\nany_ae <- adae_te %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"n_ae\") %>%\n  left_join(total_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct = round(n_ae / total_n * 100, 1),\n    display = paste0(n_ae, \" (\", pct, \")\")\n  ) %>%\n  select(trt_label, display) %>%\n  pivot_wider(names_from = trt_label, values_from = display) %>%\n  mutate(`System Organ Class / Preferred Term` = \"Any Adverse Event\") %>%\n  select(`System Organ Class / Preferred Term`, everything())\n\nfinal_data <- bind_rows(any_ae, final_data)\n\n# Create formatted table with gt\nfinal_table <- final_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.2.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12),\n    data_row.padding = px(4)\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_body(rows = `System Organ Class / Preferred Term` == \"Any Adverse Event\")\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_body(rows = str_detect(`System Organ Class / Preferred Term`, \"^[A-Z]\"))\n  ) %>%\n  tab_footnote(\n    footnote = \"Treatment-emergent adverse events defined as events that started or worsened after first dose of study drug\",\n    locations = cells_title(groups = \"title\")\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels()\n  )\n\n# Save outputs to session directory\ncat(\"Saving output files...\\n\")\n\n# Save HTML table\ngtsave(final_table, \"outputs/execution_20250903T014740_g78vuwtl/adae_analysis_table_20250902_214741.html\")\n\n# Save CSV data\nwrite_csv(final_data, \"outputs/execution_20250903T014740_g78vuwtl/adae_analysis_table_20250902_214741.csv\")\n\n# Save R object\nsaveRDS(final_table, \"outputs/execution_20250903T014740_g78vuwtl/adae_analysis_table_20250902_214741.rds\")\n\ncat(\"Files saved to session directory: outputs/execution_20250903T014740_g78vuwtl/\\n\")\n\n# Display final table\nfinal_table",
    "template_hash": "704463d4cb6acc9403def41971868e13",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 80.73210072517395,
    "created_at": "2025-09-02T21:49:00.918424",
    "last_used": "2025-09-02T21:49:00.918424",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-02T21:49:00.918424",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  },
  "6453805348efdf15b076a173eb957ab9_dd4fe4574e8b41f89a1861849fded87e_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250903T020303_fyz5vixe\")\ncat(\"Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250903T020303_fyz5vixe\")) {\n  dir.create(\"outputs/execution_20250903T020303_fyz5vixe\", recursive = TRUE)\n  cat(\"Created session directory: outputs/execution_20250903T020303_fyz5vixe\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\ncat(\"Performing data validation...\\n\")\n\n# Check required variables exist\nrequired_vars <- c(\"USUBJID\", \"TRT01A\", \"AESOC\", \"AEDECOD\", \"TRTEMFL\")\nmissing_vars <- setdiff(required_vars, names(adae_data))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Filter for treatment-emergent AEs only\nadae_te <- adae_data %>%\n  filter(TRTEMFL == \"Y\") %>%\n  mutate(\n    AESOC = ifelse(is.na(AESOC), \"Not Specified\", AESOC),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", AEDECOD)\n  )\n\n# Get unique treatment groups from actual data\ntreatment_groups <- sort(unique(adae_te$TRT01A))\ncat(\"Treatment groups found: \", paste(treatment_groups, collapse = \", \"), \"\\n\")\n\n# Calculate total subjects per treatment group\ntotal_subjects <- adae_te %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\") %>%\n  mutate(trt_label = paste0(TRT01A, \" (N=\", total_n, \")\"))\n\n# Create summary table structure\nae_summary <- adae_te %>%\n  # Count AEs by SOC, PT, and treatment\n  group_by(AESOC, AEDECOD, TRT01A) %>%\n  summarise(n_ae = n_distinct(USUBJID), .groups = \"drop\") %>%\n  \n  # Join with total subject counts\n  left_join(total_subjects, by = \"TRT01A\") %>%\n  \n  # Calculate percentages\n  mutate(\n    pct = round(n_ae / total_n * 100, 1),\n    display_value = paste0(n_ae, \" (\", pct, \")\")\n  ) %>%\n  \n  # Select and arrange columns\n  select(AESOC, AEDECOD, TRT01A, trt_label, display_value) %>%\n  \n  # Pivot to wide format for table display\n  pivot_wider(\n    id_cols = c(AESOC, AEDECOD),\n    names_from = trt_label,\n    values_from = display_value,\n    values_fill = \"0 (0.0)\"\n  )\n\n# Create hierarchical table structure\nany_ae_row <- tibble(\n  `System Organ Class / Preferred Term` = \"Any Adverse Event\",\n  !!!setNames(rep(\"\", ncol(ae_summary) - 2), names(ae_summary)[-(1:2)])\n)\n\nsoc_rows <- ae_summary %>%\n  distinct(AESOC) %>%\n  mutate(\n    `System Organ Class / Preferred Term` = paste0(\"  \", AESOC),\n    row_type = \"soc\"\n  ) %>%\n  select(`System Organ Class / Preferred Term`)\n\npt_rows <- ae_summary %>%\n  mutate(\n    `System Organ Class / Preferred Term` = paste0(\"    \", AEDECOD)\n  ) %>%\n  select(`System Organ Class / Preferred Term`, everything(), -AESOC, -AEDECOD)\n\n# Combine all rows for final table\nfinal_table_data <- bind_rows(\n  any_ae_row,\n  soc_rows,\n  pt_rows\n) %>%\n  # Replace NA with empty strings\n  mutate(across(everything(), ~ifelse(is.na(.), \"\", .)))\n\n# Create total column\ntotal_col <- adae_te %>%\n  distinct(USUBJID, AESOC, AEDECOD) %>%\n  group_by(AESOC, AEDECOD) %>%\n  summarise(total_n = n(), .groups = \"drop\") %>%\n  mutate(\n    total_pct = round(total_n / n_distinct(adae_te$USUBJID) * 100, 1),\n    Total = paste0(total_n, \" (\", total_pct, \")\")\n  ) %>%\n  mutate(\n    `System Organ Class / Preferred Term` = case_when(\n      is.na(AEDECOD) ~ paste0(\"  \", AESOC),\n      TRUE ~ paste0(\"    \", AEDECOD)\n    )\n  ) %>%\n  select(`System Organ Class / Preferred Term`, Total)\n\n# Add total column to final table\nfinal_table_data <- final_table_data %>%\n  left_join(total_col, by = \"System Organ Class / Preferred Term\") %>%\n  mutate(Total = ifelse(is.na(Total), \"\", Total))\n\n# Reorder columns to match template pattern\nfinal_col_order <- c(\"System Organ Class / Preferred Term\", \n                    total_subjects$trt_label, \"Total\")\nfinal_table_data <- final_table_data %>%\n  select(all_of(final_col_order))\n\n# Create formatted table with gt\nfinal_gt_table <- final_table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.font.size = 12,\n    table.width = pct(100),\n    data_row.padding = px(4)\n  ) %>%\n  tab_footnote(\n    footnote = \"Treatment-emergent adverse events defined as events that started or worsened after first dose of study drug\",\n    locations = cells_title()\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels()\n  )\n\n# Create flextable for additional formatting options\nfinal_flextable <- final_table_data %>%\n  flextable() %>%\n  set_caption(\"Table 14.3.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\") %>%\n  fontsize(size = 10, part = \"all\") %>%\n  width(width = 2.5) %>%\n  align(align = \"left\", part = \"all\") %>%\n  add_footer_lines(\"Treatment-emergent adverse events defined as events that started or worsened after first dose of study drug\\nPercentages are based on the number of subjects in each treatment group\")\n\n# Save outputs to session directory\nwrite_html(as_raw_html(final_gt_table), \"outputs/execution_20250903T020303_fyz5vixe/adae_analysis_table_20250902_221504.html\")\nwrite_csv(final_table_data, \"outputs/execution_20250903T020303_fyz5vixe/adae_analysis_table_20250902_221504.csv\")\nsaveRDS(final_gt_table, \"outputs/execution_20250903T020303_fyz5vixe/adae_analysis_table_20250902_221504.rds\")\n\n# Also save flextable as Word document for regulatory submissions\nsave_as_docx(final_flextable, path = \"outputs/execution_20250903T020303_fyz5vixe/adae_analysis_table_20250902_221504.docx\")\n\ncat(\"Files saved to session directory: outputs/execution_20250903T020303_fyz5vixe/\\n\")\n\n# Display final table\nfinal_gt_table",
    "template_hash": "6453805348efdf15b076a173eb957ab9",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 93.59938383102417,
    "created_at": "2025-09-02T22:16:37.036246",
    "last_used": "2025-09-02T22:16:37.036246",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-02T22:16:37.034678",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  },
  "f9df26bb6a88b9878cb3c2a0a6c7fc90_dd4fe4574e8b41f89a1861849fded87e_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Set working directory to session directory for robust file handling\nsetwd(\"outputs/execution_20250903T023208_59rkwhal\")\ncat(\"Working directory set to: \", getwd(), \"\\n\")\n\n# Create session output directory if it doesn't exist\nif (!dir.exists(\"outputs/execution_20250903T023208_59rkwhal\")) {\n  dir.create(\"outputs/execution_20250903T023208_59rkwhal\", recursive = TRUE)\n  cat(\"Created session directory: outputs/execution_20250903T023208_59rkwhal\\n\")\n}\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\n# Check if required variables exist\nrequired_vars <- c(\"AEBODSYS\", \"AEDECOD\", \"TRT01A\", \"USUBJID\")\nmissing_vars <- setdiff(required_vars, names(adae_data))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Get unique subjects for denominator calculation\nunique_subjects <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\")\n\n# Create treatment group mapping with actual N values\ntreatment_groups <- unique_subjects %>%\n  mutate(\n    trt_label = paste0(TRT01A, \" (N=\", total_n, \")\")\n  ) %>%\n  select(TRT01A, trt_label)\n\n# Calculate AE counts by SOC and PT\nae_summary <- adae_data %>%\n  group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n  summarise(n_ae = n_distinct(USUBJID), .groups = \"drop\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct = round(n_ae / total_n * 100, 1),\n    display = paste0(n_ae, \" (\", pct, \")\")\n  ) %>%\n  left_join(treatment_groups, by = \"TRT01A\")\n\n# Create hierarchical table structure\n# SOC level summary\nsoc_summary <- ae_summary %>%\n  group_by(AEBODSYS, trt_label) %>%\n  summarise(n_soc = sum(n_ae), .groups = \"drop\") %>%\n  left_join(unique_subjects, by = c(\"trt_label\" = \"TRT01A\")) %>%\n  mutate(\n    pct_soc = round(n_soc / total_n * 100, 1),\n    display_soc = paste0(n_soc, \" (\", pct_soc, \")\"),\n    term = AEBODSYS,\n    level = \"SOC\"\n  ) %>%\n  select(term, trt_label, display = display_soc, level)\n\n# PT level summary\npt_summary <- ae_summary %>%\n  mutate(\n    term = paste0(\"  \", AEDECOD),  # Indent PT terms\n    level = \"PT\"\n  ) %>%\n  select(term, trt_label, display, level)\n\n# Combine SOC and PT with hierarchy\nhierarchical_data <- bind_rows(soc_summary, pt_summary) %>%\n  arrange(term, level) %>%\n  pivot_wider(\n    names_from = trt_label,\n    values_from = display,\n    values_fill = \"0 (0.0)\"\n  )\n\n# Add \"Any Adverse Event\" row at the top\nany_ae <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"n_any\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct_any = round(n_any / total_n * 100, 1),\n    display_any = paste0(n_any, \" (\", pct_any, \")\")\n  ) %>%\n  left_join(treatment_groups, by = \"TRT01A\") %>%\n  pivot_wider(\n    names_from = trt_label,\n    values_from = display_any\n  ) %>%\n  mutate(term = \"Any Adverse Event\")\n\n# Final table data\nfinal_table_data <- bind_rows(\n  any_ae %>% select(term, everything(), -TRT01A, -n_any, -total_n, -pct_any),\n  hierarchical_data\n)\n\n# Create formatted table with gt\nfinal_gt_table <- final_table_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = \"12px\"\n  ) %>%\n  tab_footnote(\n    footnote = \"Treatment-emergent adverse events are defined as events that start or worsen on or after the first dose of study drug.\",\n    locations = cells_title()\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group.\",\n    locations = cells_column_labels()\n  )\n\n# Create flextable for better Word compatibility\nfinal_flextable <- final_table_data %>%\n  flextable() %>%\n  set_caption(\"Table 14.3.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\") %>%\n  add_footer_lines(\"Treatment-emergent adverse events are defined as events that start or worsen on or after the first dose of study drug.\\nPercentages are based on the number of subjects in each treatment group.\") %>%\n  autofit()\n\n# Save outputs to session directory\n# HTML output\ngtsave(final_gt_table, \"outputs/execution_20250903T023208_59rkwhal/adae_analysis_table_20250902_223208.html\")\n\n# CSV data\nwrite_csv(final_table_data, \"outputs/execution_20250903T023208_59rkwhal/adae_analysis_table_20250902_223208.csv\")\n\n# RDS object\nsaveRDS(final_table_data, \"outputs/execution_20250903T023208_59rkwhal/adae_analysis_table_20250902_223208.rds\")\n\n# Save flextable as Word document for regulatory submission\nsave_as_docx(final_flextable, path = \"outputs/execution_20250903T023208_59rkwhal/adae_analysis_table_20250902_223208.docx\")\n\ncat(\"Files saved to session directory: outputs/execution_20250903T023208_59rkwhal/\\n\")\n\n# Display final table\nfinal_gt_table",
    "template_hash": "f9df26bb6a88b9878cb3c2a0a6c7fc90",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 82.0672447681427,
    "created_at": "2025-09-02T22:33:30.502290",
    "last_used": "2025-09-02T22:33:30.502290",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-02T22:33:30.501289",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  },
  "abe2e8cb9ff49a325655db9674bb8ffd_dd4fe4574e8b41f89a1861849fded87e_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Working directory is already configured by the execution environment\ncat(\"Current working directory:\", getwd(), \"\\n\")\n\n# All output files will be saved to the current directory\n# No additional directory setup needed\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\n# Check if required variables exist\nrequired_vars <- c(\"AEBODSYS\", \"AEDECOD\", \"TRT01A\", \"USUBJID\")\nmissing_vars <- setdiff(required_vars, names(adae_data))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Get unique subjects for denominator calculations\nunique_subjects <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\")\n\n# Create treatment group mapping\ntreatment_groups <- unique_subjects$TRT01A\ntreatment_n <- setNames(unique_subjects$total_n, treatment_groups)\n\n# Calculate AE counts by SOC and PT\nae_summary <- adae_data %>%\n  # Ensure we have proper SOC and PT values\n  mutate(\n    AEBODSYS = ifelse(is.na(AEBODSYS), \"Not Specified\", AEBODSYS),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", AEDECOD)\n  ) %>%\n  group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n  summarise(n_ae = n_distinct(USUBJID), .groups = \"drop\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct_ae = round(n_ae / total_n * 100, 1),\n    display_value = paste0(n_ae, \" (\", pct_ae, \")\")\n  )\n\n# Create hierarchical table structure\nsoc_level <- ae_summary %>%\n  group_by(AEBODSYS, TRT01A) %>%\n  summarise(n_ae = n_distinct(n_ae), .groups = \"drop\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct_ae = round(n_ae / total_n * 100, 1),\n    display_value = paste0(n_ae, \" (\", pct_ae, \")\"),\n    level = \"SOC\"\n  ) %>%\n  rename(term = AEBODSYS)\n\npt_level <- ae_summary %>%\n  mutate(\n    level = \"PT\",\n    term = AEDECOD\n  ) %>%\n  select(term, TRT01A, n_ae, total_n, pct_ae, display_value, level)\n\n# Combine SOC and PT levels with proper hierarchy\nhierarchical_data <- bind_rows(soc_level, pt_level) %>%\n  arrange(term, level) %>%\n  mutate(\n    term_display = ifelse(level == \"PT\", paste0(\"  \", term), term)\n  )\n\n# Create total row\ntotal_ae <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"n_ae\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct_ae = round(n_ae / total_n * 100, 1),\n    display_value = paste0(n_ae, \" (\", pct_ae, \")\"),\n    term = \"Any Adverse Event\",\n    term_display = \"Any Adverse Event\",\n    level = \"TOTAL\"\n  )\n\n# Final data structure\nfinal_data <- bind_rows(total_ae, hierarchical_data) %>%\n  select(term_display, TRT01A, display_value, level) %>%\n  pivot_wider(\n    names_from = TRT01A,\n    values_from = display_value,\n    values_fill = \"0 (0.0)\"\n  ) %>%\n  arrange(match(level, c(\"TOTAL\", \"SOC\", \"PT\"))) %>%\n  select(-level)\n\n# Create column headers with N values\ncol_headers <- c(\"System Organ Class / Preferred Term\")\nfor (trt in names(treatment_n)) {\n  col_headers <- c(col_headers, paste0(trt, \" (N=\", treatment_n[trt], \")\"))\n}\n\n# Create total column\nfinal_data <- final_data %>%\n  mutate(\n    Total = paste0(\n      rowSums(across(where(is.character), ~ as.numeric(str_extract(., \"^\\\\d+\"))), na.rm = TRUE),\n      \" (\",\n      round(rowSums(across(where(is.character), ~ as.numeric(str_extract(., \"(?<=\\\\()\\\\d+\\\\.\\\\d+\"))), na.rm = TRUE), 1),\n      \")\"\n    )\n  )\n\nnames(final_data) <- col_headers\n\n# Create formatted table using gt\nfinal_table <- final_data %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12)\n  ) %>%\n  tab_footnote(\n    footnote = \"Treatment-emergent adverse events defined as events that started or worsened after first dose of study drug\",\n    locations = cells_title()\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels(columns = everything())\n  )\n\n# Save outputs to session directory for Step 4 display\ngtsave(final_table, \"outputs/execution_20250903T030149_rjwdwcsp/adae_analysis_table_20250902_230151.html\")\nwrite_csv(final_data, \"outputs/execution_20250903T030149_rjwdwcsp/adae_analysis_table_20250902_230151.csv\")\nsaveRDS(final_table, \"outputs/execution_20250903T030149_rjwdwcsp/adae_analysis_table_20250902_230151.rds\")\n\ncat(\"Files saved to session directory: outputs/execution_20250903T030149_rjwdwcsp/\\n\")\n\n# Display final table\nfinal_table",
    "template_hash": "abe2e8cb9ff49a325655db9674bb8ffd",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 77.17377877235413,
    "created_at": "2025-09-02T23:03:07.350388",
    "last_used": "2025-09-02T23:03:07.350388",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-02T23:03:07.349389",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  },
  "0739e78a619b73d60e19fbea064eda41_dd4fe4574e8b41f89a1861849fded87e_4257a1d4f7b1b3c0889079f5d68cc506": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Working directory is already configured by the execution environment\ncat(\"Current working directory:\", getwd(), \"\\n\")\n\n# All output files will be saved to the current directory\n# No additional directory setup needed\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\nif (!exists(\"adae_data\")) {\n  stop(\"Dataset not loaded successfully\")\n}\n\n# Check required variables exist\nrequired_vars <- c(\"AEBODSYS\", \"AEDECOD\", \"TRT01A\", \"USUBJID\")\nmissing_vars <- setdiff(required_vars, names(adae_data))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Get unique subjects for denominator calculations\nunique_subjects <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\")\n\n# Create treatment group mapping\ntreatment_groups <- unique(adae_data$TRT01A)\ntreatment_labels <- paste0(treatment_groups, \" (N=\", \n                          unique_subjects$total_n[match(treatment_groups, unique_subjects$TRT01A)], \")\")\n\n# Calculate AE counts by SOC and PT\nae_summary <- adae_data %>%\n  # Ensure we have proper SOC and PT values\n  mutate(\n    AEBODSYS = ifelse(is.na(AEBODSYS), \"Not Specified\", AEBODSYS),\n    AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", AEDECOD)\n  ) %>%\n  group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n  summarise(n_ae = n_distinct(USUBJID), .groups = \"drop\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(\n    pct_ae = round(n_ae / total_n * 100, 1),\n    display_value = paste0(n_ae, \" (\", pct_ae, \")\")\n  )\n\n# Create hierarchical table structure\nsoc_level <- ae_summary %>%\n  distinct(AEBODSYS, TRT01A) %>%\n  group_by(AEBODSYS, TRT01A) %>%\n  summarise(n_ae = sum(ae_summary$n_ae[ae_summary$AEBODSYS == first(AEBODSYS) & \n                                      ae_summary$TRT01A == first(TRT01A)]),\n            total_n = first(unique_subjects$total_n[unique_subjects$TRT01A == first(TRT01A)]),\n            .groups = \"drop\") %>%\n  mutate(\n    pct_ae = round(n_ae / total_n * 100, 1),\n    display_value = paste0(n_ae, \" (\", pct_ae, \")\"),\n    level = \"SOC\"\n  )\n\npt_level <- ae_summary %>%\n  mutate(level = \"PT\")\n\n# Combine SOC and PT levels with proper hierarchy\nhierarchical_data <- bind_rows(\n  soc_level %>% select(AEBODSYS, TRT01A, display_value, level) %>% rename(term = AEBODSYS),\n  pt_level %>% select(AEBODSYS, AEDECOD, TRT01A, display_value, level) %>% rename(term = AEDECOD, parent = AEBODSYS)\n) %>%\n  arrange(term, level)\n\n# Pivot to wide format for table display\nfinal_table_data <- hierarchical_data %>%\n  pivot_wider(\n    id_cols = c(term, level, parent),\n    names_from = TRT01A,\n    values_from = display_value,\n    values_fill = \"0 (0.0)\"\n  ) %>%\n  arrange(parent, level, term)\n\n# Add \"Any Adverse Event\" row at the top\nany_ae <- unique_subjects %>%\n  left_join(\n    adae_data %>% distinct(USUBJID, TRT01A) %>% count(TRT01A, name = \"n_ae\"),\n    by = \"TRT01A\"\n  ) %>%\n  mutate(\n    pct_ae = round(n_ae / total_n * 100, 1),\n    display_value = paste0(n_ae, \" (\", pct_ae, \")\")\n  ) %>%\n  pivot_wider(\n    names_from = TRT01A,\n    values_from = display_value,\n    values_fill = \"0 (0.0)\"\n  ) %>%\n  mutate(term = \"Any Adverse Event\", level = \"HEADER\", parent = NA)\n\n# Combine all data\nfinal_table_combined <- bind_rows(any_ae, final_table_data) %>%\n  select(term, level, parent, everything(), -total_n, -n_ae, -pct_ae)\n\n# Create formatted table with gt\nfinal_gt_table <- final_table_combined %>%\n  select(term, all_of(treatment_groups)) %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.3.1 Summary of Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  cols_label(\n    term = \"System Organ Class / Preferred Term\",\n    !!!setNames(treatment_labels, treatment_groups)\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12),\n    data_row.padding = px(4)\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = \"System Organ Class and Preferred Term are coded using MedDRA\",\n    locations = cells_title()\n  )\n\n# Create flextable for better Word compatibility\nfinal_flextable <- final_table_combined %>%\n  select(term, all_of(treatment_groups)) %>%\n  flextable() %>%\n  set_header_labels(\n    term = \"System Organ Class / Preferred Term\",\n    !!!setNames(treatment_labels, treatment_groups)\n  ) %>%\n  set_caption(\"Table 14.3.1 Summary of Adverse Events by System Organ Class and Preferred Term\") %>%\n  add_footer_lines(\"Percentages are based on the number of subjects in each treatment group\") %>%\n  add_footer_lines(\"System Organ Class and Preferred Term are coded using MedDRA\") %>%\n  theme_booktabs() %>%\n  autofit()\n\n# Save outputs to session directory\nwrite_html(as_raw_html(final_gt_table), \"outputs/execution_2025-09-03T0347_p1hlhb/adae_analysis_table_20250902_235252.html\")\nwrite_csv(final_table_combined, \"outputs/execution_2025-09-03T0347_p1hlhb/adae_analysis_table_20250902_235252.csv\")\nsaveRDS(final_flextable, \"outputs/execution_2025-09-03T0347_p1hlhb/adae_analysis_table_20250902_235252.rds\")\n\ncat(\"Files saved to session directory: outputs/execution_2025-09-03T0347_p1hlhb/\\n\")\n\n# Display final table\nfinal_gt_table",
    "template_hash": "0739e78a619b73d60e19fbea064eda41",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "4257a1d4f7b1b3c0889079f5d68cc506",
    "success_rate": 1.0,
    "execution_time": 91.57853722572327,
    "created_at": "2025-09-02T23:54:24.353286",
    "last_used": "2025-09-03T00:03:02.661363",
    "use_count": 6,
    "metadata": {
      "generated_at": "2025-09-02T23:54:24.351286",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "Adverse event summary table with SOC and PT\n"
    }
  },
  "34e4286bde06ff51298a53e719bafa40_dd4fe4574e8b41f89a1861849fded87e_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Working directory is already configured by the execution environment\ncat(\"Current working directory:\", getwd(), \"\\n\")\n\n# All output files will be saved to the current directory\n# No additional directory setup needed\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n  \n  # Check required variables exist\n  required_vars <- c(\"AEBODSYS\", \"AEDECOD\", \"TRT01A\", \"USUBJID\")\n  missing_vars <- setdiff(required_vars, names(adae_data))\n  if (length(missing_vars) > 0) {\n    stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n  }\n  \n  # Basic data validation\n  cat(\"Dataset structure:\\n\")\n  str(adae_data[, required_vars])\n  cat(\"\\nTreatment groups found:\", paste(unique(adae_data$TRT01A), collapse = \", \"), \"\\n\")\n  \n}, error = function(e) {\n  stop(\"Failed to load or validate dataset: \", e$message)\n})\n\n# Process data for AE summary table\nae_summary <- adae_data %>%\n  # Get unique subjects with AEs by treatment\n  distinct(USUBJID, TRT01A, AEBODSYS, AEDECOD) %>%\n  # Calculate total subjects per treatment group\n  group_by(TRT01A) %>%\n  mutate(total_n = n_distinct(USUBJID)) %>%\n  ungroup() %>%\n  # Count AEs by SOC and PT\n  group_by(AEBODSYS, AEDECOD, TRT01A, total_n) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  # Calculate percentages\n  mutate(pct = round(n / total_n * 100, 1),\n         display = paste0(n, \" (\", pct, \")\")) %>%\n  # Clean up SOC and PT names\n  mutate(AEBODSYS = ifelse(is.na(AEBODSYS), \"Not Specified\", AEBODSYS),\n         AEDECOD = ifelse(is.na(AEDECOD), \"Not Specified\", AEDECOD))\n\n# Get all treatment groups\ntreatment_groups <- unique(ae_summary$TRT01A)\ntreatment_groups <- sort(treatment_groups[!is.na(treatment_groups)])\n\n# Create summary for \"Any Adverse Event\" row\nany_ae <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  group_by(TRT01A) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  mutate(total_n = n,\n         pct = 100,\n         display = paste0(n, \" (\", pct, \")\"),\n         AEBODSYS = \"Any Adverse Event\",\n         AEDECOD = \"Any Adverse Event\")\n\n# Create final table structure\nfinal_table_data <- bind_rows(\n  # Any AE row\n  any_ae %>% select(AEBODSYS, AEDECOD, TRT01A, n, total_n, pct, display),\n  \n  # SOC and PT rows\n  ae_summary %>% select(AEBODSYS, AEDECOD, TRT01A, n, total_n, pct, display)\n) %>%\n  # Pivot to wide format for table\n  pivot_wider(\n    id_cols = c(AEBODSYS, AEDECOD),\n    names_from = TRT01A,\n    values_from = c(n, total_n, pct, display),\n    values_fill = list(n = 0, pct = 0, display = \"0 (0.0)\")\n  )\n\n# Create hierarchical table structure with proper indentation\ntable_output <- final_table_data %>%\n  arrange(AEBODSYS, AEDECOD) %>%\n  group_by(AEBODSYS) %>%\n  mutate(\n    row_type = ifelse(AEDECOD == \"Any Adverse Event\", \"header\", \n                     ifelse(AEDECOD == AEBODSYS, \"soc\", \"pt\")),\n    display_name = case_when(\n      row_type == \"header\" ~ AEBODSYS,\n      row_type == \"soc\" ~ paste0(\"  \", AEBODSYS),\n      row_type == \"pt\" ~ paste0(\"    \", AEDECOD)\n    )\n  ) %>%\n  ungroup() %>%\n  select(display_name, starts_with(\"display_\"))\n\n# Get column names in proper order\ncol_order <- c(\"display_name\")\nfor (trt in treatment_groups) {\n  col_order <- c(col_order, paste0(\"display_\", trt))\n}\n\n# Add Total column if multiple treatment groups\nif (length(treatment_groups) > 1) {\n  table_output <- table_output %>%\n    rowwise() %>%\n    mutate(\n      total_n = sum(across(starts_with(\"n_\"), na.rm = TRUE),\n      total_pct = round(total_n / mean(across(starts_with(\"total_n_\")), na.rm = TRUE) * 100, 1),\n      display_Total = paste0(total_n, \" (\", total_pct, \")\")\n    ) %>%\n    ungroup()\n  col_order <- c(col_order, \"display_Total\")\n}\n\n# Final table formatting\nfinal_table <- table_output %>%\n  select(all_of(col_order)) %>%\n  # Rename columns to match template\n  rename_with(~ gsub(\"display_\", \"\", .x), -display_name) %>%\n  rename(`System Organ Class / Preferred Term` = display_name)\n\n# Create treatment group column headers with N=XX\ntreatment_headers <- c()\nfor (trt in treatment_groups) {\n  n_total <- any_ae %>% filter(TRT01A == trt) %>% pull(n) %>% first()\n  treatment_headers <- c(treatment_headers, paste0(trt, \" (N=\", n_total, \")\"))\n}\n\nif (length(treatment_groups) > 1) {\n  total_n <- sum(any_ae$n)\n  treatment_headers <- c(treatment_headers, paste0(\"Total (N=\", total_n, \")\"))\n}\n\ncolnames(final_table)[-1] <- treatment_headers\n\n# Save outputs to session directory\n# CSV data\nwrite_csv(final_table, \"outputs/execution_20250904T171518_zmow9q/adae_analysis_table_20250904_131520.csv\")\n\n# HTML table with professional formatting\nhtml_table <- final_table %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.2.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\",\n    subtitle = \"Safety Population\"\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = \"Treatment-emergent adverse events are those with start date on or after first dose of study drug\",\n    locations = cells_title(groups = \"subtitle\")\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = px(12)\n  )\n\ngtsave(html_table, \"outputs/execution_20250904T171518_zmow9q/adae_analysis_table_20250904_131520.html\")\n\n# RDS object for further processing\nsaveRDS(final_table, \"outputs/execution_20250904T171518_zmow9q/adae_analysis_table_20250904_131520.rds\")\n\ncat(\"Files saved to session directory: outputs/execution_20250904T171518_zmow9q/\\n\")\n\n# Display final table\nprint(final_table, n = 20)",
    "template_hash": "34e4286bde06ff51298a53e719bafa40",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 99.90566086769104,
    "created_at": "2025-09-04T13:16:58.956613",
    "last_used": "2025-09-04T13:16:58.957612",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-04T13:16:58.954614",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  },
  "f942e01251b9c923339de14fb648df03_dd4fe4574e8b41f89a1861849fded87e_2ffcc267fc5eed6fa9d3efca59a49a84": {
    "code": "# Load required libraries\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(gt)\nlibrary(flextable)\nlibrary(officer)\n\n# Working directory is already configured by the execution environment\ncat(\"Current working directory:\", getwd(), \"\\n\")\n\n# All output files will be saved to the current directory\n# No additional directory setup needed\n\n# Load dataset with error handling\ntryCatch({\n  adae_data <- read_sas(\"data/adam/adae.sas7bdat\")\n  cat(\"Dataset loaded successfully: \", nrow(adae_data), \" records\\n\")\n}, error = function(e) {\n  stop(\"Failed to load dataset: \", e$message)\n})\n\n# Data validation and preparation\n# Check if required variables exist\nrequired_vars <- c(\"AEBODSYS\", \"AEDECOD\", \"TRT01A\", \"USUBJID\")\nmissing_vars <- setdiff(required_vars, names(adae_data))\nif (length(missing_vars) > 0) {\n  stop(\"Missing required variables: \", paste(missing_vars, collapse = \", \"))\n}\n\n# Get unique subjects for denominator calculations\nunique_subjects <- adae_data %>%\n  distinct(USUBJID, TRT01A) %>%\n  count(TRT01A, name = \"total_n\")\n\n# Create treatment group mapping\ntreatment_groups <- unique_subjects$TRT01A\ntreatment_n <- setNames(unique_subjects$total_n, treatment_groups)\n\n# Calculate AE counts by SOC and PT\nae_summary <- adae_data %>%\n  group_by(AEBODSYS, AEDECOD, TRT01A) %>%\n  summarise(n_ae = n_distinct(USUBJID), .groups = \"drop\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(pct = round(n_ae / total_n * 100, 1),\n         display = paste0(n_ae, \" (\", pct, \")\")) %>%\n  select(-total_n)\n\n# Create hierarchical table structure\n# SOC level summary\nsoc_summary <- ae_summary %>%\n  group_by(AEBODSYS, TRT01A) %>%\n  summarise(n_ae = n_distinct(USUBJID), .groups = \"drop\") %>%\n  left_join(unique_subjects, by = \"TRT01A\") %>%\n  mutate(pct = round(n_ae / total_n * 100, 1),\n         display = paste0(n_ae, \" (\", pct, \")\"),\n         AEDECOD = NA_character_,\n         level = \"soc\") %>%\n  select(AEBODSYS, AEDECOD, TRT01A, n_ae, pct, display, level)\n\n# PT level detail\npt_summary <- ae_summary %>%\n  mutate(level = \"pt\") %>%\n  select(AEBODSYS, AEDECOD, TRT01A, n_ae, pct, display, level)\n\n# Combine SOC and PT data\nhierarchical_data <- bind_rows(soc_summary, pt_summary) %>%\n  arrange(AEBODSYS, is.na(AEDECOD), AEDECOD)\n\n# Create wide format for table display\ntable_wide <- hierarchical_data %>%\n  pivot_wider(\n    id_cols = c(AEBODSYS, AEDECOD, level),\n    names_from = TRT01A,\n    values_from = display,\n    values_fill = \"0 (0.0)\"\n  ) %>%\n  arrange(AEBODSYS, level, AEDECOD)\n\n# Add \"Any Adverse Event\" row\nany_ae <- unique_subjects %>%\n  mutate(display = paste0(total_n, \" (100.0)\")) %>%\n  pivot_wider(\n    names_from = TRT01A,\n    values_from = display\n  ) %>%\n  mutate(\n    AEBODSYS = \"Any Adverse Event\",\n    AEDECOD = NA_character_,\n    level = \"any\"\n  )\n\n# Combine all data\nfinal_table_data <- bind_rows(any_ae, table_wide) %>%\n  select(AEBODSYS, AEDECOD, all_of(treatment_groups), level)\n\n# Create formatted table with proper indentation\nformatted_table <- final_table_data %>%\n  mutate(\n    `System Organ Class / Preferred Term` = case_when(\n      level == \"any\" ~ AEBODSYS,\n      level == \"soc\" ~ paste0(\"  \", AEBODSYS),\n      level == \"pt\" ~ paste0(\"    \", AEDECOD),\n      TRUE ~ AEBODSYS\n    )\n  ) %>%\n  select(`System Organ Class / Preferred Term`, all_of(treatment_groups))\n\n# Update column names with N values\ncolnames(formatted_table) <- c(\n  \"System Organ Class / Preferred Term\",\n  paste0(\"Placebo (N=\", treatment_n[\"Placebo\"], \")\"),\n  paste0(\"Drug 50mg (N=\", treatment_n[\"Drug 50mg\"], \")\"),\n  paste0(\"Drug 100mg (N=\", treatment_n[\"Drug 100mg\"], \")\"),\n  paste0(\"Total (N=\", sum(treatment_n), \")\")\n)\n\n# Create gt table with professional formatting\nfinal_gt_table <- formatted_table %>%\n  gt() %>%\n  tab_header(\n    title = \"Table 14.2.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    table.font.size = \"12px\",\n    data_row.padding = px(4)\n  ) %>%\n  tab_footnote(\n    footnote = \"Percentages are based on the number of subjects in each treatment group\",\n    locations = cells_column_labels(columns = everything())\n  ) %>%\n  tab_footnote(\n    footnote = \"Treatment-emergent adverse events are those with start date on or after first dose of study drug\",\n    locations = cells_title()\n  )\n\n# Create flextable for better Word compatibility\nfinal_flextable <- formatted_table %>%\n  flextable() %>%\n  set_caption(\"Table 14.2.1 Summary of Treatment-Emergent Adverse Events by System Organ Class and Preferred Term\") %>%\n  fontsize(size = 10, part = \"all\") %>%\n  autofit() %>%\n  add_footer_lines(\"Percentages are based on the number of subjects in each treatment group. Treatment-emergent adverse events are those with start date on or after first dose of study drug.\")\n\n# Save outputs to session directory\n# HTML output\ngtsave(final_gt_table, \"outputs/execution_20250904T172249_r9ceelrz/adae_analysis_table_20250904_132250.html\")\n\n# CSV data\nwrite_csv(formatted_table, \"outputs/execution_20250904T172249_r9ceelrz/adae_analysis_table_20250904_132250.csv\")\n\n# RDS object\nsaveRDS(final_flextable, \"outputs/execution_20250904T172249_r9ceelrz/adae_analysis_table_20250904_132250.rds\")\n\ncat(\"Files saved to session directory: outputs/execution_20250904T172249_r9ceelrz/\\n\")\n\n# Display final table\nfinal_gt_table",
    "template_hash": "f942e01251b9c923339de14fb648df03",
    "data_hash": "dd4fe4574e8b41f89a1861849fded87e",
    "query_hash": "2ffcc267fc5eed6fa9d3efca59a49a84",
    "success_rate": 1.0,
    "execution_time": 90.21644973754883,
    "created_at": "2025-09-04T13:24:20.083363",
    "last_used": "2025-09-04T13:24:20.083363",
    "use_count": 1,
    "metadata": {
      "generated_at": "2025-09-04T13:24:20.082360",
      "agent": "Code Generator Agent",
      "template_id": null,
      "user_query": "AE summary table"
    }
  }
}